<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python操作ES(Elasticsearch)</title>
    <url>/2017/08/20/Elasticsearch_handle_with_python/</url>
    <content><![CDATA[<h1 id="最近好忙"><a href="#最近好忙" class="headerlink" title="最近好忙"></a>最近好忙</h1><p>最近这段时间工作上很忙，几乎是没有时间照顾到自己的生活，有时候甚至废寝忘食，虽然挺享受这个过程的，但是感觉身体慢慢垮了下去，好久也没骑车了。</p>
<p>今年元旦定下的骑车计划目前看来是完不成了，计划完成2000公里，目前只骑了200多公里，而现在已经是快9月份了，离明年元旦也没几个月了。</p>
<p>哎…生活和工作真的平衡不了么？</p>
<p>好了废话不多说，今天分享的是使用python来操作es，包括数据的插入，查询，拉取，删除等。</p>
<h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch?"></a>Elasticsearch?</h1><p><img src="http://o8fj2jbwb.bkt.clouddn.com/esmain.png" alt=""></p>
<a id="more"></a>

<p><a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">Elasticsearch</a>是一个分布式的 RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。作为 Elastic Stack 的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况。</p>
<p>通常使用 Elasticsearch + Logstash + Kibana 搭建实时日志集中分析平台。这里推荐可以阅读<a href="https://es.xiaoleilu.com/" target="_blank" rel="noopener">Elasticsearch 权威指南（中文版)</a>。</p>
<h1 id="让ES跑一会儿"><a href="#让ES跑一会儿" class="headerlink" title="让ES跑一会儿"></a>让ES跑一会儿</h1><p>首先当然是安装ES，安装完成之后，直接执行：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./elasticsearch</span></span><br></pre></td></tr></table></figure>
<p>会看到一大堆输出，最后如果看到：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">2017-10-16T22:34:53,271</span>][<span class="symbol">INFO </span>][<span class="string">o.e.n.Node               </span>] [7YPd2Iu] started</span><br></pre></td></tr></table></figure>
<p>证明没啥问题了。es监听9200端口: <a href="http://127.0.0.1:9200/" target="_blank" rel="noopener">http://127.0.0.1:9200/</a></p>
<p>接下来键入命令：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">curl <span class="symbol">'http</span>:<span class="comment">//127.0.0.1:9200/?pretty'</span></span><br></pre></td></tr></table></figure>
<p>你会看到如下输出：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"7YPd2Iu"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span> : <span class="string">"1BDZA7JKRV2jfrjtvQCpGw"</span>,</span><br><span class="line">  <span class="attr">"version"</span> : &#123;</span><br><span class="line">    <span class="attr">"number"</span> : <span class="string">"5.5.0"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span> : <span class="string">"260387d"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span> : <span class="string">"2017-06-30T23:16:05.735Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span> : <span class="string">"6.6.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="几个重要的概念"><a href="#几个重要的概念" class="headerlink" title="几个重要的概念"></a>几个重要的概念</h1><h2 id="索引-index"><a href="#索引-index" class="headerlink" title="索引(index)"></a>索引(index)</h2><p>索引(index)就是一个有相似特征的文档的集合，es把数据存储到一个或多个索引中。通常index是一个比较大的分类，比如按照不同的客户，或者不同的产品，或者不同的时间戳。</p>
<p><strong>通常构造index的时候需要考虑好分类的粒度，因为如果后面想要批量删除的话基本单位是索引。如果构造的index分类粒度太大，那么批量删除的时候将会变得很麻烦。</strong></p>
<p>如果是采用ES来搭建实时日志搜索平台，那么通常建议index按照时间戳来进行命名，因为这样的话可以设置超过几天的日志全部删除，清理磁盘空间。</p>
<h2 id="文档-document"><a href="#文档-document" class="headerlink" title="文档(document)"></a>文档(document)</h2><p>文档(document)是es中存储数据的实体，它是可以被索引的基本单元。每一个文档都以json格式表示，每一个索引可以任意多个文档。</p>
<p>简单来说就是<strong>文档其实就是真实的每一条的存储的数据，比如每条以json格式表示的日志。</strong>每一个文档物理上存在一个索引中，但文档必须有一个文档类型(type)。</p>
<h2 id="类型-type"><a href="#类型-type" class="headerlink" title="类型(type)"></a>类型(type)</h2><p>类型(type)是索引之下的逻辑分区，相对index更细的分类粒度。比如如果index以日期命名，那么type可以以具体的客户命名。然后每一个客户下面，又有很多的文档实体。</p>
<h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><p>每一个文档实体，ES会自动为其创建一个唯一的id，比如<strong>“AV8tQS119lFHJS7Mv7v8”</strong>。</p>
<p>这里不太重要不需要关注，但有一点需要注意，日志的字段不能有id这个字段，否则会跟自动创建的id冲突，导致可能插入数据失败。</p>
<h1 id="python操作ES实战"><a href="#python操作ES实战" class="headerlink" title="python操作ES实战"></a>python操作ES实战</h1><p>理解了上面的几个概念，然后就可以开始真正使用ES了。其实可以简单的把ES类比为一个数据库，可以执行插入，查询，更新，删除等操作。</p>
<h2 id="预热"><a href="#预热" class="headerlink" title="预热"></a>预热</h2><p>ES支持很多语言，其中就有python。安装ES的python库：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> elasticsearch</span><br></pre></td></tr></table></figure>

<h2 id="亮剑"><a href="#亮剑" class="headerlink" title="亮剑"></a>亮剑</h2><p>前面使用了类似下面的命令，那么使用python怎么操作呢？</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">curl 'http://127.0.0.1:<span class="number">9200</span>/'</span><br></pre></td></tr></table></figure>
<p>很简单，使用requests库：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">make</span> sure ES <span class="keyword">is</span> <span class="keyword">up</span> <span class="built_in">and</span> running</span><br><span class="line">import requests</span><br><span class="line"><span class="keyword">res</span> = requests.<span class="built_in">get</span>(<span class="string">'http://127.0.0.1:9200'</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.content)</span><br></pre></td></tr></table></figure>

<p>先来执行一个插入操作尝尝鲜。执行任何操作前，需要首先创建ES的实例：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">#connect <span class="keyword">to</span> our cluster</span><br><span class="line"><span class="keyword">import</span> elasticsearch</span><br><span class="line">es = elasticsearch.Elasticsearch(<span class="meta">[</span>&#123;<span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>, <span class="string">'port'</span>: <span class="number">9200</span>&#125;<span class="meta">]</span>)</span><br></pre></td></tr></table></figure>
<p>完成后，执行插入操作，比如：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">es.index(<span class="attribute">index</span>=<span class="string">'test'</span>, <span class="attribute">doc_type</span>=<span class="string">'people'</span>,id=1, <span class="attribute">body</span>=source)</span><br></pre></td></tr></table></figure>
<p>其中source是一个python dict对象。</p>
<p>完成插入操作后，如何判断有没有插入成功呢？</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">r = es.<span class="builtin-name">get</span>(<span class="attribute">index</span>=<span class="string">'test'</span>,doc_type= <span class="string">'people'</span>,id = 2)</span><br></pre></td></tr></table></figure>
<p>如果插入成功的话使用get操作是可以看到你插入的数据的。完整代码见下文。</p>
<h2 id="威力更大的武器"><a href="#威力更大的武器" class="headerlink" title="威力更大的武器"></a>威力更大的武器</h2><p>上面简单执行了插入操作，但可以看到的是插入是一条一条的插入，效率低下，我们可以使用批量的方式进行插入：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#connect to our cluster</span><br><span class="line"><span class="keyword">import</span> elasticsearch</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> helpers</span><br><span class="line">es = elasticsearch.Elasticsearch([&#123;<span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>, <span class="string">'port'</span>: <span class="number">9200</span>&#125;])</span><br><span class="line"></span><br><span class="line">#action为文档的list</span><br><span class="line">helpers.bulk(es,action)</span><br></pre></td></tr></table></figure>
<p>批量的方式能更加高效的执行插入操作。完整代码以及输出见后文。</p>
<h2 id="冲锋"><a href="#冲锋" class="headerlink" title="冲锋"></a>冲锋</h2><p>要说ES里插入，删除，更新，查询这几个操作，最核心的操作在于查询，或者说搜索，这也正如ES介绍的那样<strong>“Elasticsearch是一个分布式的 RESTful 风格的搜索和数据分析引擎”</strong>。搜索操作体现了ES的高性能。</p>
<p>先来看一个简单的搜索：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">qbody = &#123;</span><br><span class="line">      <span class="string">"query"</span>:&#123;</span><br><span class="line">        <span class="string">"match_all"</span>:&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">res</span> = es.<span class="built_in">search</span>(<span class="built_in">index</span> = <span class="string">'test2'</span>,body = json.dumps(qbody))</span><br><span class="line">    RES = json.dumps(<span class="keyword">res</span>,<span class="built_in">indent</span> = <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">print</span> RES</span><br><span class="line">  except elasticsearch.exceptions.NotFoundError:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"not found %s"</span> % query</span><br></pre></td></tr></table></figure>
<p>其中很重要的部分就是查询条件Qbody，或者说过滤条件。而且这里涉及到的过滤条件相对来说比较复杂。“match_all”表示该index下的所有document。</p>
<p>搜索这节是比较重要的，此处只是简单的执行了一下搜索命令，后面有单独的章节进行介绍。</p>
<p>前面涉及到的源代码以及输出如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf8 -*-</span></span><br><span class="line"></span><br><span class="line">import copy</span><br><span class="line"></span><br><span class="line"><span class="comment">#connect to our cluster</span></span><br><span class="line">import elasticsearch</span><br><span class="line"><span class="keyword">from</span> elasticsearch import helpers</span><br><span class="line">es = elasticsearch.Elasticsearch([&#123;<span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>, <span class="string">'port'</span>: 9200&#125;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># make sure ES is up and running</span></span><br><span class="line">import requests</span><br><span class="line">res = requests.<span class="builtin-name">get</span>(<span class="string">'http://127.0.0.1:9200'</span>)</span><br><span class="line"><span class="builtin-name">print</span>(res.content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#let's iterate over swapi people documents and index them</span></span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">example = &#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">""</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="string">""</span>,</span><br><span class="line">    <span class="string">"sex"</span>:<span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">def append(name,age,sex):</span><br><span class="line">  source = copy.deepcopy(example)</span><br><span class="line">  source[<span class="string">"name"</span>] = name</span><br><span class="line">  source[<span class="string">"age"</span>] = age</span><br><span class="line">  source[<span class="string">"sex"</span>] = sex</span><br><span class="line">  return source</span><br><span class="line"></span><br><span class="line">document = &#123;</span><br><span class="line">    <span class="string">"_index"</span>:<span class="string">""</span>,</span><br><span class="line">    <span class="string">"_type"</span>:<span class="string">""</span>,</span><br><span class="line">    <span class="string">"_id"</span>:<span class="string">""</span>,</span><br><span class="line">    <span class="string">"_source"</span>:<span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">action = []</span><br><span class="line">def create_doc(_index,_type,_id,_source):</span><br><span class="line">  oneindex = copy.deepcopy(example)</span><br><span class="line">  oneindex[<span class="string">'_index'</span>] = _index</span><br><span class="line">  oneindex[<span class="string">'_type'</span>] = _type</span><br><span class="line">  oneindex[<span class="string">'_id'</span>] =  _id</span><br><span class="line">  oneindex[<span class="string">'_source'</span>] = _source</span><br><span class="line">  action.append(oneindex)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  <span class="builtin-name">print</span> <span class="string">"index!!!...."</span></span><br><span class="line">  source = append(<span class="string">"jsper"</span>,17,<span class="string">"male"</span>)</span><br><span class="line">  es.index(<span class="attribute">index</span>=<span class="string">'test'</span>, <span class="attribute">doc_type</span>=<span class="string">'people'</span>,id=1, <span class="attribute">body</span>=source)</span><br><span class="line">  source = append(<span class="string">"david"</span>,18,<span class="string">"female"</span>)</span><br><span class="line">  es.index(<span class="attribute">index</span>=<span class="string">'test'</span>, <span class="attribute">doc_type</span>=<span class="string">'people'</span>, <span class="attribute">id</span>=2,body=source)</span><br><span class="line">  source = append(<span class="string">"enhen"</span>,19,<span class="string">"male"</span>)</span><br><span class="line">  es.index(<span class="attribute">index</span>=<span class="string">'test'</span>, <span class="attribute">doc_type</span>=<span class="string">'people'</span>, <span class="attribute">id</span>=3,body=source)</span><br><span class="line">  <span class="builtin-name">print</span> <span class="string">'index  success! \n'</span></span><br><span class="line"></span><br><span class="line">  <span class="builtin-name">print</span> <span class="string">"get!!!..."</span></span><br><span class="line">  try:</span><br><span class="line">    r = es.<span class="builtin-name">get</span>(<span class="attribute">index</span>=<span class="string">'test'</span>,doc_type= <span class="string">'people'</span>,id = 2)</span><br><span class="line">    <span class="builtin-name">print</span> json.dumps(r,indent = 4)</span><br><span class="line">  except elasticsearch.exceptions.NotFoundError:</span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">'error'</span></span><br><span class="line"></span><br><span class="line">  <span class="builtin-name">print</span> <span class="string">"bulk\n"</span></span><br><span class="line">  source = append(<span class="string">"smaug"</span>,25,<span class="string">"male"</span>)</span><br><span class="line">  create_doc(<span class="string">"test2"</span>,<span class="string">"people"</span>,1,source)</span><br><span class="line">  source = append(<span class="string">"ablex"</span>,24,<span class="string">"female"</span>)</span><br><span class="line">  create_doc(<span class="string">"test2"</span>,<span class="string">"people"</span>,2,source)</span><br><span class="line">  source = append(<span class="string">"lucas"</span>,26,<span class="string">"female"</span>)</span><br><span class="line">  create_doc(<span class="string">"test2"</span>,<span class="string">"people"</span>,3,source)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  helpers.bulk(es,action)</span><br><span class="line">  <span class="builtin-name">print</span> <span class="string">"bulk finished! "</span></span><br><span class="line">  r = es.<span class="builtin-name">get</span>(<span class="attribute">index</span>=<span class="string">'test2'</span>,doc_type= <span class="string">'people'</span>,id = 2)</span><br><span class="line">  <span class="builtin-name">print</span> json.dumps(r,indent = 4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="builtin-name">print</span> <span class="string">"search\n"</span></span><br><span class="line">  qbody = &#123;</span><br><span class="line">      <span class="string">"query"</span>:&#123;</span><br><span class="line">        <span class="string">"match_all"</span>:&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  try:</span><br><span class="line">    res = es.search(index = <span class="string">'test2'</span>,body = json.dumps(qbody))</span><br><span class="line">    RES = json.dumps(res,indent = 2)</span><br><span class="line">    <span class="builtin-name">print</span> RES</span><br><span class="line">  except elasticsearch.exceptions.NotFoundError:</span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"not found %s"</span> % query</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">[localhost@vm es]$ python index_markdown.py</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"7YPd2Iu"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"1BDZA7JKRV2jfrjtvQCpGw"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"5.5.0"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"260387d"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2017-06-30T23:16:05.735Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : false,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"6.6.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">index!!!....</span><br><span class="line">index  success!</span><br><span class="line"></span><br><span class="line">get!!!...</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"_type"</span>: <span class="string">"people"</span>,</span><br><span class="line">    <span class="string">"_source"</span>: &#123;</span><br><span class="line">        <span class="string">"age"</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"david"</span>,</span><br><span class="line">        <span class="string">"sex"</span>: <span class="string">"female"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"_index"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="string">"_version"</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="string">"found"</span>: true,</span><br><span class="line">    <span class="string">"_id"</span>: <span class="string">"2"</span></span><br><span class="line">&#125;</span><br><span class="line">bulk</span><br><span class="line"></span><br><span class="line">bulk finished!</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"_type"</span>: <span class="string">"people"</span>,</span><br><span class="line">    <span class="string">"_source"</span>: &#123;</span><br><span class="line">        <span class="string">"age"</span>: <span class="number">24</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"ablex"</span>,</span><br><span class="line"></span><br><span class="line">▽</span><br><span class="line">        <span class="string">"sex"</span>: <span class="string">"female"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"_index"</span>: <span class="string">"test2"</span>,</span><br><span class="line">    <span class="string">"_version"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"found"</span>: true,</span><br><span class="line">    <span class="string">"_id"</span>: <span class="string">"2"</span></span><br><span class="line">&#125;</span><br><span class="line">search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"hits"</span>: &#123;</span><br><span class="line">    <span class="string">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"_score"</span>: <span class="number">1.0</span>,</span><br><span class="line">        <span class="string">"_type"</span>: <span class="string">"people"</span>,</span><br><span class="line">        <span class="string">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="string">"_source"</span>: &#123;</span><br><span class="line">          <span class="string">"age"</span>: <span class="number">24</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"ablex"</span>,</span><br><span class="line">          <span class="string">"sex"</span>: <span class="string">"female"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_index"</span>: <span class="string">"test2"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"_score"</span>: <span class="number">1.0</span>,</span><br><span class="line">        <span class="string">"_type"</span>: <span class="string">"people"</span>,</span><br><span class="line">        <span class="string">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"_source"</span>: &#123;</span><br><span class="line">          <span class="string">"age"</span>: <span class="number">25</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"smaug"</span>,</span><br><span class="line">          <span class="string">"sex"</span>: <span class="string">"male"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_index"</span>: <span class="string">"test2"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"_score"</span>: <span class="number">1.0</span>,</span><br><span class="line">        <span class="string">"_type"</span>: <span class="string">"people"</span>,</span><br><span class="line">        <span class="string">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="string">"_source"</span>: &#123;</span><br><span class="line">          <span class="string">"age"</span>: <span class="number">26</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"lucas"</span>,</span><br><span class="line">          <span class="string">"sex"</span>: <span class="string">"female"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"_index"</span>: <span class="string">"test2"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"max_score"</span>: <span class="number">1.0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"_shards"</span>: &#123;</span><br><span class="line">    <span class="string">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"failed"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"total"</span>: <span class="number">5</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"took"</span>: <span class="number">185</span>,</span><br><span class="line">  <span class="string">"timed_out"</span>: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="过滤-搜索"><a href="#过滤-搜索" class="headerlink" title="过滤/搜索"></a>过滤/搜索</h1><p>这部分我觉得是比较核心的部分。因为搜索比较复杂，涉及到过滤条件，以及使用scroll的方式进行更加高性能的搜索等。所以我打算另写一篇博客详细介绍我的使用感受，配合我日常工作中碰到的具体事情来进行说明。</p>
<h1 id="收工"><a href="#收工" class="headerlink" title="收工"></a>收工</h1><p>好了，暂时写到这。后续关于ES更多的内容，见我之后的博客。</p>
]]></content>
      <categories>
        <category>linux</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>FIX协议介绍</title>
    <url>/2017/02/09/FIX-protocol-introduce/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>FIX协议是什么？我为什么会接触到FIX协议？由于工作上的关系，自己负责的一个模块需要实现fix报文与xml报文之间的转换。故需要了解fix是个什么东西才能实现这个转换功能。总体看来，FIX协议还是有些许的复杂，些许的不好理解。闲话少叙，开干！</p>
<h1 id="什么是FIX"><a href="#什么是FIX" class="headerlink" title="什么是FIX"></a>什么是FIX</h1><p>Financial Information eXchange(FIX)金融信息交换协议的制定是由多个致力于提升其相互间交易流程效率的金融机构和经纪商于1992年共同发起。这些企业把他们及他们的行业视为一个整体，认为能够从对交易指示，交易指令及交易执行的高效电子数据交换的驱动中获利。FIX由此诞生，一个不受单一实体控制的开放消息标准，一个能够被调整组建适用于任何一个企业的商务需求的协议。</p>
<p>FIX协议包含2个层次：会话层和应用层。会话层与数据的通信相关；而应用层定义了商务相关数据内容。<br>2006年10月，FPL发布了FIX5.0。FIX5.0引入TI（the transport independence ）传输无关框架。TI将FIX会话层从应用层协议中分离出来。在TI框架下，应用层协议消息可以通过任意合适的传输技术进行传送，在这里，FIX会话层协议是FIX应用层消息的可选传输传输协议之一。两个协议层的版本标注将会有所不同，FIX X.Y为FIX应用层协议版本；FIXT X.Y 为FIX会话层协议版本编号。如下图：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/fixxml.png" alt=""></p>
<p>关于FIX协议会话层的细节和内容这篇博文不会展开介绍，会话层更多关于通信细节，此文重点介绍应用层的内容，这也是我用来进行报文转换的基础。</p>
<h1 id="FIX协议格式"><a href="#FIX协议格式" class="headerlink" title="FIX协议格式"></a>FIX协议格式</h1><a id="more"></a>
<blockquote>
<p><strong><em>这是这篇博文的重点</em></strong></p>
</blockquote>
<p>目前，FIX协议存在2种语法格式。</p>
<ol>
<li><p>“tag=value”语法格式</p>
</li>
<li><p>“FIXML语法” 语法格式</p>
</li>
</ol>
<p>同一个商业信息流适用于任何一种语法。</p>
<h2 id="普通FIX语法规则"><a href="#普通FIX语法规则" class="headerlink" title="普通FIX语法规则"></a>普通FIX语法规则</h2><p>普通FIX语法规则，是对“标记=值”和“FIXML”2种语法都适用的一般规则。</p>
<h3 id="Data-Type"><a href="#Data-Type" class="headerlink" title="Data Type"></a>Data Type</h3><ul>
<li><p>int:整型 没有小数点，逗号，可以包含正负号的数字序列。注，int的值前面可以包含0。(如 “00023” = “23”)</p>
<pre><code>Examples：723 in field 21 would be mapped int as |21=723|
         -723 in field 12 would be mapped int as |12=-723|</code></pre></li>
<li><p>float: 浮点数。可包含小数点和正负号的数字序。累计总长度为15个数字。前面可以有0，小数末尾可加零，或截尾</p>
</li>
<li><p>String: 字符串。是大小写敏感的。</p>
</li>
<li><p>char: 字符。除分界符号SOH外的字符。大小写敏感。</p>
</li>
<li><p>data: 原始数据。 没有格式和内容限制。之前紧接有一个长度域。长度域应制定data数据域包含的字节数（不好含分界符所占字节）。数据中可能包含分界符字节，所以需要用data类型数据长度来辅助区别。</p>
</li>
</ul>
<h3 id="Required-Fields-必选数据域"><a href="#Required-Fields-必选数据域" class="headerlink" title="Required Fields 必选数据域"></a>Required Fields 必选数据域</h3><p>协议每个消息由必选、可选和条件必选（根据其他域的不同）数据域构成。系统应当设计成可支持只提供必选和条件必选数据域的相关操作。</p>
<h3 id="FIX-“Tag-Value”语法"><a href="#FIX-“Tag-Value”语法" class="headerlink" title="FIX “Tag=Value”语法"></a>FIX “Tag=Value”语法</h3><ol>
<li><strong>Message Format消息格式</strong></li>
</ol>
<p>FIX消息的一般格式为：一个标准头+消息体+一个标准的尾部<br>每个消息由一个包含多个 ，由分界符隔开的，“标记=值”数据域的流构成。标记为TagNum数据类型。所有的标记都有一个特定的值。可选域可以不出现。无值消息将会产生一个Reject消息。</p>
<ul>
<li>FIX消息的一般格式为：一个标准头+消息体+一个标准的尾部</li>
<li>消息头的前三个域为<br>BeginString(tag #8)+BodyLenth(tag#9)+MsgType(tag#35)</li>
<li>标准消息尾的最后一个域为CheckSum(tag#10)</li>
<li>在重复数据组内的数据域必须按照FIX规范文档中规定的顺序明确定义。Noxxx域，xxx表示循环组的计数，必须放置在循环组数据内容的的前面。</li>
<li>一个特定的tag 数应当是唯一的。如果重复，将被认为是一个违反规范文档的错误。错误应当向FIX Global Technical Committee报告<br>此外，某些数据类型为Multiple CharValue的数据域，可以包含多个由空格隔开，由一个SOH技术的多个部分。<br>在同一个消息里，包含明文部分和密文部分的数据的数据域也是可能的。通常用于验证和认证。</li>
</ul>
<p>2 . <strong>Field Delimiter: 域分界符</strong></p>
<p>数据域分界符，在FIX一个消息内的所有数据域由一个分界字符标记结尾。用ASCII码的“SOH”（#001，hex：0x01）进行间隔。所有消息由“8=FIX.x.y<SOH>”标记开始，最后由“10=nnn<SOH>“标记结束。</p>
<p>3 .<strong>Repeating Groups:循环组</strong></p>
<p>允许在一个循环组里出现重复的数据域。372=x<SOH>为循环组的第一个域。</p>
<ul>
<li>如果使用循环组，循环组的第一个域是必选项，作为新循环组的一个分界。该第一域紧跟在NoXXX后面，然后，当NoXXX值大于0时，变成当条件必选。</li>
<li>NoXXX域（比如，NoTradingSessions，NoAllocs）定义了循环组实例的数量，对一个循环组只出现一次，且必须在循环组内容之前。</li>
<li>如果在一个循环组中的一个域是必选的，则NoXXX是必选的。如果所有循环组中的成员是可选的，则NoXXX域也应该是可选的。</li>
<li>如果一个循环组域被列为必选，则它必须出现在该循环组的每一个实例中。</li>
<li>循环组在消息中被设计成通过缩排，和à符号进行定义。一些循环组可以在其他循环组中级联出现。可大于一层的级联。</li>
</ul>
<p>4 .<strong>User Defined Fields: 用户自定义域</strong></p>
<p>为给用户提供最大的灵活性，FIX协议允许用户自定义域。 这些域在认同的参与者之间实现、应用，并且应注意避免冲突。</p>
<p>Tag数在5000 到9999保留用于用户自定义域。这些tag值用于企业联盟的信息交换。可以通过FIX网站进行注册。</p>
<p>10000以上保留用于单一企业内部使用。不用注册。</p>
<p>5 .<strong>Example</strong></p>
<pre><code>char* fix = &quot;8=FIX.4.2\0019=272\00135=E\00134=126\00166666=1095350459\00150=00303\00149=BUYSIDE\00152&quot;
            &quot;=20040916-16:19:18.328\00168=2\00156=SELLSIDE\00173=2\00111&quot;
            &quot;=1095350459\00155=fred\00140=1\00167=1\0011=00303\00178=3\00179=string\00179=string\00179=string\00154=1\001  59=3\001&quot;
            &quot;11=1095350460\00167=2\00140=1\00159=3\0011=00303\00178=3\00179=string\00179=string\00179=string\00155=feed\0  0154=5\001394=3\00110=120\001&quot;;</code></pre><h3 id="FIXML语法格式"><a href="#FIXML语法格式" class="headerlink" title="FIXML语法格式"></a>FIXML语法格式</h3><p>目前采用的都是tag=value来完成数据交换,FIXML格式用的不多。 其中FIXML可读性更强， 但占用更多的带宽资源。</p>
<p>Example:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FIXML</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FIXMLMessage</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PossDupFlag</span> <span class="attr">Value</span>=<span class="string">"N"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PossResend</span> <span class="attr">Value</span>=<span class="string">"N"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">SendingTime</span>&gt;</span>20020103-12  00  01<span class="tag">&lt;/<span class="name">SendingTime</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Sender</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CompID</span>&gt;</span>AFUNDMGR<span class="tag">&lt;/<span class="name">CompID</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Sender</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CompID</span>&gt;</span>ABROKER<span class="tag">&lt;/<span class="name">CompID</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ApplicationMessage</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Order</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ClOrdID</span>&gt;</span>1968<span class="tag">&lt;/<span class="name">ClOrdID</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Account</span>&gt;</span>4130287<span class="tag">&lt;/<span class="name">Account</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">HandlInst</span> <span class="attr">Value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ExDestination</span> <span class="attr">Value</span>=<span class="string">"L"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Instrument</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Symbol</span>&gt;</span>IBM<span class="tag">&lt;/<span class="name">Symbol</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">SecurityID</span>&gt;</span>459200101<span class="tag">&lt;/<span class="name">SecurityID</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">SecurityIDSource</span> <span class="attr">Value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Instrument</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Side</span> <span class="attr">Value</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TransactTime</span>&gt;</span>20021120-12  13  12<span class="tag">&lt;/<span class="name">TransactTime</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">OrderQtyData</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">OrderQty</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">OrderQty</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">OrderQtyData</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">OrdType</span> <span class="attr">Value</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Price</span>&gt;</span>93.25<span class="tag">&lt;/<span class="name">Price</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Currency</span> <span class="attr">Value</span>=<span class="string">"USD"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Order</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ApplicationMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">FIXMLMessage</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FIXML</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h2><blockquote>
<p><strong><em>什么是数据字典？为何又需要数据字典？</em></strong></p>
</blockquote>
<p>回答这两个问题前，需要了解清楚上面关于fix协议格式的内容。fix协议第一种语法采用”tag=value”的方式，其中tag就是预定义的东西，为了节省传输过程中的字节数，fix把一些能够用到的字段名进行了预定义，写到了一个文件中，并命名为诸如FIX42.xml,FIX44.xml等。</p>
<p>实际应用中，FIX引擎在对fix报文的组包，解包过程中需要解析这些文件，比如解析到tag为<strong>8</strong>，则代表字段<strong>BeginString</strong>。FIXXX.xml文件中还定义了不同的结构，”messages”,”fields”,”header”,”group”等。详细如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fix</span> <span class="attr">major</span>=<span class="string">'4'</span> <span class="attr">type</span>=<span class="string">'FIX'</span> <span class="attr">servicepack</span>=<span class="string">'0'</span> <span class="attr">minor</span>=<span class="string">'4'</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'BeginString'</span> <span class="attr">required</span>=<span class="string">'Y'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'BodyLength'</span> <span class="attr">required</span>=<span class="string">'Y'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'MsgType'</span> <span class="attr">required</span>=<span class="string">'Y'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'SenderCompID'</span> <span class="attr">required</span>=<span class="string">'Y'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'TargetCompID'</span> <span class="attr">required</span>=<span class="string">'Y'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'OnBehalfOfCompID'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'DeliverToCompID'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'SecureDataLen'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'SecureData'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'MsgSeqNum'</span> <span class="attr">required</span>=<span class="string">'Y'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'SenderSubID'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'SenderLocationID'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'TargetSubID'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'TargetLocationID'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'OnBehalfOfSubID'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'OnBehalfOfLocationID'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'DeliverToSubID'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'DeliverToLocationID'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'PossDupFlag'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'PossResend'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'SendingTime'</span> <span class="attr">required</span>=<span class="string">'Y'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'OrigSendingTime'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'XmlDataLen'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'XmlData'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'MessageEncoding'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">'LastMsgSeqNumProcessed'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">'Hop'</span> <span class="attr">required</span>=<span class="string">'N'</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">messages</span>&gt;</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">fields</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'1'</span> <span class="attr">name</span>=<span class="string">'Account'</span> <span class="attr">type</span>=<span class="string">'STRING'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'2'</span> <span class="attr">name</span>=<span class="string">'AdvId'</span> <span class="attr">type</span>=<span class="string">'STRING'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'3'</span> <span class="attr">name</span>=<span class="string">'AdvRefID'</span> <span class="attr">type</span>=<span class="string">'STRING'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'4'</span> <span class="attr">name</span>=<span class="string">'AdvSide'</span> <span class="attr">type</span>=<span class="string">'CHAR'</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'B'</span> <span class="attr">description</span>=<span class="string">'BUY'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'S'</span> <span class="attr">description</span>=<span class="string">'SELL'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'X'</span> <span class="attr">description</span>=<span class="string">'CROSS'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'T'</span> <span class="attr">description</span>=<span class="string">'TRADE'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'5'</span> <span class="attr">name</span>=<span class="string">'AdvTransType'</span> <span class="attr">type</span>=<span class="string">'STRING'</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'N'</span> <span class="attr">description</span>=<span class="string">'NEW'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'C'</span> <span class="attr">description</span>=<span class="string">'CANCEL'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'R'</span> <span class="attr">description</span>=<span class="string">'REPLACE'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'6'</span> <span class="attr">name</span>=<span class="string">'AvgPx'</span> <span class="attr">type</span>=<span class="string">'PRICE'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'7'</span> <span class="attr">name</span>=<span class="string">'BeginSeqNo'</span> <span class="attr">type</span>=<span class="string">'SEQNUM'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'8'</span> <span class="attr">name</span>=<span class="string">'BeginString'</span> <span class="attr">type</span>=<span class="string">'STRING'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'9'</span> <span class="attr">name</span>=<span class="string">'BodyLength'</span> <span class="attr">type</span>=<span class="string">'LENGTH'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'10'</span> <span class="attr">name</span>=<span class="string">'CheckSum'</span> <span class="attr">type</span>=<span class="string">'STRING'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'11'</span> <span class="attr">name</span>=<span class="string">'ClOrdID'</span> <span class="attr">type</span>=<span class="string">'STRING'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'12'</span> <span class="attr">name</span>=<span class="string">'Commission'</span> <span class="attr">type</span>=<span class="string">'AMT'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'13'</span> <span class="attr">name</span>=<span class="string">'CommType'</span> <span class="attr">type</span>=<span class="string">'CHAR'</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'1'</span> <span class="attr">description</span>=<span class="string">'PER_UNIT'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'2'</span> <span class="attr">description</span>=<span class="string">'PERCENTAGE'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'3'</span> <span class="attr">description</span>=<span class="string">'ABSOLUTE'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'4'</span> <span class="attr">description</span>=<span class="string">'4'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'5'</span> <span class="attr">description</span>=<span class="string">'5'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'6'</span> <span class="attr">description</span>=<span class="string">'POINTS_PER_BOND_OR_CONTRACT_SUPPLY_CONTRACTMULTIPLIER'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'14'</span> <span class="attr">name</span>=<span class="string">'CumQty'</span> <span class="attr">type</span>=<span class="string">'QTY'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'15'</span> <span class="attr">name</span>=<span class="string">'Currency'</span> <span class="attr">type</span>=<span class="string">'CURRENCY'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'16'</span> <span class="attr">name</span>=<span class="string">'EndSeqNo'</span> <span class="attr">type</span>=<span class="string">'SEQNUM'</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"> <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'946'</span> <span class="attr">name</span>=<span class="string">'CollInquiryResult'</span> <span class="attr">type</span>=<span class="string">'INT'</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'0'</span> <span class="attr">description</span>=<span class="string">'SUCCESSFUL'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'1'</span> <span class="attr">description</span>=<span class="string">'INVALID_OR_UNKNOWN_INSTRUMENT'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'2'</span> <span class="attr">description</span>=<span class="string">'INVALID_OR_UNKNOWN_COLLATERAL_TYPE'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'3'</span> <span class="attr">description</span>=<span class="string">'INVALID_PARTIES'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'4'</span> <span class="attr">description</span>=<span class="string">'INVALID_TRANSPORT_TYPE_REQUESTED'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'5'</span> <span class="attr">description</span>=<span class="string">'INVALID_DESTINATION_REQUESTED'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'6'</span> <span class="attr">description</span>=<span class="string">'NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'7'</span> <span class="attr">description</span>=<span class="string">'NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'8'</span> <span class="attr">description</span>=<span class="string">'COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'9'</span> <span class="attr">description</span>=<span class="string">'UNAUTHORIZED_FOR_COLLATERAL_INQUIRY'</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span> <span class="attr">enum</span>=<span class="string">'99'</span> <span class="attr">description</span>=<span class="string">'OTHER'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'947'</span> <span class="attr">name</span>=<span class="string">'StrikeCurrency'</span> <span class="attr">type</span>=<span class="string">'CURRENCY'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'948'</span> <span class="attr">name</span>=<span class="string">'NoNested3PartyIDs'</span> <span class="attr">type</span>=<span class="string">'NUMINGROUP'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'949'</span> <span class="attr">name</span>=<span class="string">'Nested3PartyID'</span> <span class="attr">type</span>=<span class="string">'STRING'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'950'</span> <span class="attr">name</span>=<span class="string">'Nested3PartyIDSource'</span> <span class="attr">type</span>=<span class="string">'CHAR'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'951'</span> <span class="attr">name</span>=<span class="string">'Nested3PartyRole'</span> <span class="attr">type</span>=<span class="string">'INT'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'952'</span> <span class="attr">name</span>=<span class="string">'NoNested3PartySubIDs'</span> <span class="attr">type</span>=<span class="string">'NUMINGROUP'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'953'</span> <span class="attr">name</span>=<span class="string">'Nested3PartySubID'</span> <span class="attr">type</span>=<span class="string">'STRING'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'954'</span> <span class="attr">name</span>=<span class="string">'Nested3PartySubIDType'</span> <span class="attr">type</span>=<span class="string">'INT'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'955'</span> <span class="attr">name</span>=<span class="string">'LegContractSettlMonth'</span> <span class="attr">type</span>=<span class="string">'MONTHYEAR'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">field</span> <span class="attr">number</span>=<span class="string">'956'</span> <span class="attr">name</span>=<span class="string">'LegInterestAccrualDate'</span> <span class="attr">type</span>=<span class="string">'LOCALMKTDATE'</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">fields</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fix</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="FIX引擎"><a href="#FIX引擎" class="headerlink" title="FIX引擎"></a>FIX引擎</h1><p>实现fix协议的开源闭源代码库有很多很多，选择的时候可以根据实际情况从性能，大小，易用性，二次开发等方面考虑。这里给出一个<a href="http://www.fixtradingcommunity.org/pg/structure/products-and-services/type?ProductType=FIX%20Engines" target="_blank" rel="noopener">fix引擎的列表</a>，如下：<img src="http://o8fj2jbwb.bkt.clouddn.com/listoffixengine.png" alt=""></p>
<p>我自己使用的是<a href="http://www.quickfixengine.org/" target="_blank" rel="noopener">Quickfix</a>!</p>
<h1 id="完事"><a href="#完事" class="headerlink" title="完事"></a>完事</h1><p>关于FIX协议的基本知识基本介绍完毕，由于我自己使用的时候不涉及到会话层的东西，故在研究开源库Quickfix的源代码的时候，刨去了关于通信层面的代码，着重研究了Quickfix中关于数据字典的解析，fix报文的处理等的代码。后面有时间打算回忆记录下Quickfix的源代码。</p>
<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a> (<strong>默认</strong>)</p>
</li>
<li><p>email: <a href="mailto:&#x6c;&#x69;&#110;&#x75;&#120;&#x63;&#111;&#100;&#101;&#x32;&#x6e;&#105;&#x6b;&#x69;&#64;&#103;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#109;">&#x6c;&#x69;&#110;&#x75;&#120;&#x63;&#111;&#100;&#101;&#x32;&#x6e;&#105;&#x6b;&#x69;&#64;&#103;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#109;</a></p>
</li>
</ul>
<p>2017-02-09 于杭州<br><em>By  <a href="http://weibo.com/2793607050/profile?topnav=1&wvr=6&is_all=1" target="_blank" rel="noopener">史矛革</a></em></p>
]]></content>
      <categories>
        <category>fix</category>
      </categories>
      <tags>
        <tag>fix</tag>
      </tags>
  </entry>
  <entry>
    <title>Hessian通信案例(java)</title>
    <url>/2016/11/17/Hessian%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94java/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于工作的原因，接触到了hessain,项目需要做hessain和xml之间的报文转换。但是对于hessian是个什么东西一头雾水。于是接下来的时间了解了hessain协议的序列化规则以及hessian协议进行通信的方式。这篇文章是在完成了这个模块之后很长一段时间（大概3个月）才记录的。一来这个时候没什么事，二来当时就一直打算记录下学习的过程，后来搁置了。故本文对hessain协议做一个简单介绍，然后搭建了一个Java版的hessian客户端和服务端，实现了hessian通信。</p>
<h1 id="什么是Hessian"><a href="#什么是Hessian" class="headerlink" title="什么是Hessian"></a>什么是Hessian</h1><h2 id="什么是rpc"><a href="#什么是rpc" class="headerlink" title="什么是rpc?"></a>什么是rpc?</h2><p>RPC（Remote Procedure Call Protocol）——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。RMI是J2EE中标准的RPC服务，RPC的完美封装是的将业务逻辑可以进行分布式部署，将运算密集型的工作进行分流（但请求还是同步的），在使用过程中间封装起实现可以实现在客户端调用的时候完全透明(需要在RMI客户端调用方式进行封装)。</p>
<h2 id="什么是hessian"><a href="#什么是hessian" class="headerlink" title="什么是hessian?"></a>什么是hessian?</h2><p>Hessian是一个轻量级的,自定义描述的二进制RPC协议。Hessian主要用作面向对象的消息通信。</p>
<h2 id="hessian序列化规则"><a href="#hessian序列化规则" class="headerlink" title="hessian序列化规则"></a>hessian序列化规则</h2><p>hessian序列化方式目前有两个版本1.0和2.0，具体可以查看官网<a href="http://hessian.caucho.com/doc/hessian-serialization.html" target="_blank" rel="noopener">http://hessian.caucho.com/doc/hessian-serialization.html</a>。另外我在我的七牛空间上传了<a href="http://o8fj2jbwb.bkt.clouddn.com/hessian%E5%8D%8F%E8%AE%AE%E4%B8%AD%E6%96%87%E7%89%88.docx" target="_blank" rel="noopener">hessian协议2.0中文版</a>，有需要的话可以下载，防止官网全英文看不懂。另外hessian<a href="http://hessian.caucho.com/index.xtp" target="_blank" rel="noopener">官网</a>上提供了各种版本的hessian协议的实现，包括java,c++,c#,Python,.NET,Ruby等，上面其实有比较详细的demo。可以参考，当时我也是参考过的。</p>
<h1 id="Hessian通信案列-java"><a href="#Hessian通信案列-java" class="headerlink" title="Hessian通信案列(java)"></a>Hessian通信案列(java)</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><a id="more"></a>
<p>Eclipse &amp;&amp;　Tomcat.</p>
<h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><p>下载java版的hessian类库: <a href="http://hessian.caucho.com/index.xtp#Java" target="_blank" rel="noopener">hessian-4.0.37.jar</a></p>
<h2 id="hessian-服务端"><a href="#hessian-服务端" class="headerlink" title="hessian 服务端"></a>hessian 服务端</h2><ol>
<li><p>Eclipse中新建Dynamic Web Project<br><img src="http://o8fj2jbwb.bkt.clouddn.com/s1.png" alt=""><br>此处可以看到需要选择Target runtime，需要首先安装Tomcat。</p>
</li>
<li><p>导入下载的hessian-4.0-37.jar,右键build path-&gt;Add to Build path<br>导入完成如图：<img src="http://o8fj2jbwb.bkt.clouddn.com/s2.png" alt=""></p>
</li>
<li><p>开发步骤</p>
<p>hessian服务端的开发涉及到3个部分。定义接口&amp;&amp;接口实现&amp;&amp;web.xml</p>
</li>
</ol>
<ul>
<li>定义接口</li>
</ul>
<p>新建IBasic.java,随便命名。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">package test;</span><br><span class="line"></span><br><span class="line">public<span class="built_in"> interface </span>IBasic &#123;  </span><br><span class="line">public String hello();   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处做演示，只定义了一个最简单的hello函数,实际情况可以在此文件中增加你的接口函数。<strong>接口函数就是服务端暴露出来的服务，可以为客户服务的实际内容。故此接口文件也需要在客户端的开发中用到。</strong></p>
<ul>
<li>接口实现</li>
</ul>
<p>新建BasicService.java，随便命名。</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicService</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">IBasic</span></span> </span>&#123;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> hello= <span class="string">"Hello, world,my name is nick!"</span>;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> hello() &#123;</span><br><span class="line">  <span class="keyword">return</span> hello;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此文件就是接口函数的具体实现,此处只是针对在IBasic.java中定义好的接口函数。<strong>对于小白，简单来说，就是服务端提供了一些服务，或者说暴露了一些服务，也就是接口函数，这些服务供客户端远程调用，就像客户端在本地调用一样，只不过服务端跟客户端的通信采用了一些二进制协议。</strong></p>
<ul>
<li>web.xml<br>服务端实现了上述两个文件，基本就算完成了，不过如果需要发布到tomcat运行，还需要在web.xml配置Servlet.</li>
</ul>
<p>web.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee </span></span></span><br><span class="line"><span class="tag"><span class="string">http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServerMachine<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.caucho.hessian.server.HessianServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>home-class<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>test.BasicService<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>home-api<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>test.IBasic<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line"> </span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServerMachine<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ServerMachine<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>图中需要注意的就是servlet-name，可以修改成你自己喜欢的名字,至于具体这个web.xml里面各个字段的意义，我其实也不清楚，我对java不了解，我一直从事C++开发。当时自己尝试了很多遍。如果你配置的时候发布到Tomcat启动不了，那么请反复修改下吧。</p>
<p>此处还需要注意需要有个index.jsp这个脚本，如下：</p>
<p>index.jsp:</p>
<figure class="highlight vbscript-html"><table><tr><td class="code"><pre><span class="line"><span class="vbscript">&lt;%@ page language=<span class="string">"java"</span> import=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"ISO-8859-1"</span>%&gt;</span></span><br><span class="line"><span class="vbscript">&lt;%</span></span><br><span class="line"><span class="vbscript"><span class="built_in">String</span> path = <span class="built_in">request</span>.getContextPath();</span></span><br><span class="line"><span class="vbscript"><span class="built_in">String</span> basePath = <span class="built_in">request</span>.getScheme()+<span class="string">"://"</span>+<span class="built_in">request</span>.getServerName()+<span class="string">":"</span>+<span class="built_in">request</span>.getServerPort()+path+<span class="string">"/"</span>;</span></span><br><span class="line"><span class="vbscript">%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="vbscript">&lt;%=basePath%&gt;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>My JSP 'index.jsp' starting page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"0"</span>&gt;</span>    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"keyword1,keyword2,keyword3"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"This is my page"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"styles.css"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	--&gt;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">  This is my JSP page. <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>这两个文件的放置的位置也很关键，如果不对，是会出错的。</strong>见下图：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/s6.png" alt=""></p>
<p>4  发布到Tomcat，启动hessian_server</p>
<p><strong>这一步的前提是需要在Eclipse中新建Server并配置好。</strong>过程略。毕竟现在不会java的不太多了，我当时为了这小个问题还折腾了好久。</p>
<p>成功后如下:<img src="http://o8fj2jbwb.bkt.clouddn.com/s7.png" alt=""><br>这里注意到上面的URL:  <a href="http://localhost:8080/hessian_server/" target="_blank" rel="noopener">http://localhost:8080/hessian_server</a>，这个地址就是hessian服务端的地址，实际情况将localhost换成服务端所在的IP地址，这个地址客户端需要用到。</p>
<p>hessian服务端到这里就完了。这里我只是用了最简单的方式来设置，实际比较复杂的情况下可以使用spring等，具体我还没研究过。</p>
<p>接下来就是hessian客户端的开发了！！</p>
<h2 id="hessain-客户端"><a href="#hessain-客户端" class="headerlink" title="hessain 客户端"></a>hessain 客户端</h2><ol>
<li><p>Eclipse中新建Java Project</p>
</li>
<li><p>导入下载的hessian-4.0-37.jar,右键build path-&gt;Add to Build path<br>导入完成如图：<img src="http://o8fj2jbwb.bkt.clouddn.com/c1.png" alt=""></p>
</li>
<li><p>开发步骤</p>
<p>hessian客户端的开发涉及到2个部分。定义接口&amp;&amp;客户端主程序</p>
</li>
</ol>
<ul>
<li>定义接口</li>
</ul>
<p><strong>把上面服务端定义好的接口文件IBasic.java原样复制到工程中。</strong></p>
<ul>
<li>客户端主程序</li>
</ul>
<p>新建HessianClient.java，随便命名。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.client.HessianProxyFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HessianClient</span>&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span> []args)</span>   </span></span><br><span class="line"><span class="function">        throws Exception   </span></span><br><span class="line"><span class="function">      </span>&#123;   </span><br><span class="line">        <span class="keyword">String</span> url = <span class="string">"http://localhost:8080/hessian_server/ServerMachineTest"</span>;   </span><br><span class="line">        HessianProxyFactory factory = <span class="keyword">new</span> HessianProxyFactory();   </span><br><span class="line">        IBasic basic = (IBasic) factory.create(IBasic.class, url); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">String</span> helloreturn = basic.hello();</span><br><span class="line">        System.out.<span class="built_in">println</span>(helloreturn);</span><br><span class="line">        </span><br><span class="line">		</span><br><span class="line">      &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意上面的URL地址。</strong></p>
<p>主要步骤定义服务端的地址URL,然后new一个代理工厂HessainProxyFactory，这个代理类工厂负责远程调用。 然后就可以像调用本地函数一样，调用在IBasic.java中定义好的接口函数hello()。</p>
<p>4  启动客户端</p>
<p>项目上右键Run as-&gt;Java  Application启动客户端。<br>成功后结果如下：<img src="http://o8fj2jbwb.bkt.clouddn.com/c2.png" alt=""></p>
<h2 id="至此，小结"><a href="#至此，小结" class="headerlink" title="至此，小结"></a>至此，小结</h2><p>至此，完成了Hessian 客户端和服务端的通信。现在回过头来看，可能会觉得比较简单。当时还是折腾了好一会呢！！ 简单来说，服务端定义并实现服务，发布到Tomcat，客户端新建一个代理，就像调用本地函数那样调用远程的服务端提供的函数，完成通信。</p>
<p><em>那么Hessian的底层具体是怎么实现的呢?客户端和服务端是怎么完成了序列化，并反序列的？客户端的代理类工厂是怎么实现的？这些我可能会留到另外的博客里分析。</em></p>
<h1 id="写完了"><a href="#写完了" class="headerlink" title="写完了"></a>写完了</h1><p>写这篇文章是回过头来写，大概中间隔了快4个月的时间，为了写这篇博客，里面用到的一些图片，我又从头搭建了一个服务端和客户端，还是碰到了一些小问题，说明过了段时间是会陌生的。最好的时间是做完那个关于Hessain的项目就应该记录下过程，可以节省很多时间。</p>
<p>坚持写博客还是挺困难的，后面有时间打算再写分析下Hessian的源码以及C++版的Hessain,以及做其他项目涉及到的一些东西。</p>
<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a> (<strong>默认</strong>)</p>
</li>
<li><p>email: <a href="mailto:&#108;&#105;&#110;&#117;&#x78;&#99;&#x6f;&#x64;&#101;&#x32;&#x6e;&#105;&#107;&#x69;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;">&#108;&#105;&#110;&#117;&#x78;&#99;&#x6f;&#x64;&#101;&#x32;&#x6e;&#105;&#107;&#x69;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;</a></p>
</li>
</ul>
<p>2016-11-17 于杭州<br><em>By  <a href="http://weibo.com/2793607050/profile?topnav=1&wvr=6&is_all=1" target="_blank" rel="noopener">史矛革</a></em></p>
]]></content>
      <categories>
        <category>hessian</category>
      </categories>
      <tags>
        <tag>hessian</tag>
        <tag>java</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Hessian源码分析(java)</title>
    <url>/2016/11/18/Hessian%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%94java/</url>
    <content><![CDATA[<h1 id="先扯一扯"><a href="#先扯一扯" class="headerlink" title="先扯一扯"></a>先扯一扯</h1><p>前一篇博文<a href="http://rebootcat.com/2016/11/17/Hessian%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94java/" target="_blank" rel="noopener">Hessian通信案例(java)</a>简单实现了Java版的Hessian客户端和服务端的通信，总体看来，实现起来比较简单，整个基于Hessian的远程调用过程也显得很方便。但是知其然还要知其所以然，Hessian的底层是怎么实现远程调用的？是怎么序列化的？又是怎么反序列化的？又是如何通信的？</p>
<h1 id="还记得吗"><a href="#还记得吗" class="headerlink" title="还记得吗"></a>还记得吗</h1><p>下面这段代码你还记得吗？</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> url = <span class="string">"http://localhost:8080/hessian_server/ServerMachineTest"</span>;   </span><br><span class="line">HessianProxyFactory <span class="keyword">factory</span> = <span class="keyword">new</span> HessianProxyFactory();   </span><br><span class="line">IBasic basic = (IBasic) <span class="keyword">factory</span>.create(IBasic<span class="class">.<span class="keyword">class</span>, <span class="title">url</span>); </span></span><br><span class="line"><span class="class"><span class="title">String</span> <span class="title">helloreturn</span> = <span class="title">basic</span>.<span class="title">hello</span>();</span></span><br></pre></td></tr></table></figure>

<p>上面这段代码就是前一篇博文中实现的客户端的代码，实现远程过程调用就短短的四行代码，如此简单。但是new HessianProxyFactory()是做什么的？factory.create()又是怎么实现的？</p>
<h1 id="一层层的剥去外衣"><a href="#一层层的剥去外衣" class="headerlink" title="一层层的剥去外衣"></a>一层层的剥去外衣</h1><h2 id="项目姿势微调"><a href="#项目姿势微调" class="headerlink" title="项目姿势微调"></a>项目姿势微调</h2><p>为了探究new HessianProyFactory()具体实现了什么，需要对之前博文中实现的案例进行一点调整。案例中是直接导入了hessian-4.0.7.jar作为lib库的方式，为了在Eclipse中进行单步调试，需要用源码(<a href="http://hessian.caucho.com/#Java" target="_blank" rel="noopener">hessian-4.0.7-src.jar</a>)来替代这个jar包。这里需要注意的是版本，可能会出现兼容性的问题，具体情况可以试错。</p>
<p>导入源码包替换了jar包之后的效果：<img src="http://o8fj2jbwb.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20161118102326.png" alt=""></p>
<p><img src="http://o8fj2jbwb.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20161118104308.png" alt=""></p>
<p><strong>client包主要是client端使用的功能，里面就是动态代理和http连接等操作，io包则是处理序列化。</strong><br>这里需要注意的是，可能会出现一些错误，可能需要添加commons-io-2.4.jar这个包以及Tomcat的runtime环境。具体的话自行解决。</p>
<p>调整成这样后，启动Tomcat，启动Hessian服务端就可以对客户端进行单步调试了！O(∩_∩)O哈哈~</p>
<h2 id="启动Hessian服务端"><a href="#启动Hessian服务端" class="headerlink" title="启动Hessian服务端"></a>启动Hessian服务端</h2><a id="more"></a>
<p>启动Hessian服务端后先进行下测试，运行刚刚调整过的Hessian客户端，看看有没有出错？正常情况会出现下面的结果：<img src="http://o8fj2jbwb.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20161118104016.png" alt=""></p>
<p>接下来就可以对客户端进行单步调试了。</p>
<h2 id="单步调试"><a href="#单步调试" class="headerlink" title="单步调试"></a>单步调试</h2><p>在Eclipse中进行代码调试很方便，要在哪一行设置断点，只需要在行首进行双击，就可以看到一个圆点。F11(Debug),F5(step into),F6(step over)。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">HessianProxyFactory factory = <span class="keyword">new</span> <span class="constructor">HessianProxyFactory()</span>;   </span><br><span class="line">IBasic basic = (IBasic) factory.create(<span class="module-access"><span class="module"><span class="identifier">IBasic</span>.</span></span><span class="keyword">class</span>, url); </span><br><span class="line">String helloreturn = basic.hello<span class="literal">()</span>;</span><br></pre></td></tr></table></figure>

<p>前两句没什么特殊的，new了一个动态代理工厂，这个工厂负责调用底层的序列化方法进行序列化；creat()函数根据定义好的接口函数以及设置好的服务端的地址进行一些处理。真正实现远程调用的是第三句代码，如下图，我在String helloreturn = basic.hello()这句代码设置断点。<img src="http://o8fj2jbwb.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20161118104809.png" alt="">),启动调试，可以看到进入到了一个函数invoke()。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">Object</span> invoke(<span class="keyword">Object</span> proxy, <span class="keyword">Method</span> <span class="keyword">method</span>, <span class="keyword">Object</span> []args)</span><br><span class="line">  throws Throwable</span><br><span class="line">	&#123;</span><br><span class="line">  String mangleName;</span><br><span class="line"></span><br><span class="line">  synchronized (_mangleMap) &#123;</span><br><span class="line">    mangleName = _mangleMap.<span class="keyword">get</span>(<span class="keyword">method</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mangleName == <span class="keyword">null</span>) &#123;</span><br><span class="line">    String methodName = <span class="keyword">method</span>.getName();</span><br><span class="line">    <span class="keyword">Class</span>&lt;?&gt; []params = <span class="keyword">method</span>.getParameterTypes();</span><br><span class="line"></span><br><span class="line">    // equals <span class="keyword">and</span> hashCode are special cased</span><br><span class="line">    <span class="keyword">if</span> (methodName.equals("equals")</span><br><span class="line">  &amp;&amp; params.length == <span class="number">1</span> &amp;&amp; params[<span class="number">0</span>].equals(<span class="keyword">Object</span>.<span class="keyword">class</span>)) &#123;</span><br><span class="line"><span class="keyword">Object</span> <span class="keyword">value</span> = args[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">value</span> == <span class="keyword">null</span> || ! Proxy.isProxyClass(<span class="keyword">value</span>.getClass()))</span><br><span class="line">  <span class="keyword">return</span> <span class="type">Boolean</span>.<span class="keyword">FALSE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Object</span> proxyHandler = Proxy.getInvocationHandler(<span class="keyword">value</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! (proxyHandler instanceof HessianProxy))</span><br><span class="line">  <span class="keyword">return</span> <span class="type">Boolean</span>.<span class="keyword">FALSE</span>;</span><br><span class="line"></span><br><span class="line">HessianProxy <span class="keyword">handler</span> = (HessianProxy) proxyHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">new</span> <span class="type">Boolean</span>(_url.equals(<span class="keyword">handler</span>.getURL()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (methodName.equals("hashCode") &amp;&amp; params.length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">new</span> <span class="type">Integer</span>(_url.hashCode());</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (methodName.equals("getHessianType"))</span><br><span class="line"><span class="keyword">return</span> proxy.getClass().getInterfaces()[<span class="number">0</span>].getName();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (methodName.equals("getHessianURL"))</span><br><span class="line"><span class="keyword">return</span> _url.toString();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (methodName.equals("toString") &amp;&amp; params.length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> "HessianProxy[" + _url + "]";</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (! _factory.isOverloadEnabled())</span><br><span class="line">mangleName = <span class="keyword">method</span>.getName();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      mangleName = mangleName(<span class="keyword">method</span>);</span><br><span class="line"></span><br><span class="line">    synchronized (_mangleMap) &#123;</span><br><span class="line">_mangleMap.put(<span class="keyword">method</span>, mangleName);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  InputStream <span class="keyword">is</span> = <span class="keyword">null</span>;</span><br><span class="line">  HessianConnection conn = <span class="keyword">null</span>;</span><br><span class="line">  </span><br><span class="line">  try &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">log</span>.isLoggable(<span class="keyword">Level</span>.FINER))</span><br><span class="line"><span class="keyword">log</span>.finer("Hessian[" + _url + "] calling " + mangleName);</span><br><span class="line">    </span><br><span class="line">    conn = sendRequest(mangleName, args);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">is</span> = conn.getInputStream();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">log</span>.isLoggable(<span class="keyword">Level</span>.FINEST)) &#123;</span><br><span class="line">PrintWriter dbg = <span class="built_in">new</span> PrintWriter(<span class="built_in">new</span> LogWriter(<span class="keyword">log</span>));</span><br><span class="line">HessianDebugInputStream dIs</span><br><span class="line">  = <span class="built_in">new</span> HessianDebugInputStream(<span class="keyword">is</span>, dbg);</span><br><span class="line"></span><br><span class="line">dIs.startTop2();</span><br><span class="line"></span><br><span class="line"><span class="keyword">is</span> = dIs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AbstractHessianInput <span class="keyword">in</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> code = <span class="keyword">is</span>.<span class="keyword">read</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code == <span class="string">'H'</span>) &#123;</span><br><span class="line"><span class="type">int</span> major = <span class="keyword">is</span>.<span class="keyword">read</span>();</span><br><span class="line"><span class="type">int</span> minor = <span class="keyword">is</span>.<span class="keyword">read</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span> = _factory.getHessian2Input(<span class="keyword">is</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">Object</span> <span class="keyword">value</span> = <span class="keyword">in</span>.readReply(<span class="keyword">method</span>.getReturnType());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="string">'r'</span>) &#123;</span><br><span class="line"><span class="type">int</span> major = <span class="keyword">is</span>.<span class="keyword">read</span>();</span><br><span class="line"><span class="type">int</span> minor = <span class="keyword">is</span>.<span class="keyword">read</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span> = _factory.getHessianInput(<span class="keyword">is</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span>.startReplyBody();</span><br><span class="line"></span><br><span class="line"><span class="keyword">Object</span> <span class="keyword">value</span> = <span class="keyword">in</span>.readObject(<span class="keyword">method</span>.getReturnType());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">value</span> instanceof InputStream) &#123;</span><br><span class="line">  <span class="keyword">value</span> = <span class="built_in">new</span> ResultInputStream(conn, <span class="keyword">is</span>, <span class="keyword">in</span>, (InputStream) <span class="keyword">value</span>);</span><br><span class="line">  <span class="keyword">is</span> = <span class="keyword">null</span>;</span><br><span class="line">  conn = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">in</span>.completeReply();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">throw <span class="built_in">new</span> HessianProtocolException("'" + (<span class="type">char</span>) code + "' is an unknown code");</span><br><span class="line">  &#125; catch (HessianProtocolException e) &#123;</span><br><span class="line">    throw <span class="built_in">new</span> HessianRuntimeException(e);</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    try &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">is</span> != <span class="keyword">null</span>)</span><br><span class="line">  <span class="keyword">is</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line"><span class="keyword">log</span>.log(<span class="keyword">Level</span>.FINE, e.toString(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    try &#123;</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="keyword">null</span>)</span><br><span class="line">  conn.destroy();</span><br><span class="line">    &#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line"><span class="keyword">log</span>.log(<span class="keyword">Level</span>.FINE, e.toString(), e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端任何远程调用函数都会经由invoke函数实现，其中关键的几句代码如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">log.finer(<span class="string">"Hessian["</span> + _url + <span class="string">"] calling "</span> + mangleName);</span><br><span class="line">      </span><br><span class="line">conn = send<span class="constructor">Request(<span class="params">mangleName</span>, <span class="params">args</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>mangleName可能就是定义好的接口，比如我的hello函数名，args就是接口函数的参数，最后通过sendRequest函数和服务端通信。下面着重看下这个函数的实现：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">protected HessianConnection send<span class="constructor">Request(String <span class="params">methodName</span>, Object []<span class="params">args</span>)</span></span><br><span class="line">  throws IOException</span><br><span class="line"> &#123;</span><br><span class="line">  HessianConnection conn = null;</span><br><span class="line">  </span><br><span class="line">  conn = <span class="module-access"><span class="module"><span class="identifier">_factory</span>.</span></span>get<span class="constructor">ConnectionFactory()</span>.<span class="keyword">open</span>(_url);</span><br><span class="line">  boolean isValid = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    add<span class="constructor">RequestHeaders(<span class="params">conn</span>)</span>;</span><br><span class="line"></span><br><span class="line">    OutputStream os = null;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">os = conn.get<span class="constructor">OutputStream()</span>;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">throw <span class="keyword">new</span> <span class="constructor">HessianRuntimeException(<span class="params">e</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (log.is<span class="constructor">Loggable(Level.FINEST)</span>) &#123;</span><br><span class="line">PrintWriter dbg = <span class="keyword">new</span> <span class="constructor">PrintWriter(<span class="params">new</span> LogWriter(<span class="params">log</span>)</span>);</span><br><span class="line">HessianDebugOutputStream dOs = <span class="keyword">new</span> <span class="constructor">HessianDebugOutputStream(<span class="params">os</span>, <span class="params">dbg</span>)</span>;</span><br><span class="line">dOs.start<span class="constructor">Top2()</span>;</span><br><span class="line">os = dOs;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    AbstractHessianOutput out = <span class="module-access"><span class="module"><span class="identifier">_factory</span>.</span></span>get<span class="constructor">HessianOutput(<span class="params">os</span>)</span>;</span><br><span class="line"></span><br><span class="line">    out.call(methodName, args);</span><br><span class="line">    out.flush<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">    conn.send<span class="constructor">Request()</span>;</span><br><span class="line"></span><br><span class="line">    isValid = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    return conn;</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    <span class="keyword">if</span> (! isValid<span class="operator"> &amp;&amp; </span>conn != null)</span><br><span class="line">conn.destroy<span class="literal">()</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这个函数的实现方法是，<strong>构造http的协议头，通过call()函数后再通过sendRequest()函数发送出去。</strong>调试到conn.sendRequest()函数的时候阻塞了(如果你没有启动服务端的话)，可见最后走http协议发送的任务就是由conn.sendRequest()完成的。那么out.call(methodName,args)又做了什么呢？可以告诉你，<strong>这个函数真正实现了报文内容的序列化</strong>：</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> void call(String <span class="function"><span class="keyword">method</span>, <span class="title">Object</span> []<span class="title">args</span>)</span></span><br><span class="line"><span class="function">  <span class="title">throws</span> <span class="title">IOException</span></span></span><br><span class="line"><span class="function"><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  int length = args != null ? args.length : 0;</span></span></span><br><span class="line"><span class="function"><span class="comment">  </span></span></span><br><span class="line"><span class="function"><span class="comment">  startCall(method, length);</span></span></span><br><span class="line"><span class="function"><span class="comment">  </span></span></span><br><span class="line"><span class="function"><span class="comment">  for (int i = 0; i &lt; length; i++)</span></span></span><br><span class="line"><span class="function"><span class="comment">    writeObject(args[i]);</span></span></span><br><span class="line"><span class="function"><span class="comment">  </span></span></span><br><span class="line"><span class="function"><span class="comment">  completeCall();</span></span></span><br><span class="line"><span class="function"><span class="comment"> &#125;</span></span></span><br></pre></td></tr></table></figure>

<p>代码很明了，可以猜测startCall(method,length)实现对方法名(也即接口函数名)的序列化；然后对接口函数的每一个参数调用writeObject()进行序列化，这是重头戏。最后completeCall()进行了序列化的收尾工作。</p>
<p>具体序列化的过程我就不跟进去了。call()函数完成了hessian的序列化，下面是对hello()这个函数序列化后的hessian报文：</p>
<p><img src="http://o8fj2jbwb.bkt.clouddn.com/cmhelloz.png" alt=""></p>
<p><img src="http://o8fj2jbwb.bkt.clouddn.com/cmhello16.png" alt=""></p>
<p>可以看到序列化后包含了一些不可见的字符，下面这个是用十六进制查看的。由于我是回过头来写这篇博文的，所以对于hessian的序列化机制是知道的。<strong>上面序列的方式是字符’c’后面追加hessian的版本,然后字符’m’代表method,然后是接口函数名hello，然后是函数的参数(此处由于hello函数参数为空，故没有)，最后追加序列化结束的标志,字符’z’。</strong></p>
<p>这是比较简单的函数，简单的参数，如果碰到比较复杂的函数和参数，序列化的过程会更复杂。具体请看hessian协议2.0序列化规则。</p>
<p><strong><em>——————————————–我是分割线—————————————————————-</em></strong><br><strong><em>——————————————–后来追加的—————————————————————-</em></strong><br>初写这篇博文的时候没打算跟进writeObject(args[i])函数，后来打算加进去这部分的分析过程，比较重头戏就是序列化和反序列化。由于上面的案例用到的接口函数string hello()比较简单，没有参数，故此处重新换一个函数String hello_2(int arg1,String arg2)进行调试分析。同样，调试过程进入到call()函数，由于参数有两个，故writeObject()函数将执行两次。代码如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public void write<span class="constructor">Object(Object <span class="params">object</span>)</span></span><br><span class="line">throws IOException</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (object<span class="operator"> == </span>null) &#123;</span><br><span class="line">  write<span class="constructor">Null()</span>;</span><br><span class="line">  return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Serializer serializer;</span><br><span class="line"></span><br><span class="line">serializer = <span class="module-access"><span class="module"><span class="identifier">_serializerFactory</span>.</span></span>get<span class="constructor">Serializer(<span class="params">object</span>.<span class="params">getClass</span>()</span>);</span><br><span class="line"></span><br><span class="line">serializer.write<span class="constructor">Object(<span class="params">object</span>, <span class="params">this</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中关键代码:</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">serializer = <span class="module-access"><span class="module"><span class="identifier">_serializerFactory</span>.</span></span>get<span class="constructor">Serializer(<span class="params">object</span>.<span class="params">getClass</span>()</span>);</span><br></pre></td></tr></table></figure>

<p>这句代码就是根据参数对象的类型寻找相匹配的序列化器，进行序列化。正如getSerializer的代码注释一样：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Returns </span>the<span class="markdown"> serializer for </span>a<span class="markdown"> class.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> *</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@param cl </span>the<span class="markdown"> class of </span>the<span class="markdown"> object that needs to be serialized.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> *</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@return </span>a<span class="markdown"> serializer object for </span>the<span class="markdown"> serialization.</span></span></span><br><span class="line"><span class="comment"><span class="markdown">*/</span></span></span><br></pre></td></tr></table></figure>
<p>找到序列化器之后真正根据hessian协议执行序列化的是serializer.writeObject(object,this)函数：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> void writeObject(Object obj, AbstractHessianOutput <span class="keyword">out</span>)</span><br><span class="line">throws IOException</span><br><span class="line">&#123;</span><br><span class="line">switch (_code) &#123;</span><br><span class="line">case BOOLEAN:</span><br><span class="line">  <span class="keyword">out</span>.writeBoolean(((<span class="built_in">Boolean</span>) obj).booleanValue());</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  </span><br><span class="line">case BYTE:</span><br><span class="line">case SHORT:</span><br><span class="line">case INTEGER:</span><br><span class="line">  <span class="keyword">out</span>.writeInt(((Number) obj).intValue());</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">case LONG:</span><br><span class="line">  <span class="keyword">out</span>.writeLong(((Number) obj).longValue());</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">case FLOAT:</span><br><span class="line">case DOUBLE:</span><br><span class="line">  <span class="keyword">out</span>.writeDouble(((Number) obj).doubleValue());</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  </span><br><span class="line">case CHARACTER:</span><br><span class="line">case CHARACTER_OBJECT:</span><br><span class="line">  <span class="keyword">out</span>.writeString(String.valueOf(obj));</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  </span><br><span class="line">case STRING:</span><br><span class="line">  <span class="keyword">out</span>.writeString((String) obj);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  </span><br><span class="line">case DATE:</span><br><span class="line">  <span class="keyword">out</span>.writeUTCDate(((Date) obj).getTime());</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  </span><br><span class="line">case BOOLEAN_ARRAY:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">out</span>.addRef(obj))</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  boolean []<span class="keyword">data</span> = (boolean []) obj;</span><br><span class="line">  boolean hasEnd = <span class="keyword">out</span>.writeListBegin(<span class="keyword">data</span>.length, <span class="string">"[boolean"</span>);</span><br><span class="line">  <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="keyword">data</span>.length; i++)</span><br><span class="line">    <span class="keyword">out</span>.writeBoolean(<span class="keyword">data</span>[i]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasEnd)</span><br><span class="line"><span class="keyword">out</span>.writeListEnd();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case BYTE_ARRAY:</span><br><span class="line">&#123;</span><br><span class="line">  byte []<span class="keyword">data</span> = (byte []) obj;</span><br><span class="line">  <span class="keyword">out</span>.writeBytes(<span class="keyword">data</span>, <span class="number">0</span>, <span class="keyword">data</span>.length);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case SHORT_ARRAY:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">out</span>.addRef(obj))</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  short []<span class="keyword">data</span> = (short []) obj;</span><br><span class="line">  boolean hasEnd = <span class="keyword">out</span>.writeListBegin(<span class="keyword">data</span>.length, <span class="string">"[short"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="keyword">data</span>.length; i++)</span><br><span class="line">    <span class="keyword">out</span>.writeInt(<span class="keyword">data</span>[i]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasEnd)</span><br><span class="line"><span class="keyword">out</span>.writeListEnd();</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case INTEGER_ARRAY:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">out</span>.addRef(obj))</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  int []<span class="keyword">data</span> = (int []) obj;</span><br><span class="line">  </span><br><span class="line">  boolean hasEnd = <span class="keyword">out</span>.writeListBegin(<span class="keyword">data</span>.length, <span class="string">"[int"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="keyword">data</span>.length; i++)</span><br><span class="line">    <span class="keyword">out</span>.writeInt(<span class="keyword">data</span>[i]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasEnd)</span><br><span class="line"><span class="keyword">out</span>.writeListEnd();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case LONG_ARRAY:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">out</span>.addRef(obj))</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  long []<span class="keyword">data</span> = (long []) obj;</span><br><span class="line">  </span><br><span class="line">  boolean hasEnd = <span class="keyword">out</span>.writeListBegin(<span class="keyword">data</span>.length, <span class="string">"[long"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="keyword">data</span>.length; i++)</span><br><span class="line">    <span class="keyword">out</span>.writeLong(<span class="keyword">data</span>[i]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasEnd)</span><br><span class="line"><span class="keyword">out</span>.writeListEnd();</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case FLOAT_ARRAY:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">out</span>.addRef(obj))</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  float []<span class="keyword">data</span> = (float []) obj;</span><br><span class="line">  </span><br><span class="line">  boolean hasEnd = <span class="keyword">out</span>.writeListBegin(<span class="keyword">data</span>.length, <span class="string">"[float"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="keyword">data</span>.length; i++)</span><br><span class="line">    <span class="keyword">out</span>.writeDouble(<span class="keyword">data</span>[i]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasEnd)</span><br><span class="line"><span class="keyword">out</span>.writeListEnd();</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case DOUBLE_ARRAY:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">out</span>.addRef(obj))</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  double []<span class="keyword">data</span> = (double []) obj;</span><br><span class="line">  boolean hasEnd = <span class="keyword">out</span>.writeListBegin(<span class="keyword">data</span>.length, <span class="string">"[double"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="keyword">data</span>.length; i++)</span><br><span class="line">    <span class="keyword">out</span>.writeDouble(<span class="keyword">data</span>[i]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasEnd)</span><br><span class="line"><span class="keyword">out</span>.writeListEnd();</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case STRING_ARRAY:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">out</span>.addRef(obj))</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  String []<span class="keyword">data</span> = (String []) obj;</span><br><span class="line">  </span><br><span class="line">  boolean hasEnd = <span class="keyword">out</span>.writeListBegin(<span class="keyword">data</span>.length, <span class="string">"[string"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="keyword">data</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">out</span>.writeString(<span class="keyword">data</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasEnd)</span><br><span class="line"><span class="keyword">out</span>.writeListEnd();</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case CHARACTER_ARRAY:</span><br><span class="line">&#123;</span><br><span class="line">  char []<span class="keyword">data</span> = (char []) obj;</span><br><span class="line">  <span class="keyword">out</span>.writeString(<span class="keyword">data</span>, <span class="number">0</span>, <span class="keyword">data</span>.length);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case OBJECT_ARRAY:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">out</span>.addRef(obj))</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  Object []<span class="keyword">data</span> = (Object []) obj;</span><br><span class="line">  </span><br><span class="line">  boolean hasEnd = <span class="keyword">out</span>.writeListBegin(<span class="keyword">data</span>.length, <span class="string">"[object"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="keyword">data</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">out</span>.writeObject(<span class="keyword">data</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasEnd)</span><br><span class="line"><span class="keyword">out</span>.writeListEnd();</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case NULL:</span><br><span class="line">  <span class="keyword">out</span>.writeNull();</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">case OBJECT:</span><br><span class="line">  ObjectHandleSerializer.SER.writeObject(obj, <span class="keyword">out</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">case BYTE_HANDLE:</span><br><span class="line">  <span class="keyword">out</span>.writeObject(new ByteHandle((<span class="built_in">Byte</span>) obj));</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">case SHORT_HANDLE:</span><br><span class="line">  <span class="keyword">out</span>.writeObject(new ShortHandle((<span class="built_in">Short</span>) obj));</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">case FLOAT_HANDLE:</span><br><span class="line">  <span class="keyword">out</span>.writeObject(new FloatHandle((<span class="built_in">Float</span>) obj));</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  <span class="keyword">throw</span> new RuntimeException(_code + <span class="string">" unknown code for "</span> + obj.getClass());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到根据不同的参数类型,调用相关的基础序列化函数执行。</p>
<p>到此，就很好理解了。hessian的序列化支持基本的类型,int,double,long,date,string等。序列化的方式是把接口函数名和参数根据一定的规则进行序列化，然后走http信道发送到服务端。</p>
<p><strong><em>——————————————我是分割线END———————————————————–</em></strong></p>
<p>回到sendRequest函数发送完hessian报文后，回到invoke函数，接下来就是对服务端返回的内容进行反序列化：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (code == <span class="string">'H'</span>) &#123;</span><br><span class="line"><span class="type">int</span> major = <span class="keyword">is</span>.<span class="keyword">read</span>();</span><br><span class="line"><span class="type">int</span> minor = <span class="keyword">is</span>.<span class="keyword">read</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span> = _factory.getHessian2Input(<span class="keyword">is</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">Object</span> <span class="keyword">value</span> = <span class="keyword">in</span>.readReply(<span class="keyword">method</span>.getReturnType());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="string">'r'</span>) &#123;</span><br><span class="line"><span class="type">int</span> major = <span class="keyword">is</span>.<span class="keyword">read</span>();</span><br><span class="line"><span class="type">int</span> minor = <span class="keyword">is</span>.<span class="keyword">read</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span> = _factory.getHessianInput(<span class="keyword">is</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span>.startReplyBody();</span><br><span class="line"></span><br><span class="line"><span class="keyword">Object</span> <span class="keyword">value</span> = <span class="keyword">in</span>.readObject(<span class="keyword">method</span>.getReturnType());</span><br></pre></td></tr></table></figure>
<p>两个if判断只是为了确定服务端的序列化版本，’H’代表服务端是用2.0，’r’代表服务端是采用1.0的序列化方法。真正进行反序列的函数分别是readReply()和readObject()函数。</p>
<p>具体实现细节此处就不赘述了。反序列化对应序列化，是一个相反的过程。最终反序列化得到服务端返回的hessian报文。</p>
<h2 id="调试完了"><a href="#调试完了" class="headerlink" title="调试完了"></a>调试完了</h2><p><strong>至此，客户端的底层实现细节就披露完了,简单讲，调用接口函数后进入invoke函数，invoke函数构造http头，调用call函数进行序列化，调用sendRequest函数进行发送，然后调用readReply或者readObject函数进行反序列化,得到服务端返回的应答。</strong></p>
<h1 id="服务端呢？"><a href="#服务端呢？" class="headerlink" title="服务端呢？"></a>服务端呢？</h1><p>服务端的序列化和反序列化方式和客户端大同小异，差别只是一些头部和尾部的构造等。此处就略去不分析了。</p>
<p>关于服务端的调试也是一样的方式，设置断点，然后Debug。</p>
<h1 id="复杂的类型呢？"><a href="#复杂的类型呢？" class="headerlink" title="复杂的类型呢？"></a>复杂的类型呢？</h1><p>上面讲的都是比较简单的函数，序列化过程比较简单，如果碰到比较复杂的函数呢？例如下面的函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">CTrade <span class="title">hello</span><span class="params">(<span class="built_in">string</span> arg1,<span class="keyword">int</span>  arg2,<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;  arg3,<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt; arg4...)</span></span>;</span><br></pre></td></tr></table></figure>

<p>这里就自己去探索了，研究的方式也是一样，单步调试加日志记录。当时我的项目里做的是hessian与xml之间的转换，hessain报文比较复杂，层次结构比较多,涉及到的类型也很多，后来对这些做了一些研究，参照Java版的hessian采用c++实现了GXP(公司里的一个c++平台)上的一些组包解包。当然这也涉及到c++版的hessian的使用等。情况比较复杂，如果有时间，后面的博文会简要记录下关于这部分的内容。</p>
<h1 id="完事了"><a href="#完事了" class="headerlink" title="完事了"></a>完事了</h1><p>可能由于我现在是回过头来记录这些内容，关于hessian的序列化和反序列，我的感觉是比较简单。但当时由于刚刚接触到hessian，而且能找到的资料里基本都是java版的，对于一个从事c++开发的人来说，当然也不是什么难事，所以花时间研究了java版的hessian的案例实现，源码实现等。当然，其实还是有点复杂的。我现在属于站着说话不腰疼，好了伤疤忘了疼。哈哈！</p>
<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a> (<strong>默认</strong>)</p>
</li>
<li><p>email: <a href="mailto:&#108;&#105;&#110;&#x75;&#x78;&#99;&#111;&#x64;&#x65;&#x32;&#110;&#105;&#x6b;&#105;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;">&#108;&#105;&#110;&#x75;&#x78;&#99;&#111;&#x64;&#x65;&#x32;&#110;&#105;&#x6b;&#105;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;</a></p>
</li>
</ul>
<p>2016-11-18 于杭州<br><em>By  <a href="http://weibo.com/2793607050/profile?topnav=1&wvr=6&is_all=1" target="_blank" rel="noopener">史矛革</a></em></p>
]]></content>
      <categories>
        <category>hessian</category>
      </categories>
      <tags>
        <tag>hessian</tag>
        <tag>java</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU.IOWAIT 偏高问题《二》</title>
    <url>/2018/01/04/analyze-of-high-iowait/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>今天是 2018 年 01 月 04 号，已经是 2018 年的第四天了，最近这几天一直在做年终总结，回顾自己整年的工作，成长，问题，计划新的一年。2017年对于我来说，”tough year”!发生了太多的事，太多太多的事，开心的，烦恼的，2017年初计划的事情没有一件让我自己满意，想想嘘嘘不已！</p>
<p>这几天好好的写一篇总结！2018年对我来说，很重要！</p>
<h1 id="回顾一下"><a href="#回顾一下" class="headerlink" title="回顾一下"></a>回顾一下</h1><p>上一篇文章 <a href="http://rebootcat.com/2017/12/14/instability-of-cpu/" target="_blank" rel="noopener">CPU.IOWAIT 偏高问题</a>中其实已经大致分析出了问题所在。</p>
<p>文中『Find The Murderer』章节也指出了可能造成 IOWAIT% 偏高的进程，但不够有说服力。故此文尝试进一步的分析造成 IOWAIT% 偏高的原因！</p>
<p><img src="/images/problem.png" alt=""></p>
<a id="more"></a>

<h1 id="查找最耗-IOWAIT-的进程"><a href="#查找最耗-IOWAIT-的进程" class="headerlink" title="查找最耗 IOWAIT 的进程"></a>查找最耗 IOWAIT 的进程</h1><p>造成 IOWAIT% 偏高的进程一定也是 I/O 操作比较频繁的进程，<a href="http://rebootcat.com/2017/12/14/instability-cpu-of-1umachine/" target="_blank" rel="noopener">CPU.IOWAIT 偏高问题</a>中使用了两种方法，第一种是使用 ps 命令查找状态码为 ‘D’ 的进程，这种方式找到的结果不够准确；第二种是使用 iotop 工具，这种方式可能存在的问题是机器内核版本定制过，部分模块可能没有，而 iotop 这个工具要求内核版本相对较高，虽然我做了一点修改，骗过了 iotop，让 iotop 能正常运行，但总之得到的结果可能不够准确。</p>
<p>基于以上的分析，有必要用另外的方法。那么如何统计每个进程的 I/O 数呢，进而找到 I/O 数最高的进程？下面是查找过程。</p>
<p>首先，关闭syslog:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">dmesg -<span class="built_in">c</span></span><br><span class="line">/etc/<span class="keyword">init</span>.d/klogd stop</span><br></pre></td></tr></table></figure>

<p>接着下载一个 perl 脚本:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/true/</span>aspersa-mirror<span class="regexp">/blob/m</span>aster<span class="regexp">/iodump</span></span><br></pre></td></tr></table></figure>

<p>然后，打开 block_dump，这是内核关于 I/O 信息的一些日志：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">echo <span class="number">1</span> &gt; <span class="regexp">/proc/</span>sys<span class="regexp">/vm/</span>block_dump</span><br></pre></td></tr></table></figure>
<p>block_dump中设置非零值能够打开内核关于每一个 I/O 操作进行记录的开关，这时候可以看到内核已经收集到了 I/O 的日志：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost]# dmesg</span><br><span class="line">someprocess(<span class="number">1880</span>): READ block <span class="number">3830529728</span> on bcache1 (<span class="number">160</span> sectors)</span><br><span class="line">someprocess(<span class="number">1877</span>): READ block <span class="number">2492278208</span> on bcache2 (<span class="number">160</span> sectors)</span><br><span class="line">someprocess(<span class="number">1878</span>): READ block <span class="number">1407266528</span> on bcache3 (<span class="number">160</span> sectors)</span><br><span class="line">someprocess(<span class="number">1877</span>): WRITE block <span class="number">2671126368</span> on bcache2 (<span class="number">160</span> sectors)</span><br><span class="line">someprocess(<span class="number">1877</span>): WRITE block <span class="number">2671126528</span> on bcache2 (<span class="number">160</span> sectors)</span><br></pre></td></tr></table></figure>

<p>接下来就是对这些日志进行分析，这时就用到了 iodump 脚本：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">while</span> <span class="literal">true</span>; <span class="attribute">do</span> sleep <span class="number">1</span>; <span class="attribute">dmesg</span> -c; <span class="attribute">done</span> | perl iodump</span><br></pre></td></tr></table></figure>
<p>这时候可能会出错：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">-<span class="string">bash:</span> <span class="string">perl:</span> command not found</span><br></pre></td></tr></table></figure>
<p>oho,这台机器没有 perl 环境，好吧，接着装一个好了:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget http://www.cpan.org/src/<span class="number">5.0</span>/<span class="keyword">perl</span>-<span class="number">5.26</span>.<span class="number">1</span>.tar.gz</span><br><span class="line">tar zxvf <span class="keyword">perl</span>-<span class="number">5.26</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="keyword">cd</span> <span class="keyword">perl</span>-<span class="number">5.26</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">./Configure -des -Dprefix=./localperl</span><br><span class="line"><span class="keyword">make</span> test</span><br><span class="line"><span class="keyword">make</span> install</span><br></pre></td></tr></table></figure>
<p>然后添加环境变量：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/root/mydir/localperl/bin</span></span><br></pre></td></tr></table></figure>
<p>重新执行命令:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">while</span> <span class="literal">true</span>; <span class="attribute">do</span> sleep <span class="number">1</span>; <span class="attribute">dmesg</span> -c; <span class="attribute">done</span> | perl iodump</span><br></pre></td></tr></table></figure>
<p>又抛错了？纳尼？</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">Can't <span class="keyword">locate</span> strict.pm in <span class="comment">@INC (you may need to install the strict module) (@</span>INC contains: /root/mydir/localperl/<span class="keyword">lib</span>/site_perl/<span class="number">5.20</span><span class="number">.1</span>/x86_64-linux /root/mydir/localperl/<span class="keyword">lib</span>/site_perl/<span class="number">5.20</span><span class="number">.1</span> /root/mydir/localperl/<span class="keyword">lib</span>/<span class="number">5.20</span><span class="number">.1</span>/x86_64-linux /root/mydir/localperl/<span class="keyword">lib</span>/<span class="number">5.20</span><span class="number">.1</span> .) at iodump <span class="keyword">line</span> <span class="number">34.</span></span><br></pre></td></tr></table></figure>
<p>好吧，设置下库路径:</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">export PERL5LIB=$<span class="symbol">PERL5LIB:</span>/root/mydir/localperl/<span class="class"><span class="keyword">lib</span></span></span><br></pre></td></tr></table></figure>
<p>重新运行命令，正常的话可以看到下面的输出：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost]# <span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> sleep <span class="number">1</span>; dmesg -c; done | ./localperl/bin/perl iodump</span><br><span class="line">TASK                   PID      TOTAL       READ      WRITE      DIRTY DEVICES</span><br><span class="line">someproce             <span class="number">1877</span>       <span class="number">7236</span>       <span class="number">5923</span>       <span class="number">1313</span>          <span class="number">0</span> sda3</span><br><span class="line">someproce             <span class="number">1879</span>       <span class="number">7206</span>       <span class="number">5877</span>       <span class="number">1329</span>          <span class="number">0</span> sda3</span><br><span class="line">jbd2/sda3<span class="number">-8</span>           <span class="number">1241</span>        <span class="number">235</span>          <span class="number">0</span>        <span class="number">235</span>          <span class="number">0</span> sda3</span><br><span class="line">kworker/u16:<span class="number">2</span>       <span class="number">949469</span>         <span class="number">84</span>          <span class="number">0</span>         <span class="number">84</span>          <span class="number">0</span> sda3, sda1</span><br><span class="line">jbd2/sda1<span class="number">-8</span>            <span class="number">509</span>         <span class="number">82</span>          <span class="number">0</span>         <span class="number">82</span>          <span class="number">0</span> sda1</span><br><span class="line">edge-speeds-ale    <span class="number">1265169</span>          <span class="number">3</span>          <span class="number">0</span>          <span class="number">3</span>          <span class="number">0</span> sda3</span><br><span class="line">falcon-agent          <span class="number">4144</span>          <span class="number">2</span>          <span class="number">0</span>          <span class="number">2</span>          <span class="number">0</span> sda3</span><br><span class="line">falcon-agent          <span class="number">1831</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">wc                 <span class="number">1266086</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">curl               <span class="number">1266655</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">curl               <span class="number">1265033</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">wc                 <span class="number">1266089</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">falcon-agent        <span class="number">116709</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">bash               <span class="number">1264583</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda1</span><br><span class="line">falcon-agent          <span class="number">4142</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">wc                 <span class="number">1266083</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">falcon-agent          <span class="number">4150</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br><span class="line">falcon-agent        <span class="number">116710</span>          <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>          <span class="number">0</span> sda3</span><br></pre></td></tr></table></figure>

<p>统计结果很明白了，I/O 频繁的进程自然是导致 IOWAIT% 偏高的原因，那么根本原因还是硬件性能不足，磁盘 SSD 性能退化问题。</p>
<h1 id="告一段落"><a href="#告一段落" class="headerlink" title="告一段落"></a>告一段落</h1><p><a href="http://rebootcat.com/2017/12/14/instability-cpu-of-1umachine/" target="_blank" rel="noopener">CPU.IOWAIT 偏高问题</a>以及本篇文章，做了很多关于 I/O、CPU、磁盘的比较细的研究，这些手段和方法值得以后排查其他问题借鉴！</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://www.xaprb.com/blog/2009/08/23/how-to-find-per-process-io-statistics-on-linux/" target="_blank" rel="noopener">How to find per-process I/O statistics on Linux</a></li>
<li><a href="http://www.opensoce.com/2302.html" target="_blank" rel="noopener">linux iowait过高的分析</a></li>
<li><a href="https://lenciel.com/2014/02/hunting-the-iowait-problem-maker/" target="_blank" rel="noopener">解决iowait过高的告警</a></li>
<li><a href="https://stackoverflow.com/questions/249570/how-can-i-record-what-process-or-kernel-activity-is-using-the-disk-in-gnu-linux" target="_blank" rel="noopener">How can I record what process or kernel activity is using the disk in GNU/Linux?
</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>cpu</tag>
        <tag>iowait</tag>
        <tag>iotop</tag>
        <tag>iostat</tag>
        <tag>perl</tag>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>daocloud测试</title>
    <url>/2016/12/06/daocloud-hexo/</url>
    <content><![CDATA[<h1 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h1><p>使用daocloud结合docker进行自动化持续集成，测试！<br>Success!</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>docker</tag>
        <tag>daocloud</tag>
      </tags>
  </entry>
  <entry>
    <title>matplotlib数据可视化小试</title>
    <url>/2017/06/10/demos-about-data-visualization-using-matplotlib/</url>
    <content><![CDATA[<h1 id="为什么有这么一出"><a href="#为什么有这么一出" class="headerlink" title="为什么有这么一出"></a>为什么有这么一出</h1><p>最早接触到数据可视化应该是大学的时候了吧，那个时候使用的工具是matlab,可以用matlat对数据进行分析，进行可视化。但是那个时候总觉得matlab很难用，或者说matlab的代码不太友好，不过我现在也基本忘记了具体怎么使用matlab了。</p>
<p>工作的原因，需要利用监控数据进行软件性能的定标，这个过程就需要用到数据可视化。把海量的数据进行分析，然后可视化，或者可视化然后分析，也算数据挖掘的范畴吧。具体内容是，拉取小米监控(<a href="https://book.open-falcon.org/zh/index.html" target="_blank" rel="noopener">open-falcon</a>)的历史数据，然后分析CPU,QPS,BandWidth之间的关系。</p>
<h1 id="选择了matplotlib"><a href="#选择了matplotlib" class="headerlink" title="选择了matplotlib"></a>选择了matplotlib</h1><p>数据可视化工具有很多，各种语言的也不一样。我的老本行是使用c/c++，这方面的类库好像很少，正好，刚入门了python，python的第三方库很丰富，数据可视化方面的类库也很丰富，说出来的有Pandas、Seaborn、ggplot、Bokeh、pygal、Plotly、matplotlib,详细可以查看<a href="http://python.jobbole.com/85601/" target="_blank" rel="noopener">这篇文章</a>。最终选择了<a href="http://matplotlib.org/" target="_blank" rel="noopener">matplotlib</a>作为我的数据可视化工具，原因很简单，我分析了自己的需求，需要实现坐标图，可能涉及动画，可能涉及3D，可能涉及散点图等，同时网上关于matplotlib的例子很丰富，官网上的例子也很详尽，上手应该很容易，所以最终选择了matplotlib。</p>
<p>关于matplotlib的介绍，官网如是说：</p>
<a id="more"></a>

<blockquote>
<p>Matplotlib is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. Matplotlib can be used in Python scripts, the Python and IPython shell, the jupyter notebook, web application servers, and four graphical user interface toolkits.</p>
</blockquote>
<blockquote>
<p>screenshots screenshots screenshots screenshots<br>Matplotlib tries to make easy things easy and hard things possible. You can generate plots, histograms, power spectra, bar charts, errorcharts, scatterplots, etc., with just a few lines of code. For a sampling, see the screenshots, thumbnail gallery, and examples directory</p>
</blockquote>
<blockquote>
<p>For simple plotting the pyplot module provides a MATLAB-like interface, particularly when combined with IPython. For the power user, you have full control of line styles, font properties, axes properties, etc, via an object oriented interface or via a set of functions familiar to MATLAB users.</p>
</blockquote>
<h1 id="matplotlib使用"><a href="#matplotlib使用" class="headerlink" title="matplotlib使用"></a>matplotlib使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> python-matplotlib</span><br></pre></td></tr></table></figure>

<h2 id="画一条正弦曲线"><a href="#画一条正弦曲线" class="headerlink" title="画一条正弦曲线"></a>画一条正弦曲线</h2><p>matplotlib的能耐很大，强烈建议你去官网阅读下它的<a href="http://matplotlib.org/gallery.html" target="_blank" rel="noopener">图库</a>。可以看到matplotlib能做的事情很多。</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env  python</span><br><span class="line"># -*- coding:utf<span class="number">-8</span> -*-</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="symbol">x</span> = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.<span class="literal">pi</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="symbol">y</span> = np.<span class="built_in">sin</span>(<span class="symbol">x</span>)</span><br><span class="line">#plt.plot(<span class="symbol">x</span>,np.<span class="built_in">sin</span>(<span class="symbol">x</span>),<span class="symbol">x</span>,np.<span class="built_in">sin</span>(<span class="number">2</span>*<span class="symbol">x</span>))</span><br><span class="line">#plt.plot(<span class="symbol">x</span>,<span class="symbol">y</span>,marker=<span class="string">'o'</span>,mec=<span class="string">'b'</span>,mfc=<span class="string">'w'</span>)</span><br><span class="line">plt.plot(<span class="symbol">x</span>,<span class="symbol">y</span>,mec=<span class="string">'b'</span>,mfc=<span class="string">'w'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>分别注释plt.plot()语句可以得到不同的图谱，上面的结果如下：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/sinx.png" alt=""><br>简单分析代码，首先利用numpy库产生坐标轴x,y的值对，然后把(x,y)值对传入plot函数，最后调用plt.show()显示出来。</p>
<p><strong><em>正是由于这个demo的试验，同时拉取了小米监控的数据，分析后想要得到cpu/bandwidth之间的关系，无非就是一个个(bandwidth,cpu)的值对，最终利用matplotlib以散点图的形式展示出来。这也是最终选择了mtplotlib的一个原因，先试验，或者说调研，看看能不能满足自己的需求。</em></strong></p>
<h2 id="保存画出的曲线图"><a href="#保存画出的曲线图" class="headerlink" title="保存画出的曲线图"></a>保存画出的曲线图</h2><p>保存画出的曲线图有两种方法，第一种方式是ply.show()显示后在图谱的左下角可以手动点击保存到本地；第二种方式就是如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">from matplotlib<span class="selector-class">.pyplot</span>  import savefig</span><br><span class="line"><span class="selector-id">#plt</span>.show()</span><br><span class="line"><span class="function"><span class="title">savefig</span><span class="params">(<span class="string">'./sinx.png'</span>)</span></span></span><br></pre></td></tr></table></figure>

<h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p>先上代码，下面分别是两种不同的实现：</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">#from matplotlib.pyplot  <span class="keyword">import</span> savefig</span><br><span class="line">plt.switch_backend(<span class="string">'agg'</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">100</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">color</span> <span class="built_in">in</span> [<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'green'</span>]:</span><br><span class="line">    x,y=np.random.rand(<span class="number">2</span>,n)</span><br><span class="line">    scale=<span class="number">100</span>*np.random.rand(n)</span><br><span class="line">    plt.scatter(x,y,c=<span class="built_in">color</span>,s=scale,label=<span class="built_in">color</span>,alpha=<span class="number">0.6</span>,edgecolors=<span class="string">'white'</span>)</span><br><span class="line"></span><br><span class="line">plt.<span class="built_in">title</span>(<span class="string">'Scatter'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.grid(True)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>散点图如下：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/2dSandiantu.png" alt=""><br>解释：x,y=np.random.rand(2,n)产生随机的散点对，scale参数表示点的大小，然后利用for循环对红色，蓝色，绿色循环，设置参数label的值。最终的核心函数是<strong>scatter</strong>，这是画散点图的函数。具体的参数用法可以去matplotlib的官网查看。</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">import random</span><br><span class="line">#from matplotlib.pyplot  import savefig</span><br><span class="line">#plt.switch<span class="emphasis">_backend('agg')</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">n = 100 </span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">#for color in ['red','blue','green']:</span></span><br><span class="line"><span class="emphasis">color =  'blue'</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">x = np.random.rand(500)</span></span><br><span class="line"><span class="emphasis">y = np.random.rand(500)</span></span><br><span class="line"><span class="emphasis">size = np.random.rand(500) * 50</span></span><br><span class="line"><span class="emphasis">color = np.random.rand(500)</span></span><br><span class="line"><span class="emphasis">plt.scatter(x,y,size,color)</span></span><br><span class="line"><span class="emphasis">plt.colorbar()</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">'''</span></span><br><span class="line"><span class="emphasis">plt.title('Scatter')</span></span><br><span class="line"><span class="emphasis">plt.xlabel('x')</span></span><br><span class="line"><span class="emphasis">plt.ylabel('y')</span></span><br><span class="line"><span class="emphasis">plt.legend()</span></span><br><span class="line"><span class="emphasis">plt.grid(True)</span></span><br><span class="line"><span class="emphasis">'''</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">plt.show()</span></span><br></pre></td></tr></table></figure>
<p>散点图如下：<img src="http://o8fj2jbwb.bkt.clouddn.com/2dsandian.png" alt=""><br>代码类似。</p>
<h2 id="3D曲面图"><a href="#3D曲面图" class="headerlink" title="3D曲面图"></a>3D曲面图</h2><p>先上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env  python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Thu Sep 24 16:17:13 2015</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="comment">#from matplotlib.pyplot  import savefig</span></span><br><span class="line"><span class="comment">#plt.switch_backend('agg')</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line">X = np.arange(<span class="number">-4</span>, <span class="number">4</span>, <span class="number">0.25</span>)</span><br><span class="line">Y = np.arange(<span class="number">-4</span>, <span class="number">4</span>, <span class="number">0.25</span>)</span><br><span class="line">X, Y = np.meshgrid(X, Y)</span><br><span class="line">R = np.sqrt(X**<span class="number">2</span> + Y**<span class="number">2</span>)</span><br><span class="line">Z = np.sin(R)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体函数方法可用 help(function) 查看，如：help(ax.plot_surface)</span></span><br><span class="line">ax.plot_surface(X, Y, Z, rstride=<span class="number">1</span>, cstride=<span class="number">1</span>, cmap=<span class="string">'rainbow'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#savefig('/home/niki/sharedmac/3dqumiantu.png')</span></span><br></pre></td></tr></table></figure>
<p>3D曲面图如下：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/3dqumian.png" alt=""><br>代码就不多解释了，具体用到可以去官网查看API。这个3D曲面是可以用鼠标拖动翻转的，如下：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/3dqumian2.png" alt=""></p>
<h2 id="动画制作"><a href="#动画制作" class="headerlink" title="动画制作"></a>动画制作</h2><p>利用matplotlib制作动画也是可行的，废话不多说，先上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt   </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation   </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">  </span><br><span class="line"><span class="comment">#first set up the figure, the axis, and the plot element we want to animate   </span></span><br><span class="line">fig = plt.figure() </span><br><span class="line">ax1 = fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,xlim=(<span class="number">0</span>, <span class="number">2</span>), ylim=(<span class="number">-4</span>, <span class="number">4</span>)) </span><br><span class="line">line, = ax1.plot([], [], lw=<span class="number">2</span>)  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span>  </span><br><span class="line">    line.set_data([], [])  </span><br><span class="line">    <span class="keyword">return</span> line</span><br><span class="line"></span><br><span class="line"><span class="comment"># animation function.  this is called sequentially   </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">animate</span><span class="params">(i)</span>:</span></span><br><span class="line"></span><br><span class="line">    x = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi , <span class="number">1000</span>)   </span><br><span class="line">    y = np.sin(<span class="number">2</span> * np.pi * (x - <span class="number">0.01</span> * i))  </span><br><span class="line">    line.set_data(x, y)   </span><br><span class="line">    <span class="keyword">return</span> line</span><br><span class="line"></span><br><span class="line">anim1=animation.FuncAnimation(fig, animate, init_func=init,  frames=<span class="number">100</span>, interval=<span class="number">5</span>)  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>代码解读：核心函数FuncAnimation，大致思想是隔一定时间去更新坐标系里的数据，然后可以设置更新的时间，次数等，具体可以去查看API。动画如下：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/sinxdonghua.gif" alt=""></p>
<h2 id="多项式拟合"><a href="#多项式拟合" class="headerlink" title="多项式拟合"></a>多项式拟合</h2><p>在我的场景下，构建好散点图后还不行，还需要对散点图进行多项式拟合，得到近似的一些曲线表达式。</p>
<h3 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h3><p>关于线性拟合的知识不展开来讲，这里可以参考这篇博文<a href="http://blog.topspeedsnail.com/archives/915" target="_blank" rel="noopener">线性回归：最小二乘曲线拟合算法</a>,代码如下：</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">import numpy <span class="meta">as</span> np</span><br><span class="line"> </span><br><span class="line">def matrix_lstsqr(<span class="meta">x</span>, y):</span><br><span class="line">    <span class="meta">X</span> = np.vstack([<span class="meta">x</span>, np.ones(l<span class="meta">en(</span><span class="meta">x</span>))]).T</span><br><span class="line">    <span class="meta">return</span> (np.linalg.inv(<span class="meta">X</span>.T.dot(<span class="meta">X</span>)).dot(<span class="meta">X</span>.T)).dot(y)</span><br></pre></td></tr></table></figure>
<p>另外一种实现方式：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from __future__ import division # python 2</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">def</span> <span class="string">classic_lstsqr(x_list, y_list):</span></span><br><span class="line">    <span class="attr">N</span> = <span class="string">len(x_list)</span></span><br><span class="line">    <span class="attr">x_avg</span> = <span class="string">sum(x_list)/N</span></span><br><span class="line">    <span class="attr">y_avg</span> = <span class="string">sum(y_list)/N</span></span><br><span class="line">    <span class="meta">var_x,</span> <span class="string">cov_xy = 0, 0</span></span><br><span class="line">    <span class="attr">for</span> <span class="string">x,y in zip(x_list, y_list):</span></span><br><span class="line">        <span class="attr">temp</span> = <span class="string">x - x_avg</span></span><br><span class="line">        <span class="attr">var_x</span> <span class="string">+= temp**2</span></span><br><span class="line">        <span class="attr">cov_xy</span> <span class="string">+= temp * (y - y_avg)</span></span><br><span class="line">    <span class="attr">slope</span> = <span class="string">cov_xy / var_x</span></span><br><span class="line">    <span class="attr">y_interc</span> = <span class="string">y_avg - slope*x_avg</span></span><br><span class="line">    <span class="attr">return</span> <span class="string">(slope, y_interc)</span></span><br></pre></td></tr></table></figure>
<p>两种方式的异同参考上面提到的博文。</p>
<h3 id="高次多项式拟合"><a href="#高次多项式拟合" class="headerlink" title="高次多项式拟合"></a>高次多项式拟合</h3><p>线性拟合有时候并不能很好的对散点图进行拟合，有时候我们需要提高次数，进行高次多项式的拟合，得到更加精确的表达式，但是这里也注意，过高的次数会产生<strong><em>过拟合</em></strong>现象。</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">#start多项式拟合</span><br><span class="line">#最高次項为<span class="number">6</span>次方的多項式</span><br><span class="line">line4 = np.polyfit(x, y, <span class="number">6</span>)  #返回多项式的系数</span><br><span class="line">pn4 = np.poly1d(line4)      #根据多项式的系数生成一个多项式计算器</span><br><span class="line">ftext4 = 'y = a*x^<span class="number">6</span> +b*x^<span class="number">5</span>+c*x^<span class="number">4</span>+d*x^<span class="number">3</span>+e*x^<span class="number">2</span>+f*x+g =&#123;&#125;*x^<span class="number">6</span>+ &#123;&#125;*x^<span class="number">5</span> +&#123;&#125;*x^<span class="number">4</span>+&#123;&#125;*x^<span class="number">3</span>+&#123;&#125;*x^<span class="number">2</span>+&#123;&#125;*x+&#123;&#125;'.format(line4[<span class="number">0</span>],line4[<span class="number">1</span>],line4[<span class="number">2</span>],line4[<span class="number">3</span>],line4[<span class="number">4</span>],line4[<span class="number">5</span>],line4[<span class="number">6</span>])</span><br><span class="line">print ftext4</span><br><span class="line"></span><br><span class="line">xaxis = np.linspace(<span class="number">0</span>,max(x),<span class="number">17000</span>)  #<span class="number">0</span>~<span class="number">400</span>采样<span class="number">17000</span>个点，自己的理解</span><br><span class="line">ax.plot(xaxis, pn4(xaxis),color[<span class="number">1</span>],markersize=<span class="number">3</span>)    #markersize表示点&gt;的大小</span><br><span class="line">ax.legend(['<span class="number">6</span>th degree poly',loc='lower right')</span><br><span class="line">ax.grid(True)</span><br></pre></td></tr></table></figure>

<p>这里随便贴一张我项目里最后的图片：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/sun1.png" alt=""><br><img src="http://o8fj2jbwb.bkt.clouddn.com/sun2.png" alt=""></p>
<h1 id="一壶茶喝完"><a href="#一壶茶喝完" class="headerlink" title="一壶茶喝完"></a>一壶茶喝完</h1><p>本篇博客是坐在阳光小镇咖啡餐厅酒吧里一个下午写的，由于是回忆的来写，写的期间为了得到文中的图片，又重新调整了一些代码，可能当时觉得很难或者不易的代码现在看起来比较简单，所以就写的简略了些，见谅。如果后续有想到的再补充。简单来说，matplotlib上手也很容易，官网的例子也很丰富。</p>
<p>好了，到此为止。<br><img src="http://o8fj2jbwb.bkt.clouddn.com/sunshinehouse.jpg" alt=""></p>
<center>洛神柠檬茶</center>
]]></content>
      <categories>
        <category>linux</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>matplotlib</tag>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker制作hexo镜像</title>
    <url>/2016/12/20/docker-made-hexoimage/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>这段时间一直在折腾我的博客，由于之前出现过一次电脑硬盘完全挂掉的情况，为了避免重新搭建博客系统，一直打算搞一个方便点的环境，能进行多机迁移之类的。正好，Docker完全满足我的要求。</p>
<p>之前一直只是听说过Docker，听说过容器，听说过镜像，但并没有正真的了解接触过Docker。这次借助于博客的折腾，正好有了这个研究折腾Docker的机会。</p>
<h1 id="What-is-Docker"><a href="#What-is-Docker" class="headerlink" title="What is Docker?"></a>What is Docker?</h1><p>正如<a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker官网</a>介绍的那样：</p>
<blockquote>
<p>Docker is the world’s leading software containerization platform.</p>
</blockquote>
<p>关于了解Docker不是本文的重点，这里可以推荐我之前收藏的关于Docker的几个链接：</p>
<ul>
<li><a href="http://www.widuu.com/docker/index.html" target="_blank" rel="noopener">Docker中文指南</a></li>
<li><a href="http://zone.gaospot.com/2016/05/11/Docker%E9%95%9C%E5%83%8F%E5%88%9B%E5%BB%BA/" target="_blank" rel="noopener">Docker镜像创建</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice" target="_blank" rel="noopener">Docker从入门到实战</a></li>
<li><a href="https://blog.tankywoo.com/docker/2014/05/08/docker-4-summary.html" target="_blank" rel="noopener">Docker 4 – 总结</a></li>
</ul>
<p>看完上面的内容基本还是对Docker有了一个比较基础的认识，关于docker的安装，docker命令的使用,docker的设计原理等。</p>
<h1 id="构建hexo镜像"><a href="#构建hexo镜像" class="headerlink" title="构建hexo镜像"></a>构建hexo镜像</h1><a id="more"></a>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p><em>这个地方我当时刚接触的时候没有理清，以为docker是把我windows上的本地环境打包构建成一个镜像，相当于克隆一个我在windows上的博客系统，这个想法还是有点太天真了看来。后来了解了Docker的原理以及使用后，才理清了这些问题。</em></p>
<p><strong>其实可以很简单的理解，docker是一个软件，运行的是容器，容器里面是各种应用，运行一个容器需要一个镜像，这个镜像可以是一个基础镜像，也可以是一个你自己基于基础镜像构建好的镜像，镜像的内容可以粗略的理解为一个系统，比如各种版本的Linux等。所以关于构建hexo的镜像，就是首先拉取一个基础镜像，比如我选择了Ubuntu系统，然后当容器跑起来后，就相当于一个虚拟机了，这个时候你可以安装你的hexo环境，node环境，git环境等，最后可以把整个构建好的环境整体打包生成一个最终的镜像，这个镜像就是最终需要的镜像。</strong></p>
<p>上面的理解，可能有偏差，因为只是我自己的理解。好了，废话不多说，开始了！(我的linux机器是centos7）</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"># yum  <span class="meta">update</span>  <span class="variable">&amp;&amp;</span> yum install docker-engine</span><br></pre></td></tr></table></figure>
<p>启动docker:</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># systemctl start docker</span></span><br></pre></td></tr></table></figure>
<p>运行测试:</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run --rm hello-world</span></span><br><span class="line">Unable <span class="built_in">to</span> find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line"> latest: Pulling <span class="built_in">from</span> library/hello-world</span><br><span class="line"> c04b14da8d14: Pull complete</span><br><span class="line"> Digest: sha256:<span class="number">0256e8</span>a36e2070f7bf2d0b0763dbabdd67798512411de4cdcf9431a1feb60fd9</span><br><span class="line"> Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line"> Hello <span class="built_in">from</span> Docker!</span><br><span class="line"> This message shows that your installation appears <span class="built_in">to</span> be working correctly.</span><br><span class="line"></span><br><span class="line"> To generate this message, Docker took <span class="keyword">the</span> following steps:</span><br><span class="line">  <span class="number">1.</span> The Docker client contacted <span class="keyword">the</span> Docker daemon.</span><br><span class="line">  <span class="number">2.</span> The Docker daemon pulled <span class="keyword">the</span> <span class="string">"hello-world"</span> image <span class="built_in">from</span> <span class="keyword">the</span> Docker Hub.</span><br><span class="line">  <span class="number">3.</span> The Docker daemon created <span class="keyword">a</span> <span class="built_in">new</span> container <span class="built_in">from</span> that image which runs <span class="keyword">the</span></span><br><span class="line">     executable that produces <span class="keyword">the</span> output you are currently reading.</span><br><span class="line">  <span class="number">4.</span> The Docker daemon streamed that output <span class="built_in">to</span> <span class="keyword">the</span> Docker client, which sent <span class="keyword">it</span></span><br><span class="line">     <span class="built_in">to</span> your terminal.</span><br><span class="line"></span><br><span class="line"> To <span class="keyword">try</span> something more ambitious, you can run <span class="keyword">an</span> Ubuntu container <span class="keyword">with</span>:</span><br><span class="line">  $ docker run -<span class="keyword">it</span> ubuntu bash</span><br><span class="line"></span><br><span class="line"> Share images, automate workflows, <span class="keyword">and</span> more <span class="keyword">with</span> <span class="keyword">a</span> free Docker Hub account:</span><br><span class="line">  <span class="keyword">https</span>://hub.docker.com</span><br><span class="line"></span><br><span class="line"> For more examples <span class="keyword">and</span> ideas, visit:</span><br><span class="line">  <span class="keyword">https</span>://docs.docker.com/engine/userguide/</span><br></pre></td></tr></table></figure>

<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:<span class="number">14.04</span></span><br><span class="line"></span><br><span class="line">MAINTAINER nick,&lt;linuxcode2niki@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">RUN <span class="string">\</span></span><br><span class="line">    cp /etc/apt/sources.<span class="keyword">list</span> /etc/apt/sources.<span class="keyword">list</span>.bak &amp;&amp; <span class="string">\</span></span><br><span class="line">    echo <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse"</span> &gt; /etc/apt/sources.<span class="keyword">list</span> &amp;&amp; <span class="string">\</span></span><br><span class="line">    echo <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse"</span>  &gt;&gt; /etc/apt/sources.<span class="keyword">list</span> &amp;&amp; <span class="string">\</span></span><br><span class="line">    echo <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse "</span>  &gt;&gt; /etc/apt/sources.<span class="keyword">list</span> &amp;&amp; <span class="string">\</span></span><br><span class="line">    echo <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse "</span>  &gt;&gt; /etc/apt/sources.<span class="keyword">list</span> &amp;&amp; <span class="string">\</span></span><br><span class="line">    echo <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse "</span>  &gt;&gt; /etc/apt/sources.<span class="keyword">list</span> &amp;&amp; <span class="string">\</span></span><br><span class="line">    echo <span class="string">"deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse "</span>  &gt;&gt; /etc/apt/sources.<span class="keyword">list</span> &amp;&amp; <span class="string">\</span></span><br><span class="line">    echo <span class="string">"deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse "</span>  &gt;&gt; /etc/apt/sources.<span class="keyword">list</span> &amp;&amp; <span class="string">\</span></span><br><span class="line">    echo <span class="string">"deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse "</span>  &gt;&gt; /etc/apt/sources.<span class="keyword">list</span> &amp;&amp; <span class="string">\</span></span><br><span class="line">    echo <span class="string">"deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse "</span>  &gt;&gt; /etc/apt/sources.<span class="keyword">list</span> &amp;&amp; <span class="string">\</span></span><br><span class="line">    echo <span class="string">"deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse "</span> &gt;&gt; /etc/apt/sources.<span class="keyword">list</span> &amp;&amp; <span class="string">\</span></span><br><span class="line">    apt-get update &amp;&amp; <span class="string">\</span></span><br><span class="line">    apt-get install -y git &amp;&amp; <span class="string">\</span></span><br><span class="line">    apt-get install -y nodejs <span class="built_in">npm</span> &amp;&amp; <span class="string">\</span></span><br><span class="line">    apt-get clean  &amp;&amp; <span class="string">\</span></span><br><span class="line">    rm -rf <span class="regexp">/var/lib/apt/lists/</span>*  &amp;&amp; <span class="string">\</span></span><br><span class="line">    ln -s /usr/bin/nodejs  /usr/bin/node  &amp;&amp; <span class="string">\</span></span><br><span class="line">    alias cnpm=<span class="string">"npm --registry=https://registry.npm.taobao.org --cache=$HOME/.npm/.cache/cnpm --disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="string">    --userconfig=$HOME/.cnpmrc"</span>  &amp;&amp; <span class="string">\</span></span><br><span class="line">    <span class="built_in">npm</span> install hexo-cli -g</span><br><span class="line"></span><br><span class="line">WORKDIR /Hexo</span><br><span class="line"><span class="comment">#VOLUME ["/Hexo/source", "/Hexo/themes", "/root/.ssh"]</span></span><br><span class="line">EXPOSE <span class="number">4000</span></span><br><span class="line">CMD [<span class="string">'/bin/bash'</span>]</span><br></pre></td></tr></table></figure>
<p>Dockerfile是用来构建一个镜像的命令的集合，docker可以根据里面的命令自动化的构建一个用户所期望的镜像。关于上面Dockerfile的内容，我做一点简单的解释。</p>
<p>前面的echo命令是更换ubuntu的apt-get源为阿里云的源，加快访问下载速度。然后安装git,nodejs,npm,然后更换淘宝的cnmp：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">alias <span class="attr">cnpm="npm</span> <span class="attr">--registry=https://registry.npm.taobao.org</span> <span class="attr">--cache=$HOME/.npm/.cache/cnpm</span> <span class="attr">--disturl=https://npm.taobao.org/dist</span> \</span><br><span class="line">    <span class="attr">--userconfig=$HOME/.cnpmrc"</span></span><br></pre></td></tr></table></figure>
<p>后面就是安装hexo（<em>注意此处的命令可以更换成cnmp install hexo-cli -g,我当时好像是碰到了问题，就采用原来的npm方式了</em>)。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /Hexo</span></span><br></pre></td></tr></table></figure>
<p>指明工作路径，启动容器后会自动切换到这个目录下。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#VOLUME</span> <span class="selector-attr">[<span class="string">"/Hexo/source"</span>, <span class="string">"/Hexo/themes"</span>, <span class="string">"/root/.ssh"</span>]</span></span><br></pre></td></tr></table></figure>
<p>指定挂载目录，宿主机的/Heo/source,/Hexo/themes ,/root/.ssh 被挂载到容器里的相应位置，如果没有该目录，则创建该目录，提供一种宿主机和容器的访问策略。此处我前面加了#注释掉了，因为实际情况我不需要，可以在启动容器的命令中手工指定。<br>最后，</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">EXPOSE <span class="number">4000</span></span><br></pre></td></tr></table></figure>
<p>就是暴露端口4000，映射到宿主机的4000端口，提供另外一种宿主机和容器的访问策略。<br>关于Dockerfile中这些命令的详细解释，可以参考下面的链接：<br><a href="http://zone.gaospot.com/2016/05/11/Docker%E9%95%9C%E5%83%8F%E5%88%9B%E5%BB%BA/" target="_blank" rel="noopener">Docker镜像创建</a></p>
<p><strong>解释一下，按照上面的Dockerfile构建出来的镜像，安装了hexo的博客环境所依赖的工具或命令，包括git,node,npm,hexo本身，到此处，其实已经搭建好了一个hexo环境，只不过这个环境在一个容器中，接下来正常的操作就是新建一个目录作为hexo的博客根目录，然后执行‘hexo init . &amp;&amp; npm install &amp;&amp; …’,但是其实我不会这么做，后面解释。</strong></p>
<h2 id="运行docker-构建镜像"><a href="#运行docker-构建镜像" class="headerlink" title="运行docker,构建镜像"></a>运行docker,构建镜像</h2><p>检查docker是否在运行:</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># systemctl status docker</span></span><br></pre></td></tr></table></figure>
<p>如果是”inactive”，那么启动docker:</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># systemctl start  docker</span></span><br></pre></td></tr></table></figure>
<p>依据Dockerfile构建hexo镜像：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">#docker</span> <span class="keyword">build </span>-t  hexo:<span class="built_in">v1</span>  .</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>此命令是必须在Dockerfile的目录下执行，hexo:v1可以自行命名，就是镜像的名字，v1应该类似于一个tag之类的东西。</p>
<p>如果正常的话，是会看到后面的输出正好对应着Dockerfile中的每条命令。构建成功后大致会看到类似“successful build”之类的提示。查看镜像:</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY       <span class="keyword">TAG</span>              <span class="title">IMAGE</span> ID         CREATED             SIZE</span><br><span class="line">hexo             v1               <span class="number">522</span>f7cfc7a31     <span class="number">8</span> seconds ago         <span class="number">405M</span>B</span><br></pre></td></tr></table></figure>
<p>关于405MB可能不准确，因为当时的数据我现在不太记得，不过大致在这个量级，还是挺大的。</p>
<h2 id="测试容器hexo"><a href="#测试容器hexo" class="headerlink" title="测试容器hexo"></a>测试容器hexo</h2><p>执行命令：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># docker run -i -t <span class="number">522f</span>7cfc7a31 -p <span class="number">4000</span>:<span class="number">4000</span> /bin/bash</span><br></pre></td></tr></table></figure>
<p>会启动容器，这个时候切换到容器里的系统的终端，如：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@abfc3a0ec1f0</span><span class="symbol">:/Hexo</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>紧接着敲入命令：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">root@abfc3a0ec1f0:~#</span> <span class="string">hexo</span>  <span class="string">-v</span></span><br><span class="line"><span class="attr">hexo-cli:</span> <span class="number">1.0</span><span class="number">.2</span></span><br><span class="line"><span class="attr">os:</span> <span class="string">Linux</span> <span class="number">3.10</span><span class="number">.0</span><span class="number">-327.36</span><span class="number">.3</span><span class="string">.el7.x86_64</span> <span class="string">linux</span> <span class="string">x64</span></span><br><span class="line"><span class="attr">http_parser:</span> <span class="number">2.5</span><span class="number">.2</span></span><br><span class="line"><span class="attr">node:</span> <span class="number">4.4</span><span class="number">.5</span></span><br><span class="line"><span class="attr">v8:</span> <span class="number">4.5</span><span class="number">.103</span><span class="number">.35</span></span><br><span class="line"><span class="attr">uv:</span> <span class="number">1.8</span><span class="number">.0</span></span><br><span class="line"><span class="attr">zlib:</span> <span class="number">1.2</span><span class="number">.8</span></span><br><span class="line"><span class="attr">ares:</span> <span class="number">1.10</span><span class="number">.1</span><span class="string">-DEV</span></span><br><span class="line"><span class="attr">icu:</span> <span class="number">56.1</span></span><br><span class="line"><span class="attr">modules:</span> <span class="number">46</span></span><br><span class="line"><span class="attr">openssl:</span> <span class="number">1.0</span><span class="string">.2h</span></span><br></pre></td></tr></table></figure>
<p>证明hexo容器启动正常，hexo环境安装成功。</p>
<h2 id="克隆hexo博客仓库源码，尝试提交"><a href="#克隆hexo博客仓库源码，尝试提交" class="headerlink" title="克隆hexo博客仓库源码，尝试提交"></a>克隆hexo博客仓库源码，尝试提交</h2><p><strong><em>这一步就是上面提到的在后面解释的那一步。</em></strong></p>
<p>上面说到，安装好hexo的环境后，接下来就是执行创建博客源码的步骤，但是由于前一篇博文<a href="http://rebootcat.com/2016/12/13/use-coding-update-blog/" target="_blank" rel="noopener">使用coding私有仓库多终端编写博客</a>中已经把博客源码放到了coding的私有仓库中，所以接下的步骤将会有些许不一样的地方。</p>
<h3 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h3><p>配置ssh，目的是为了通过ssh通道克隆我的博客仓库源码，免去http方式的用户名密码验证。配置方式可以参照我之前的博文<a href="http://rebootcat.com/2016/06/10/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener">我的个人博客搭建记录</a>中”配置SSH”一节。这里我把所有命令一起写下来：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">root@abfc3a0ec1f0<span class="symbol">:~</span><span class="comment">#  cd ~/.ssl &amp;&amp; ls -al ./*</span></span><br><span class="line">root@abfc3a0ec1f0<span class="symbol">:~</span><span class="comment">#  rm -rf ./*</span></span><br><span class="line">root@abfc3a0ec1f0<span class="symbol">:~</span><span class="comment"># git config --global user.name "yourname" &amp;&amp; git config --global user.email "youremail" &amp;&amp; ssh-keygen -t rsa -C "yourmail<span class="doctag">@gmail</span>.com"  &amp;&amp; cat ~/.ssh/id_rsa.pub</span></span><br></pre></td></tr></table></figure>
<p>实际情况实际替换。然后在coding上添加上面产生的密匙。</p>
<h3 id="克隆博客源码"><a href="#克隆博客源码" class="headerlink" title="克隆博客源码"></a>克隆博客源码</h3><p>执行命令：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@abfc3a0ec1f0</span><span class="symbol">:~</span><span class="comment"># git clone  &lt;server&gt;</span></span><br></pre></td></tr></table></figure>
<p>这一步完成后我们就把整个博客的源码克隆下来了，参照前一篇博文<a href="http://rebootcat.com/2016/12/13/use-coding-update-blog/" target="_blank" rel="noopener">使用coding私有仓库多终端同步编写博客</a>中”在另外的PC上”一节，只需要在博客目录下执行命令：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm  <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p>接下来就可以编写博客了：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo d -g</span></span><br></pre></td></tr></table></figure>

<p><strong>到这里其实完成了博客的所有依赖，也即此刻就不用再配置博客的系统了，接下来就是如何把这个容器保存下来的问题</strong></p>
<h2 id="构建最终hexo镜像"><a href="#构建最终hexo镜像" class="headerlink" title="构建最终hexo镜像"></a>构建最终hexo镜像</h2><p>简要阐述下上面的过程，首先依赖ubuntu的基础镜像安装好了hexo的环境，导出了一个hexo的第一个版本v1镜像，此时还没有博客源码，然后运行容器，在容器里边操作，配置ssh，克隆博客，完成后，就是再次生成镜像。<br>执行命令：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@abfc3a0ec1f0</span><span class="symbol">:~</span><span class="comment"># exit</span></span><br></pre></td></tr></table></figure>
<p>记住容器的id abfc3a0ec1f0，然后执行命令：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># docker commit -m <span class="meta-string">"finally hexo"</span> -a <span class="meta-string">"Author"</span> abfc3a0ec1f0 hexo:v2</span></span><br></pre></td></tr></table></figure>
<p>完成后执行docker images后会看到现在构建好的镜像hexo:v2版本。这个版本就是我们最终需要的镜像。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">docker</span> <span class="selector-tag">save</span> <span class="selector-tag">-o</span> <span class="selector-tag">hexo_finally</span><span class="selector-class">.tar</span> <span class="selector-tag">hexo</span><span class="selector-pseudo">:v2</span></span><br></pre></td></tr></table></figure>
<p>上面把镜像导出到本地。</p>
<p>到此处，已经完成了这篇博客的目的，构建了一个hexo的docker镜像，这个镜像可以运行在任何安装了docker的机器上，达到了之前我预期的多终端同步编写博客的目的。也不再害怕那天我的电脑硬盘又悲剧了，当然这个hexo_finally.tar是要备份的，不然说啥也没用。</p>
<p>但是，为了测试下这个镜像有没有正确，接下来我做点测试。</p>
<h2 id="验证hexo镜像"><a href="#验证hexo镜像" class="headerlink" title="验证hexo镜像"></a>验证hexo镜像</h2><p>首先执行命令删除所有镜像:</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"># docker rmi <span class="constructor">$(<span class="params">docker</span> <span class="params">images</span> -<span class="params">q</span>)</span></span><br></pre></td></tr></table></figure>
<p>然后装载镜像：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># docker load &lt; hexo_finally.tar</span></span><br></pre></td></tr></table></figure>
<p>执行docker images即可查看到装载进来的镜像。然后运行容器：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># docker run -i -t <span class="meta-string">&lt;id&gt;  /bin/bash</span></span></span><br></pre></td></tr></table></figure>
<p>然后（blog是我自己的博客根目录）:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>  blog</span><br></pre></td></tr></table></figure>
<p>尝试执行:</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git pull origin <span class="keyword">master</span> <span class="title">&amp;&amp; hexo</span> d -g</span><br></pre></td></tr></table></figure>
<p><strong>这一步多半凶多吉少，我在此处浪费了很多时间。我发现每次运行容器后root用户下的.ssh文件夹会不见了，这个文件下可是我之前生成的密匙所在地啊。反复试了好多次，发现都一样，只要重新运行，.ssh文件夹就会消失。后来我采取了一个折中的办法，把id_rsa和id_rsa.pub两个文件复制到root的$HOME下，然后在重新生成镜像导出，下次再运行容器的时候重新把这两个文件复制到.ssh文件夹下可以解决此问题</strong></p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><p>好了，到此处，基本完成了hexo的镜像制作，只要备份了这个hexo_finally.tar包，就可以不惧怕任何宕机问题了，欧耶。其实我如果写好博客后，是不需要执行hexo d -g命令的，由于我后来采用了daocloud自动集成，所以只需要把博客源码提交到coding就可以了，然后daocloud会自动集成构建。(关于这种采用daocloud自动集成的方式，我后面的博文会记录到，这里先占个坑，写好了重新更新到这里。<a href="null">点我</a>)</p>
<p>总体过程还是有点复杂的，我由于是回忆的状态写，可能会有疏漏，如果碰到问题，你可以联系我或者自己探索解决。总之，首先要了解docker，然后学会使用docker，然后做起这些来就比较轻松多了。</p>
<p>至于docker嘛，使用感觉并没有想象中那么如丝般柔滑，加载一个镜像，运行一个容器还是挺慢的。恩，对的。</p>
<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p>
</li>
<li><p>email: <a href="mailto:&#x6c;&#x69;&#x6e;&#x75;&#x78;&#99;&#111;&#x64;&#101;&#x32;&#110;&#x69;&#x6b;&#x69;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;">&#x6c;&#x69;&#x6e;&#x75;&#x78;&#99;&#111;&#x64;&#101;&#x32;&#110;&#x69;&#x6b;&#x69;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;</a></p>
</li>
</ul>
<p>2016-12-20 于杭州<br><em>By  <a href="http://weibo.com/2793607050/profile?topnav=1&wvr=6&is_all=1" target="_blank" rel="noopener">史矛革</a></em></p>
]]></content>
      <categories>
        <category>docker</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-hexo镜像测试</title>
    <url>/2016/12/01/docker-test/</url>
    <content><![CDATA[<h1 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h1><p>利用docker构建了hexo的镜像，迁移到另外的PC上构建博客。<br>success!!</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>破解微信 DB, 导出 Mac 微信聊天记录</title>
    <url>/2018/03/05/export_mac_wechat/</url>
    <content><![CDATA[<h1 id="前头的话"><a href="#前头的话" class="headerlink" title="前头的话"></a>前头的话</h1><p>最近由于手机内存告急，打算对手机进行一下瘦身。其中手机微信占用了将近 5G，这个简直太可怕了，于是打算把微信聊天记录备份到电脑上。本来备份就备份了，也没啥好说的，不过突发奇想想知道 Mac Wechat 把聊天记录备份到哪了？或者说平常聊天的数据放在哪里了？能不能把这些聊天记录导出成 txt 文件呢？</p>
<p>于是就有了这篇文章。</p>
<h1 id="导出微信聊天记录为txt"><a href="#导出微信聊天记录为txt" class="headerlink" title="导出微信聊天记录为txt"></a>导出微信聊天记录为txt</h1><p>导出微信聊天记录最简单的一种方式应该是使用 itunes 对 iphone 进行<strong>不加密备份</strong>，然后找到备份文件里面的数据，据说聊天记录是以明文的方式存在 DB 中的。这种方法我没去试过，这里主要讲一下通过<strong>破解微信 DB，读取到聊天记录，然后导出聊天记录</strong>。</p>
<h2 id="微信数据目录"><a href="#微信数据目录" class="headerlink" title="微信数据目录"></a>微信数据目录</h2><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"># 替换其中的 smaug 为你自己的用户名</span><br><span class="line">cd /Users/smaug/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/<span class="number">2.0b4</span><span class="number">.0</span><span class="number">.9</span></span><br><span class="line"></span><br><span class="line">find ./ -name <span class="string">"*.db"</span></span><br></pre></td></tr></table></figure>

<p>以上目录就是微信数据存储的目录，可以看到有很多 db 文件：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/ChatSync/ChatSync.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_1.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_5.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_4.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_0.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/fts/ftsmessage.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_7.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_3.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_2.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_6.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_9.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Message/msg_8.db</span></span><br><span class="line">.<span class="comment">//37cc38007838aa28296af491b890575f/Sync/openim_oplog.db</span></span><br></pre></td></tr></table></figure>

<p>其中类似于 msg_0.db、 msg_1.db 的就是聊天记录的数据文件，只不过是加过密的数据库，没法直接看。不过好在有各路大神，可以参考文末的参考链接。</p>
<h2 id="破解步骤"><a href="#破解步骤" class="headerlink" title="破解步骤"></a>破解步骤</h2><p>1.打开 Mac Wechat，但是不要登录</p>
<p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/export_mac_wechat/1.png" alt=""></p>
<p>2.打开终端，输入命令</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">lldb -p <span class="constructor">$(<span class="params">pgrep</span> WeChat)</span></span><br></pre></td></tr></table></figure>
<p>lldb 是在 mac 上的一个调试工具，上面的意思是使用 lldb attach 到 WeChat 这个进程上，进行调试，回车之后进入 lldb 调试界面</p>
<p>3.在 lldb 调试界面输入命令</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">br <span class="keyword">set</span> -n <span class="comment">sqlite3_key</span></span><br></pre></td></tr></table></figure>
<p>然后回车。</p>
<p><strong>这时调试屏幕上可能会出现一些 error，可以暂时忽略，不用管</strong>。</p>
<p>4.输入 c  回车</p>
<p>5.然后正常登录 Mac Wechat，点击登录，手机上点击允许（或者是扫码登录），不用关心此时 Mac Wechat 是否被卡住</p>
<p>6.接着输入命令</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">memory</span> <span class="keyword">read</span> --size 1 --<span class="keyword">format</span> x --<span class="keyword">count</span> 32 <span class="variable">$rsi</span></span><br></pre></td></tr></table></figure>
<p>回车。</p>
<p>读取内存中 寄存器 rsi 存储的值。大致回输出如下的字样：</p>
<p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/export_mac_wechat/2.png" alt=""></p>
<p>其中下面的这段是我们关心的：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">0x604004c346a0</span>: <span class="number">0xad</span> <span class="number">0x5c</span> <span class="number">0xff</span> <span class="number">0x0a</span> <span class="number">0x85</span> <span class="number">0xce</span> <span class="number">0x4a</span> <span class="number">0x5e</span></span><br><span class="line"><span class="number">0x604004c346a8</span>: <span class="number">0x9f</span> <span class="number">0x7f</span> <span class="number">0x8a</span> <span class="number">0xd3</span> <span class="number">0xa6</span> <span class="number">0xc6</span> <span class="number">0x02</span> <span class="number">0xf3</span></span><br><span class="line"><span class="number">0x604004c346b0</span>: <span class="number">0x25</span> <span class="number">0x02</span> <span class="number">0xb1</span> <span class="number">0x48</span> <span class="number">0x4c</span> <span class="number">0x76</span> <span class="number">0x4c</span> <span class="number">0x84</span></span><br><span class="line"><span class="number">0x604004c346b8</span>: <span class="number">0x82</span> <span class="number">0x38</span> <span class="number">0xc3</span> <span class="number">0x17</span> <span class="number">0x4d</span> <span class="number">0x27</span> <span class="number">0x14</span> <span class="number">0x33</span></span><br></pre></td></tr></table></figure>
<p>把前面 0x604004c346b0： 去掉，同时删除后面所有的 0x 和空格，拼接成一个字符串为 (总共 64 个字符）：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">ad<span class="number">5</span>cff<span class="number">0</span>a<span class="number">85</span>ce<span class="number">4</span>a<span class="number">5e9</span>f<span class="number">7</span>f<span class="number">8</span>ad<span class="number">3</span>a<span class="number">6</span><span class="keyword">c</span><span class="number">602</span>f<span class="number">32502</span>b<span class="number">1484</span><span class="keyword">c</span><span class="number">764</span><span class="keyword">c</span><span class="number">848238</span><span class="keyword">c</span><span class="number">3174</span>d<span class="number">271433</span></span><br></pre></td></tr></table></figure>
<p>前面加上 0x 就是我们用来破解 DB 的 key:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">0xad5cff0a85ce4a5e9f7f8ad3a6c602f32502b1484c764c848238c3174d271433</span></span><br></pre></td></tr></table></figure>

<p>到这里基本上就相当于拿到了微信数据库的 key 了，接下来就是用这个 key 打开 DB 文件了。</p>
<p>TODO(smaug)</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>wechat</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>hessiancpp编译和使用(C++版)</title>
    <url>/2016/11/22/hessiancpp%E7%BC%96%E8%AF%91%E5%92%8C%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94C++%E7%89%88/</url>
    <content><![CDATA[<h1 id="许下的承诺"><a href="#许下的承诺" class="headerlink" title="许下的承诺"></a>许下的承诺</h1><p>前两篇博客<a href="http://rebootcat.com/2016/11/17/Hessian%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94java/" target="_blank" rel="noopener">Hessian通信案例(java)</a>和<a href="http://rebootcat.com/2016/11/18/Hessian%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%94java/" target="_blank" rel="noopener">Hessian源码分析(java)</a>介绍了Java版的hessian的使用以及源码分析。当时也说过打算写一下C++版的hessian的使用和源码分析，现在就是兑现承诺的时候了。其实我项目中实际用到的是C++版的hessian，java版的hessian是我最初接触用来理解hessian，并进行联调测试的部分。</p>
<p>hessian的<a href="http://hessian.caucho.com/#C" target="_blank" rel="noopener">官网</a>上也提供了C++版的hessian的实现。只不过当时在网上找到的说法是hessiancpp的活跃度比较低，而且编译出问题很多，但是还是决定自己亲自一试，毕竟”绝知此事要躬行”嘛，嘿嘿！当然也有其他版本的C++实现，比如<a href="https://github.com/pukkaone/hessianorb" target="_blank" rel="noopener">hessianorb项目</a>。</p>
<h1 id="Hessiancpp编译"><a href="#Hessiancpp编译" class="headerlink" title="Hessiancpp编译"></a>Hessiancpp编译</h1><p>现在是回过头来写，故早先编译碰到的问题我已经没办法复现，此处就只记录正确的编译步骤和方法。</p>
<h2 id="下载hessiancpp"><a href="#下载hessiancpp" class="headerlink" title="下载hessiancpp"></a>下载hessiancpp</h2><p>到官网下载源码包：<a href="https://sourceforge.net/projects/hessiancpp/" target="_blank" rel="noopener">https://sourceforge.net/projects/hessiancpp/</a>,我自己当时的版本是hessiancpp-hessaincpp-1.1.0.tar.gz。</p>
<h2 id="解压编译"><a href="#解压编译" class="headerlink" title="解压编译"></a>解压编译</h2><p>解压上面下载的tar.gz压缩包</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">tar</span>  <span class="selector-tag">zxvf</span>  <span class="selector-tag">hessiancpp-hessaincpp-1</span><span class="selector-class">.1</span><span class="selector-class">.0</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure>
<p>然后进入顶层目录hessiancpp:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hessaincpp</span><br></pre></td></tr></table></figure>

<p>你可以先查看此目录下的Makefile文件，然后试着执行:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">make</span> <span class="keyword">all</span></span><br></pre></td></tr></table></figure>

<p>结果，不出所料，编译出错，错误如下：</p>
<blockquote>
<p>In file included from hessian_proxy.cpp:19:0:<br>hessian_proxy.h:31:19: 致命错误：ssl++.h：没有那个文件或目录<br>编译中断。<br>make: *** [hessian_proxy.o] 错误 1</p>
</blockquote>
<p>可见缺少了一个叫做ssl++.h的头文件，我们再仔细查看Makefile文件，可以看到第一行代码是：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">SSLPP</span>=../sslpp</span><br></pre></td></tr></table></figure>

<p>显然需要另外一个库。这个库就是提供http代理的功能。网上有人碰到这个问题后，选择了libcurl重写一个http代理，据说还可行。</p>
<p>言归正传，我们需要一个叫做sslpp的库。</p>
<h2 id="下载hessian-sslpp"><a href="#下载hessian-sslpp" class="headerlink" title="下载hessian-sslpp"></a>下载hessian-sslpp</h2><a id="more"></a>
<p>去github下载: <a href="https://github.com/ksturner/hessian/tree/master/sslpp" target="_blank" rel="noopener">https://github.com/ksturner/hessian/tree/master/sslpp</a></p>
<p>常规操作，解压，然后进入顶层目录，然后查看Makefile文件，然后尝试执行make all编译。果然又出错了。</p>
<p>查看INSTALL文件:</p>
<blockquote>
<p>SSLPP was developed on a Fedora Core 2 x86_64 system, using</p>
<ul>
<li>GCC 3.3.3</li>
<li>OpenSSL 0.9.7a</li>
<li>BOOST 1.31.0</li>
<li>shared library</li>
</ul>
</blockquote>
<p>可以看到编译SSLPP需要的依赖。我碰到的编译错误是没有安装BOOST库。那么就去安装吧：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install </span><span class="keyword">boost </span><span class="keyword">boost-devel </span> <span class="keyword">boost-doc</span></span><br></pre></td></tr></table></figure>
<p>完事之后再试着执行make  all ,make install看看。如果没有错误，那么基本就是可以了，如果碰到了错误，那么没办法，只能一步步解决。</p>
<p>这里主要是需要编译生成的<strong>libsslpp.so</strong>这个动态库。</p>
<h2 id="继续编译hessiancpp"><a href="#继续编译hessiancpp" class="headerlink" title="继续编译hessiancpp"></a>继续编译hessiancpp</h2><p>回到之前对hessiancpp的编译，修改下Makefile文件中SSLPP这个宏的值，根据sslpp的编译修改。然后执行:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">make</span> <span class="keyword">all</span></span><br></pre></td></tr></table></figure>

<p>正常情况就不会有问题了，编译成功。<strong>在当前目录下生成了一个libhessian.so和一个main可执行程序和main_dyn可执行程序。</strong></p>
<p><strong><em>大功告成！！！</em></strong></p>
<h1 id="使用hessiancpp"><a href="#使用hessiancpp" class="headerlink" title="使用hessiancpp"></a>使用hessiancpp</h1><p>首先要明白，hessiancpp只是实现了hessian的客户端，具体就是实现了hessian的序列化和反序列算法以及使用sslpp作为一个http代理客户端。故如果要使用hessiancpp，还需要配合一个hessian服务端，这里就用之前博文中介绍过的java 版hessian server作为服务端。</p>
<h2 id="启动hessian-server"><a href="#启动hessian-server" class="headerlink" title="启动hessian server"></a>启动hessian server</h2><p>假设服务端提供了两个接口函数，具体请看下图：<img src="http://o8fj2jbwb.bkt.clouddn.com/Ibasic.png" alt=""><br>函数功能都是返回”Hello, world,my name is nick!”。</p>
<p>需要注意的是，此时这个服务端的地址为：* http://[IP]:8080/hessian_server/ServerMachineTest *</p>
<p><strong>然后，启动服务端。</strong></p>
<h2 id="修改客户端代码"><a href="#修改客户端代码" class="headerlink" title="修改客户端代码"></a>修改客户端代码</h2><p>回到hessiancpp目录下，修改main.cpp。主要修改的代码是:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"starting"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="function">hessian_proxy <span class="title">proxy</span><span class="params">(<span class="string">"192.168.242.188:8080"</span>, <span class="string">"/hessian_server/ServerMachineTest"</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123; </span><br><span class="line">  </span><br><span class="line">  Object* hello_ret = proxy.call(<span class="string">"hello"</span>,<span class="number">0</span>);</span><br><span class="line">  dump(hello_ret);</span><br><span class="line">  </span><br><span class="line">  <span class="function">Integer <span class="title">arg1</span><span class="params">(<span class="number">42</span>)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">String</span>  <span class="title">arg2</span><span class="params">(<span class="string">"hahaha"</span>)</span></span>;</span><br><span class="line">  Object* hello2_ret = proxy.call(<span class="string">"hello_2"</span>,<span class="number">2</span>,&amp;arg1,&amp;arg2);</span><br><span class="line">  dump(hello2_ret);</span><br><span class="line"></span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<p>此处稍微对上面的代码做一点解释，具体解释在后面的代码分析。首先根据url构造一个http代理proxy，然后执行call函数，类似java版hessain里边的invoke函数，call函数的参数就是接口方法名以及接口函数的参数个数，以及参数本身。 dump()函数是已经实现好的，主要功能是打印输出。</p>
<p>编译，执行，可以看到结果如下：<img src="http://o8fj2jbwb.bkt.clouddn.com/hessiancpp%E7%BB%93%E6%9E%9C.png" alt=""></p>
<p><strong>至此，完成了c++版的hessian客户端和java版的hessian服务端的通信。</strong></p>
<h1 id="hessiancpp源码分析"><a href="#hessiancpp源码分析" class="headerlink" title="hessiancpp源码分析"></a>hessiancpp源码分析</h1><p>hessiancpp目录下可以看到的文件有hessian_input.*  hessian_output.*  hessain_proxy.*  wrappers.*  zlibdec.* 等，大概可以猜测到hessian_input.cpp和hessian_output.cpp分别是接收处理和发送处理的代码，也即反序列化和序列化的代码，hessian_proxy.cpp是http代理的代码，负责发送和接收hessian报文。剩下的cpp文件具体再研究。</p>
<h2 id="单步调试"><a href="#单步调试" class="headerlink" title="单步调试"></a>单步调试</h2><p>为了进行代码分析，最好的办法是单步跟踪:</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">gdb <span class="string">./main</span></span><br></pre></td></tr></table></figure>

<p>进入到call函数中：</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">Object* hessian_proxy::call(<span class="keyword">const</span> string&amp; <span class="function"><span class="keyword">method</span>, <span class="title">int</span> <span class="title">argc</span>, ...) <span class="title">throw</span><span class="params">(io_exception, http_exception)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">va_list ap; </span></span></span><br><span class="line"><span class="function"><span class="comment">int narg = 0;</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">// result, connection, hessian output</span></span></span><br><span class="line"><span class="function"><span class="comment">Object* result = NULL;</span></span></span><br><span class="line"><span class="function"><span class="comment">sslpp::http_connection con(_hostspec, _use_ssl);</span></span></span><br><span class="line"><span class="function"><span class="comment">hessian_output hout;</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">// create method call</span></span></span><br><span class="line"><span class="function"><span class="comment">string mc = hout.start_call(method);</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">// add parameters</span></span></span><br><span class="line"><span class="function"><span class="comment">va_start(ap, argc);</span></span></span><br><span class="line"><span class="function"><span class="comment">while (narg++ &lt; argc) &#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  Object* param = va_arg(ap, Object*);</span></span></span><br><span class="line"><span class="function"><span class="comment">  hout.set_parameter(mc, param);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>   </span></span><br><span class="line"><span class="function">// <span class="title">clean</span> <span class="title">up</span> <span class="title">vararg</span></span></span><br><span class="line"><span class="function"><span class="title">va_end</span><span class="params">(ap)</span>;</span></span><br><span class="line"><span class="comment">// finish method call</span></span><br><span class="line">hout.complete_call(mc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// call</span></span><br><span class="line">_num_calls++;</span><br><span class="line">_bytes_out += mc.length();</span><br><span class="line">string raw_reply = con.POST(_url, mc, HESSIAN_HTTP_CONTENT_TYPE, HESSIAN_HTTP_USER_AGENT);</span><br><span class="line">string hessian_reply = con.parse_reply(raw_reply);</span><br><span class="line">_bytes_in += hessian_reply.length();</span><br><span class="line">_call_size_map.insert(std::make_pair(<span class="function"><span class="keyword">method</span>, <span class="title">hessian_reply</span>.<span class="title">length</span><span class="params">()</span>));</span></span><br><span class="line"><span class="comment">// test for compressed answer</span></span><br><span class="line">unsigned short header = ((unsigned short)hessian_reply[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">header += ((unsigned short)hessian_reply[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span> (header == GZIP_MAGICK) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">// decompress</span></span><br><span class="line"><span class="comment">  zlibdec zdec;</span></span><br><span class="line"><span class="comment">  try &#123;</span></span><br><span class="line"><span class="comment">    hessian_reply = zdec.decompress(hessian_reply);</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line">  catch (zlib_exception&amp; e) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    throw io_exception(e.what());</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// create a string_input_stream around the reply; note use of auto_ptr</span></span><br><span class="line">auto_ptr&lt;input_stream&gt; sis(<span class="keyword">new</span> string_input_stream(hessian_reply));</span><br><span class="line"><span class="comment">// read reply</span></span><br><span class="line">hessian_input hin(sis);</span><br><span class="line">hin.start_reply();</span><br><span class="line"><span class="keyword">result</span> = hin.get_result();</span><br><span class="line">hin.complete_reply();</span><br><span class="line">return <span class="keyword">result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中关于序列化的代码为：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">.....	</span><br><span class="line"><span class="comment">// create method call</span></span><br><span class="line"><span class="built_in">string</span> mc = hout.start<span class="constructor">_call(<span class="params">method</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add parameters</span></span><br><span class="line">va<span class="constructor">_start(<span class="params">ap</span>, <span class="params">argc</span>)</span>;</span><br><span class="line"><span class="keyword">while</span> (narg++ &lt; argc) &#123;</span><br><span class="line">  Object* param = va<span class="constructor">_arg(<span class="params">ap</span>, Object<span class="operator">*</span>)</span>;</span><br><span class="line">  hout.set<span class="constructor">_parameter(<span class="params">mc</span>, <span class="params">param</span>)</span>;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">// clean up vararg</span></span><br><span class="line">va<span class="constructor">_end(<span class="params">ap</span>)</span>;</span><br><span class="line"><span class="comment">// finish method call</span></span><br><span class="line">hout.complete<span class="constructor">_call(<span class="params">mc</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>start_call(),set_parameter(),complete_call()三个函数完成了hessian的序列化。具体序列化的过程如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> hessian_output::start<span class="constructor">_call(<span class="params">const</span> <span class="params">string</span>&amp; <span class="params">method_name</span>)</span> &#123;</span><br><span class="line"><span class="built_in">string</span> mc(<span class="string">"c"</span>);</span><br><span class="line">mc.append(<span class="number">1</span>, (<span class="built_in">char</span>)<span class="number">1</span>);</span><br><span class="line">mc.append(<span class="number">1</span>, (<span class="built_in">char</span>)<span class="number">0</span>);</span><br><span class="line">return write<span class="constructor">_ascii_string(<span class="params">mc</span>, <span class="params">method_name</span>, '<span class="params">m</span>')</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实比较简单，字符’c’可能代表”call”或者”client”，然后是版本号’1’,然后追加了一个字符’0’，然后利用write_ascii_string()函数序列化接口函数名,如上面的”hello”。</p>
<p>然后：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>&amp; hessian_output::set<span class="constructor">_parameter(<span class="params">string</span>&amp; <span class="params">call</span>, Object<span class="operator">*</span> <span class="params">object</span>)</span> &#123;</span><br><span class="line">  return write<span class="constructor">_object(<span class="params">call</span>, <span class="params">object</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后进入write_object函数：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span>&amp; <span class="title">hessian_output::write_object</span><span class="params">(<span class="built_in">string</span>&amp; call, Object* object)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* cls = object-&gt;classname2();</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cls, <span class="string">"Binary"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> write_binary(call, <span class="keyword">dynamic_cast</span>&lt;Binary*&gt;(object));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cls, <span class="string">"Boolean"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> write_boolean(call, <span class="keyword">dynamic_cast</span>&lt;Boolean*&gt;(object));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cls, <span class="string">"Date"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> write_date(call, <span class="keyword">dynamic_cast</span>&lt;Date*&gt;(object));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cls, <span class="string">"Double"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> write_double(call, <span class="keyword">dynamic_cast</span>&lt;Double*&gt;(object));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cls, <span class="string">"Fault"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> write_fault(call, <span class="keyword">dynamic_cast</span>&lt;Fault*&gt;(object));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cls, <span class="string">"Integer"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> write_integer(call, <span class="keyword">dynamic_cast</span>&lt;Integer*&gt;(object));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cls, <span class="string">"List"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> write_list(call, <span class="keyword">dynamic_cast</span>&lt;List*&gt;(object));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cls, <span class="string">"Long"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> write_long(call, <span class="keyword">dynamic_cast</span>&lt;Long*&gt;(object));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cls, <span class="string">"Map"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> write_map(call, <span class="keyword">dynamic_cast</span>&lt;Map*&gt;(object));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cls, <span class="string">"Null"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> write_null(call, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(cls, <span class="string">"Ref"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> write_ref(call, <span class="keyword">dynamic_cast</span>&lt;Ref*&gt;(object));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cls, <span class="string">"Remote"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> write_remote(call, <span class="keyword">dynamic_cast</span>&lt;Remote*&gt;(object));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cls, <span class="string">"String"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> write_string(call, <span class="keyword">dynamic_cast</span>&lt;<span class="keyword">String</span>*&gt;(object));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cls, <span class="string">"Xml"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> write_xml(call, <span class="keyword">dynamic_cast</span>&lt;Xml*&gt;(object));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// throw exception, should not get here, really</span></span><br><span class="line">  <span class="keyword">throw</span> io_exception(<span class="built_in">string</span>(<span class="string">"hessian_output::write_object(): unknown object class "</span>).append(object-&gt;classname()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这是这一步的核心代码。可见，hessian支持基本的几种序列化类型,根据不同的对象类型，调用不同的序列化函数。</strong><br>此处关键的就是Object这个类，定义在wrappers.h头文件中，Object是基类，后面派生了几种基本的子类:Binary,Boolean,Date,Double,Integer,Long,Map,String…,各个子类里有关于这种类型的对象的具体序列化和反序列化方法。</p>
<p>回到call()函数，通过：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> raw_reply = con.<span class="constructor">POST(<span class="params">_url</span>, <span class="params">mc</span>, HESSIAN_HTTP_CONTENT_TYPE, HESSIAN_HTTP_USER_AGENT)</span>;</span><br></pre></td></tr></table></figure>
<p>客户端把序列化后的hessian报文通过http发送给服务端，然后等待服务端的应答。</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">string hessian_reply = con.parse_reply(raw_reply);</span><br><span class="line">_bytes_in += hessian_reply.length();</span><br><span class="line">_call_size_map.insert(std::make_pair(<span class="function"><span class="keyword">method</span>, <span class="title">hessian_reply</span>.<span class="title">length</span><span class="params">()</span>));</span></span><br></pre></td></tr></table></figure>

<p>服务端的应答就保存在hessian_reply这个string中，接下来就是反序列化:</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">hessian_input hin(sis)<span class="comment">;</span></span><br><span class="line">hin.start_reply()<span class="comment">;</span></span><br><span class="line"><span class="attribute">result</span> = hin.get_result()<span class="comment">;</span></span><br><span class="line">hin.complete_reply()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>同理，单步跟踪后核心函数式get_result()函数：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">Object* hessian_input<span class="type">::get_result</span>() throw(io_exception) &#123;</span><br><span class="line">  <span class="keyword">return</span> read_object();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object* hessian_input<span class="type">::read_object</span>() throw(io_exception) &#123;</span><br><span class="line">  int <span class="built_in">tag</span> = read();</span><br><span class="line">  <span class="keyword">return</span> read_object(<span class="built_in">tag</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object* hessian_input<span class="type">::read_object</span>(int <span class="built_in">tag</span>) throw(io_exception) &#123;</span><br><span class="line">  switch (<span class="built_in">tag</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'B'</span>: <span class="keyword">return</span> <span class="literal">new</span> Binary(read_bytes(<span class="built_in">tag</span>));</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'T'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'F'</span>: <span class="keyword">return</span> <span class="literal">new</span> <span class="built_in">Boolean</span>(read_boolean(<span class="built_in">tag</span>));</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'d'</span>: <span class="keyword">return</span> <span class="literal">new</span> <span class="built_in">Date</span>(read_date(<span class="built_in">tag</span>));</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'D'</span>: <span class="keyword">return</span> <span class="literal">new</span> Double(read_double(<span class="built_in">tag</span>));</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'f'</span>: <span class="keyword">return</span> <span class="literal">new</span> Fault(read_fault(<span class="built_in">tag</span>));</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'I'</span>: <span class="keyword">return</span> <span class="literal">new</span> <span class="built_in">Integer</span>(read_int(<span class="built_in">tag</span>));</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'V'</span>: <span class="keyword">return</span> <span class="literal">new</span> <span class="built_in">List</span>(read_list(<span class="built_in">tag</span>));</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'L'</span>: <span class="keyword">return</span> <span class="literal">new</span> Long(read_long(<span class="built_in">tag</span>));</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'M'</span>: <span class="keyword">return</span> <span class="literal">new</span> <span class="built_in">Map</span>(read_map(<span class="built_in">tag</span>));</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'N'</span>: <span class="keyword">return</span> <span class="literal">new</span> <span class="built_in">Null</span>();</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'R'</span>: <span class="keyword">return</span> <span class="literal">new</span> Ref(read_ref(<span class="built_in">tag</span>));</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'S'</span>: <span class="keyword">return</span> <span class="literal">new</span> <span class="built_in">String</span>(read_string(<span class="built_in">tag</span>));</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'x'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'X'</span>: <span class="keyword">return</span> <span class="literal">new</span> <span class="built_in">Xml</span>(read_xml(<span class="built_in">tag</span>));</span><br><span class="line">  default:</span><br><span class="line">    throw io_exception(<span class="built_in">string</span>(<span class="string">"hessian_input::readObject(): tag "</span>).append(<span class="number">1</span>, (char) <span class="built_in">tag</span>).append(<span class="string">" cannot be handled"</span>));      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反序列化的原理是根据不同的tag值调用相应的类型的反序列函数。</p>
<h2 id="hessian报文"><a href="#hessian报文" class="headerlink" title="hessian报文"></a>hessian报文</h2><p>上述c++客户端序列化接口函数和其参数的结果如下：<img src="http://o8fj2jbwb.bkt.clouddn.com/hello2.png" alt=""></p>
<p>从服务端返回来的hessian报文如下：<img src="http://o8fj2jbwb.bkt.clouddn.com/serback.png" alt=""></p>
<p>可见，hessian报文有很多不可见的二进制字符！</p>
<h1 id="完了"><a href="#完了" class="headerlink" title="完了"></a>完了</h1><p>上面就把c++版的hessaincpp的编译以及使用，以及源码分析都介绍了一遍，由于我现在是回过头来写这篇博客，会觉得很多地方简单，然后可能会觉得某些步骤或者代码分析不重要，就忽略了一部分。实际过程中，如果你碰到hessian，我的博客仅当参考，还需你自己探索。毕竟“绝知此事要躬行！”O(∩_∩)O</p>
<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a> (<strong>默认</strong>)</p>
</li>
<li><p>email: <a href="mailto:&#x6c;&#105;&#x6e;&#x75;&#x78;&#99;&#111;&#100;&#x65;&#50;&#x6e;&#105;&#x6b;&#x69;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;">&#x6c;&#105;&#x6e;&#x75;&#x78;&#99;&#111;&#100;&#x65;&#50;&#x6e;&#105;&#x6b;&#x69;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;</a></p>
</li>
</ul>
<p>2016-11-22 于杭州<br><em>By  <a href="http://weibo.com/2793607050/profile?topnav=1&wvr=6&is_all=1" target="_blank" rel="noopener">史矛革</a></em></p>
]]></content>
      <categories>
        <category>hessian</category>
      </categories>
      <tags>
        <tag>hessian</tag>
        <tag>c++</tag>
        <tag>ssl</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx 写日志对响应速度的影响探究（一）</title>
    <url>/2017/12/06/influence_of_dumplog_to_performance_of_nginx/</url>
    <content><![CDATA[<h1 id="惯例闲聊"><a href="#惯例闲聊" class="headerlink" title="惯例闲聊"></a>惯例闲聊</h1><p>现在是杭州的冬天，鼻炎让我一直难受，特别不舒服，鼻子快被我拧坏了，最近过的也很糟心，各种烦心事，几乎一周一件烦心事甚至一周好几件烦心事，最近过得感觉很不好！以前我感觉我自己很潇洒，很酷，现在越来越发现我不酷了，连自身形象我都懒得去整理了，胡子一周不想剃，衣服放一周不想洗，头发每天乱糟糟的，几乎每天都不敢去看镜子了。</p>
<p>真的很不喜欢冬天！不喜欢冷！不喜欢浑浑噩噩！不喜欢越来越没激情！</p>
<p>这已经是2017年的最后一个月了，回想年初定下的目标，几乎没有一件事达成或满意，一直想学的茶道一直也没去做，茶具也没买，骑车这件大事也慢慢落下了，身体也慢慢垮了，唯一感觉工作本身成长很大，这样下去不行的！</p>
<p>好了，废话不多说，这篇博文是完完全全的工作内容，所以内容会很技术，很严肃很干货。</p>
<h1 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h1><p>为了精细化提高 nginx(marxxx) 的性能, 现分析写日志对于请求的影响。</p>
<ul>
<li>条件</li>
</ul>
<ol>
<li>日志大小为 500 字节</li>
<li>响应大小  111 字节</li>
<li>除日志外 nginx 服务不进行任何 io 操作，使用 nginx 语法直接返回响应</li>
</ol>
<ul>
<li>变量</li>
</ul>
<ol>
<li>qps服务压力了决定的磁盘承受的写日志的压力</li>
<li>request time分布</li>
<li>nginx log buffer: 分别测试 log buffer 为 4k,  64k, 128k 以及关闭log的情况</li>
</ol>
<h1 id="探究结论"><a href="#探究结论" class="headerlink" title="探究结论"></a>探究结论</h1><a id="more"></a>
<p>1 . 关闭日志与否</p>
<p><strong>开启log的情况下，request time波动明显，也即nginx提供服务的功率不稳定；而关闭日志后，request time波动微小，几乎可以忽略，也即nginx能提供更为稳定的服务，说明写日志操作对nginx的输出功率的稳定性具有关键性影响。因此线上的服务，对于要求较为苛刻的大客户可以考虑关闭日志，提供更为稳定更为高性能的服务。</strong></p>
<p>2 . log buffer的大小</p>
<p><strong>探究过程中发现log buffer 分别为4k、64k、128k下，nginx的性能表现不同，log buffer 为 64k 情况下表现相对更优，这里的表现指qps相对更高，request time相对更低。关于该条结论更为详细的探究将在（二）中描述。</strong></p>
<p><strong>另外，log buffer调大对cpu利用率下降，大约下降 0% ~ 5%。</strong></p>
<p>3 . 磁盘压力</p>
<p><strong>整体来看，记录日志导致的磁盘压力并没有很高，但不同的log buffer磁盘压力不一样。</strong></p>
<h1 id="探究过程"><a href="#探究过程" class="headerlink" title="探究过程"></a>探究过程</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>由于条件的限制，在响应为 111 字节（实际情况为132字节），request time很小，几乎都是0ms、1ms，对后面分析不利，故调整了ngxin.conf的配置，使用连续多跳的机制，比如从 8088 端口，到 8089 再到 8090 再到8091 …最后返回。这样增大了request time的同时避免了其他的任何IO操作。</p>
<p><strong>故下文会出现4k8j，64k8j的字样，代表的意思如下：</strong></p>
<ul>
<li><strong>4K8j: 表示log buffer为 4k，在ngxin内部经过了 8 个端口(8 jump)</strong></li>
<li><strong>64k8j: 表示log buffer为 64k，在nginx内部经过了 8 个端口(8 jump)</strong></li>
<li><strong>128K8j: 表示log buffer为 128k，在ngxin内部经过了 8 个端口(8 jump)</strong></li>
<li><strong>128k2j: 表示log buffer为 128k，在nginx内部经过了 2 个端口(2 jump)</strong></li>
<li><strong>off8j: 表示关闭了log，在nginx内部经过了 8 个端口(8 jump)</strong></li>
<li><strong>off8jvx: 表示关闭日志后，调整了其他变量再次进行研究，简单理解为第几版本</strong></li>
</ul>
<h2 id="探究方法"><a href="#探究方法" class="headerlink" title="探究方法"></a>探究方法</h2><p>1 . 使用小米监控，编写脚本采集不同条件下的指标（精度有限，只做参考）</p>
<ul>
<li>nginx status 开启，编写小米监控脚本收集连接数，请求数等，目标指标是nginx的qps</li>
<li>编写小米监控脚本计算nginx平均每个worker占用的cpu(%)情况</li>
<li>request time的采集使用抽样方式，每分钟取access.log的后1000条日志计算平均request time</li>
</ul>
<p>2 . 搭建nginx，收集压测日志</p>
<ul>
<li>使用wrk压测，结合lua脚本。lua脚本功能是当关闭日志后通过nginx 将request time写到响应头（body 132字节，忽略body发送时间），分析每次请求的响应头过滤request time</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">nohup wrk -c <span class="number">100</span> -t <span class="number">8</span> -d20m http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8088</span> -s <span class="regexp">/disk/</span>ssd1<span class="regexp">/ngx/</span>benchngx_logoff.lua &gt; <span class="regexp">/dev/</span>null &amp; <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用ab压测，排除压测客户端本身带来的影响，比如提供http请求的稳定度</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ab -n <span class="number">5000000</span> -c <span class="number">8</span>  -v <span class="number">3</span>   -k http:<span class="comment">//127.0.0.1:8088/   |grep 'X-Time'  |cut -d ' ' -f 2,3,4  &gt;&gt; off8jv13.a</span></span><br></pre></td></tr></table></figure>

<ul>
<li>分析大量日志，计算指标间关系，绘制关系图。使用到python/redis/highcharts</li>
</ul>
<h2 id="探究过程记录"><a href="#探究过程记录" class="headerlink" title="探究过程记录"></a>探究过程记录</h2><p>1 . <strong>log buffer = 4k &amp;&amp; 8 jump</strong></p>
<ul>
<li><p>小米监控的结果（qps，cpu，request time，磁盘指标）<br><img src="/images/4k8j_falcon.png" alt=""><br><img src="/images/4k8j_falcon_disk.png" alt=""></p>
</li>
<li><p>日志分析<br><img src="/images/4k8j_iruka_a.png" alt=""><br><img src="/images/4k8j_iruka_b.png" alt=""></p>
</li>
</ul>
<p><strong><em>局部放大后：</em></strong><br><img src="/images/4k8j_iruka_bb.png" alt=""><br><img src="/images/4k8j_iruka_c.png" alt=""><br><strong><em>局部放大后：</em></strong><br><img src="/images/4k8j_iruka_cc.png" alt=""></p>
<ul>
<li>初步分析结果：</li>
</ul>
<p>a . 从小米监控来看，压测过程几乎跑满了cpu，平均每个worker的cpu在92%左右，qps在 120.5k 左右，磁盘压力不算大</p>
<p>b . 分析大量日志来看，qps比较稳定，在 120k ~ 125k之间，request time在 12ms ~ 13ms之间，也比较稳定。两者之间的关系，qps随request time增加有所下降</p>
<p>2 . <strong>log buffer = 64k &amp;&amp; 8 jump</strong></p>
<ul>
<li><p>小米监控的结果（qps，cpu，request time，磁盘指标）<br><img src="/images/64k8j_falcon.png" alt=""><br><img src="/images/64k8j_falcon_disk.png" alt=""></p>
</li>
<li><p>日志分析<br><img src="/images/64k8j_iruka_a.png" alt=""><br><img src="/images/64k8j_iruka_b.png" alt=""></p>
</li>
</ul>
<ul>
<li>初步分析结果：</li>
</ul>
<p>a . 从小米监控来看，压测过程ngxin的平均每个worker跑到88%左右的cpu，相较上面log buffer为 4k 的情况有所下降，qps平均为124k，有所上升；磁盘压力不大</p>
<p>b . 分析大量日志来看，qps比较稳定，在 120k ~ 125k之间，request time在 12ms ~ 13ms之间，也比较稳定。两者之间的关系，qps随request time增加有所下降</p>
<p>3 . <strong>log buffer = 128k &amp;&amp; 8 jump</strong></p>
<ul>
<li><p>小米监控的结果（qps，cpu，request time，磁盘指标）<br><img src="/images/128k8j_falcon.png" alt=""><br><img src="/images/128k8j_falcon_disk.png" alt=""></p>
</li>
<li><p>日志分析<br><img src="/images/128k8j_iruka_a.png" alt=""><br><img src="/images/128k8j_iruka_b.png" alt=""></p>
</li>
<li><p>初步分析结果：</p>
</li>
</ul>
<p>a . 从小米监控来看，nginx平均每个worker跑到 87% cpu，qps在 123.6k 左右。磁盘压力不大</p>
<p>b .分析大量日志来看，qps比较稳定，在 120k ~ 130k之间，request time在 12ms ~ 13ms之间，也比较稳定。两者之间的关系，qps随request time增加有所下降</p>
<p>4 . <strong>log buffer = 128k &amp;&amp; 2 jump</strong></p>
<ul>
<li><p>日志分析<br><img src="/images/128k2j_iruka_a.png" alt=""><br><img src="/images/128k2j_iruka_b.png" alt=""></p>
</li>
<li><p>初步分析结果：</p>
</li>
</ul>
<p>a . 分析大量日志来看，qps在 150k  ~ 170k之间，并且qps相对不稳定。request time在 2ms ~ 3ms之间</p>
<p>5 . <strong>log off &amp;&amp; 8 jump</strong><br><img src="/images/off8j_falcon.png" alt=""><br><img src="/images/off8j_falcon_disk.png" alt=""><br><img src="/images/off8j_iruka_a.png" alt=""><br><img src="/images/off8j_iruka_c.png" alt=""><br><img src="/images/off8j_iruka_d.png" alt=""></p>
<ul>
<li>初步分析结果：</li>
</ul>
<p>a . 压测nginx平均每个worker跑满88%左右的cpu，qps在128k左右，是同样条件下qps最高的，磁盘压力很小。</p>
<p>b. 图中可以看到关闭日志后request time相较其他几种情况很平稳，几乎是一条直线的状态</p>
<p>c. 所以可以考虑线上某些要求较为苛刻的客户针对性的关闭日志，提高服务的稳定性</p>
<p>d. request time有周期性（后面有说到）</p>
<p>6 . <strong>汇总来看</strong><br><img src="/images/sum_iruka_a.png" alt=""><br><img src="/images/sum_iruka_b.png" alt=""></p>
<ul>
<li>初步分析结果：</li>
</ul>
<p>a . 从汇总的结果来看，抛开128k2j的那项，其他几个（4k8j,64k8j,128k8j）几乎都是重合状态，说明log buffer的大小对qps的影响不大，同时对request time的影响也不大</p>
<p>b . 128k2j的那项明显qps高出其他几项好多，同时request time低的也很明显</p>
<p>7 . <strong>其他分析</strong><br><img src="/images/iruka_d.png" alt=""><br><img src="/images/iruka_e.png" alt=""><br><img src="/images/iruka_f.png" alt=""></p>
<ul>
<li><p>初步分析结果：</p>
<p>a . request time凸峰的时候，qps凹峰，即request time增加，qps减少</p>
<p>b . log buffer 分别为4k，64k，128k的情况下，<strong>log buffer 为64k的情况下表现最优（原因？将在《二》里详细分析）</strong></p>
</li>
</ul>
<h2 id="探究过程的难点"><a href="#探究过程的难点" class="headerlink" title="探究过程的难点"></a>探究过程的难点</h2><ul>
<li>通过小米监控采集的指标精度很差，而且探究过程中由于小米监控自身的问题，导致很多曲线数据丢失，像类似cpu，磁盘压力等指标只能作为参考</li>
<li>日志的分析相对是比较精确的，但问题是数据量很大，由于qps在十万以上，压测10分钟，日志量可能就有接近10~15G,所以最后分析的样本总大小160G，这是一个比较大的数据量了。但从日志里只能分析得到qps，request time等指标</li>
<li>整个过程很难得出比较明确的结论，由于精度的问题，另外有其他变量的影响，分析得到的结论不会有很巨大的差距，得出很明确的结论。所以最终结论只能参考</li>
<li>当探究的精度更高的时候往往目标指标更容易受到其他变量的影响，要排除这些因素往往要做很多次测试，一次次排除分析，而且不一定找对影响变量，整体来讲，精细化的探究受其他因素影响较为敏感，探究更难</li>
</ul>
<h1 id="意外发现"><a href="#意外发现" class="headerlink" title="意外发现"></a>意外发现</h1><p>关闭或者不关闭日志的情况下，request time以每分钟的周期波动，如下：<br><img src="/images/iruka_zhouqi_a.png" alt=""><br><img src="/images/iruka_zhouqi_b.png" alt=""><br><img src="/images/iruka_zhouqi_c.png" alt=""><br>从上面三福图可以看出，request time成周期性波动，周期为60s。关于这块的深入探究另起篇幅进行研究。</p>
]]></content>
      <categories>
        <category>linux</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>wrk</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx 写⽇志对响应速度的影响探究（二）</title>
    <url>/2018/01/04/influence_of_dumplog_to_performance_of_nginx_2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>问题的提出是为了精细化提高 nginx(marxxx) 的性能，遂分析写日志对于请求的影响，上一篇《<a href="http://rebootcat.com/2017/12/06/influence_of_dumplog_to_performance_of_nginx/" target="_blank" rel="noopener">nginx写日志对于响应速度的影响探究（一）</a>》中其实提出了两个问题还有待研究：</p>
<ul>
<li>log buffer 分别为 4k、64k、128k 不同情况下，相较而言 log buffer 为 64k 时 nginx 性能表现更优，这里的表现指 cpu 压满情况下 qps 更高。so why ?</li>
<li>request time 成周期性波动，周期为 60s，即大概每 60s request time 会出现一个突峰，如下图。so why ？<br><img src="/images/requesttimebodong.png" alt=""></li>
</ul>
<a id="more"></a>

<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>这里的记录将会比较简陋，因为完成之后发现实在没什么更好的干货，不过可以学习下探究的过程方法。</p>
<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><blockquote>
<p>log buffer 分别为 4k、64k、128k 不同情况下，相较而言 log buffer 为 64k 时 nginx 性能表现更优，这里的表现指 cpu 压满情况下 qps 更高。so why ?</p>
</blockquote>
<h3 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h3><p>发现这个问题后，有个直观的感觉就是 nginx 每次根据 log buffer 的大小 dump log，即每次写磁盘的大小分别为 4k、64k、128k，写磁盘的大小较小就会导致写的次数过多，写的大小过大就会导致每次耗时较多，在 dump log 的次数与 dump log 的大小之间需要做一个平衡，故相对来看 64k 时表现较优。</p>
<p>这里有点类似 iostat -x 命令看到的 avgrq-sz，表示设备读写块大小（扇区数）。</p>
<p>那么是不是这样呢？</p>
<h3 id="简单探究"><a href="#简单探究" class="headerlink" title="简单探究"></a>简单探究</h3><p>探究过程略，基本方法就是固定其他条件，改变某一个变量（log buffer 大小），然后分别测试 nginx 性能，收集数据，然后绘制曲线图，进行对比分析。</p>
<ul>
<li><p>log buffer = 4k<br><img src="/images/4k.png" alt=""></p>
</li>
<li><p>log buffer = 32k<br><img src="/images/32k.png" alt=""></p>
</li>
<li><p>log buffer = 64k/128k<br><img src="/images/64_128k.png" alt=""></p>
</li>
</ul>
<p>简单对比了小米监控收集的曲线图，还是能看到 log buffer 从 4k 到 32k，再到 64k/128k ，qps是增加了的。只是在 64k/128k 的时候比较不是很明显。</p>
<h3 id="初步结论"><a href="#初步结论" class="headerlink" title="初步结论"></a>初步结论</h3><p>通过上述对比，<strong>确实发现 log buffer 调整对 nginx 性能有影响，大致为 log buffer 64k 时性能最优！</strong></p>
<h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><blockquote>
<p>request time 成周期性波动，周期为 60s，即大概每 60s request time 会出现一个突峰，如下图。so why ？</p>
</blockquote>
<h3 id="猜想-1"><a href="#猜想-1" class="headerlink" title="猜想"></a>猜想</h3><p>一般周期性波动的可能考虑到周期性的一些命令，比如 crontab 的任务，故可能是由于这些定时脚本执行引发了系统的抖动。</p>
<h3 id="简单探究-1"><a href="#简单探究-1" class="headerlink" title="简单探究"></a>简单探究</h3><p>探究方法很简单，多次测试，对比。测试的时候也是固定其他条件不变，改变某一个变量进行研究。这里的变量可能需要考虑很多，比如最终这次研究考虑到的一些变量有：</p>
<ul>
<li>定时脚本影响</li>
<li>log on / log off 影响</li>
<li>压测客户端的请求稳定度</li>
<li>nginx 一些配置参数，比如 keep_alive影响</li>
<li>不同机器的影响</li>
<li>压测客户端与 nginx 是否位于同一台机器的影响</li>
</ul>
<p>可以看到上面考虑了很多，也是由于探究过程一步步深入，一步步考虑更多的。这里可以对每次探究的变量进行下解释：</p>
<h4 id="定时脚本"><a href="#定时脚本" class="headerlink" title="定时脚本"></a>定时脚本</h4><p>关闭这台机器所有定时任务，对比之前的曲线图。</p>
<h4 id="log-on-log-off"><a href="#log-on-log-off" class="headerlink" title="log on /log off"></a>log on /log off</h4><p>关闭日志与否也可能是导致 request time 周期性突峰的原因，故分别对两种情况进行对比压测。</p>
<h4 id="压测客户端请求稳定度"><a href="#压测客户端请求稳定度" class="headerlink" title="压测客户端请求稳定度"></a>压测客户端请求稳定度</h4><p>压测客户端能不能以均匀的速率稳定发出请求也可能导致 request time 周期性波动，这里的压测客户端先后使用了 wrk 和 ab 进行压测。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nohup wrk -c <span class="number">100</span> -t <span class="number">8</span> -d20m http:<span class="comment">//127.0.0.1:8088 -s /disk/ssd1/ngx/benchngx_logof</span></span><br><span class="line">f.lua &gt; /dev/<span class="literal">null</span> &amp; <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br><span class="line">ab -n <span class="number">5000000</span> -c <span class="number">8</span> -v <span class="number">3</span> -k http:<span class="comment">//127.0.0.1:8088/ |grep 'X-Time' |cut -d ' '</span></span><br><span class="line"> -f <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &gt;&gt; off8jv13.a</span><br></pre></td></tr></table></figure>
<p>其中 wrk -s 参数后面的是 lua 脚本：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Copyright 2017 smaug</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">write</span> = <span class="built_in">io</span>.<span class="built_in">write</span></span><br><span class="line"><span class="keyword">local</span> unique_id = <span class="built_in">tostring</span>( &#123;&#125; ):<span class="built_in">sub</span>(<span class="number">8</span>)</span><br><span class="line">filename = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"/disk/ssd1/ngx/donev2/off8j_%s.a"</span>,unique_id)</span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(filename,<span class="string">"a"</span>)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">output</span>(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = <span class="function"><span class="keyword">function</span><span class="params">(status, headers, body)</span></span></span><br><span class="line">   rtime = headers[<span class="string">"X-RTime"</span>]</span><br><span class="line">   ltime = headers[<span class="string">"X-LTime"</span>]</span><br><span class="line">   <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"[%s] %s\n"</span>,ltime ,rtime))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>每次请求后会执行函数，获取 header 中的某些字段，目的是<strong>在关闭日志后收集request time，由于 response body 很小，body 发送时间几乎可以忽略</strong>。此处 nginx 配置如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8088</span>;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">"hello world xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span>;</span><br><span class="line">        <span class="comment">#proxy_pass http://127.0.0.1:8089;</span></span><br><span class="line">       <span class="comment">#access_log /disk/ssd1/jmh/access.log simple buffer=32k;</span></span><br><span class="line">       <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">       <span class="attribute">error_log</span>  <span class="literal">off</span>;</span><br><span class="line">       <span class="attribute">add_header</span>  X-RTime <span class="variable">$request_time</span>;</span><br><span class="line">       <span class="attribute">add_header</span>  X-LTime <span class="variable">$time_local</span>;</span><br><span class="line">       <span class="attribute">add_header</span>  X-Time <span class="string">'[<span class="variable">$time_local</span>] <span class="variable">$request_time</span>'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后过滤日志文件得到 request time，当然这是关闭日志的情况下，如果没有关闭日志，自然只需要分析 access.log 文件即可。</p>
<p>ab -v 参数可以获取 response header ，使用 linux 管道等命令收集 request time，也是在关闭日志的情况下。</p>
<h4 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep_alive"></a>keep_alive</h4><p>改变这个参数的值，进行对比压测。</p>
<h4 id="不同机器"><a href="#不同机器" class="headerlink" title="不同机器"></a>不同机器</h4><p>request time 波动的情况是否只是出现在这一台机器还是其他机器也会出现，故需要对比其他机器，对其他机器进行压测对比。</p>
<h4 id="压测客户端（wrk-ab）与-nginx-是否位于同一台机器"><a href="#压测客户端（wrk-ab）与-nginx-是否位于同一台机器" class="headerlink" title="压测客户端（wrk/ab）与 nginx 是否位于同一台机器"></a>压测客户端（wrk/ab）与 nginx 是否位于同一台机器</h4><p>压测客户端也是需要需要大量 cpu 资源的，甚至 I/O 资源，如果与 nginx 两者位于同一台机器，是否也可能对 nginx 产生影响呢？故让压测客户端从另外一台机器发起请求，然后对比分析。</p>
<h3 id="初步结论-1"><a href="#初步结论-1" class="headerlink" title="初步结论"></a>初步结论</h3><p><strong>很遗憾，经过上述的探究，没有得出很确切的结论，request time 波动情况一直存在，不过可以注意到的是对不同机器进行压测的时候，我选择了好几台机器，其中包括我自己本地的一台虚拟机，就没有出现 request time 波动的情况，初步可以怀疑是那批机器本身的一些问题，可能是内核方面的问题，因为那批机器内核是经过了裁剪的。但不能确定，依然是模凌两可的结论。</strong></p>
<h2 id="末了"><a href="#末了" class="headerlink" title="末了"></a>末了</h2><p>探究过程是一个比较无聊的过程，改变某个变量，重复的进行研究，想起了高中做的一些化学实验，确实比较无趣。</p>
<p><strong>但是很多问题不可能是暴露在表面的，而且埋的很深，甚至最后都没法找到确切的根源，这些就需要很细心的分析，考虑的也要很周全，要根据当前的情况考虑更多的可能性，要排除一切可能导致的原因。这种分析过程，这种全面考虑问题的能力能得到提高和锻炼！</strong></p>
]]></content>
      <categories>
        <category>linux</category>
        <category>nginx</category>
        <category>lua</category>
      </categories>
      <tags>
        <tag>cpu</tag>
        <tag>nginx</tag>
        <tag>wrk</tag>
        <tag>ab</tag>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU.IOWAIT 偏高问题</title>
    <url>/2017/12/14/instability-of-cpu/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>小米监控发现我自己的一台机器的cpu.iowait偏高，波动很严重。</p>
<p><img src="/images/problem.png" alt=""></p>
<a id="more"></a>
<p>那么是什么导致这个问题的产生呢？下面听我细细道来。</p>
<h1 id="探究过程"><a href="#探究过程" class="headerlink" title="探究过程"></a>探究过程</h1><blockquote>
<p>每当出现一个问题的时候，背后一定存在着因果关系，区别只是背后的因素隐藏的多深！</p>
</blockquote>
<p>这句话可以辩证的看待，不用过分纠结这句话本身，因为任何东西纠结到极致其实都失去了意义，比如普朗克时间内追求因果律就没有意义。</p>
<h2 id="分析途径"><a href="#分析途径" class="headerlink" title="分析途径"></a>分析途径</h2><p>问题出现后需要定位问题来源，离不开各种工具的辅助甚至人肉辅助。目前我手里现有的分析途径如下：</p>
<ul>
<li>小米监控</li>
<li>各种linux命令 &amp;&amp; 各种代码技能</li>
<li><strong>一颗充满兴趣的心</strong>（最重要的东西）</li>
</ul>
<h2 id="初步怀疑"><a href="#初步怀疑" class="headerlink" title="初步怀疑"></a>初步怀疑</h2><p>问题已经比较明确了，看着这么大幅度的波动，我<strong>首先怀疑的是小米监控的agent采集的数据是不是出了问题？</strong></p>
<p>小米监控的agent是每分钟采集一次数据，具体的计算方法应该是分析 <strong><a href="http://man7.org/linux/man-pages/man5/proc.5.html" target="_blank" rel="noopener">/proc/stat</a></strong> 文件。包括top命令也是分析这个文件得出的cpu占用率。那么我自己来分析这个文件试试。核心代码部分如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cmd = <span class="string">'cat /proc/stat |grep "cpu "'</span></span><br><span class="line">ret = os.popen(cmd).readlines()[0]</span><br><span class="line">ret = ret.split()</span><br><span class="line">ret = ret[1:]</span><br><span class="line">total = 0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ret:</span><br><span class="line">  total += int(i)</span><br><span class="line"></span><br><span class="line">user = int(ret[0])</span><br><span class="line">nice = int(ret[1])</span><br><span class="line">system = int(ret[2])</span><br><span class="line">idle = int(ret[3])</span><br><span class="line">iowait = int(ret[4])</span><br><span class="line">irq = int(ret[5])</span><br><span class="line">softirq = int(ret[6])</span><br><span class="line">cpubusy = total - idle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user = float(user / os.sysconf(os.sysconf_names[<span class="string">'SC_CLK_TCK'</span>]))</span><br><span class="line">nice = float(nice / os.sysconf(os.sysconf_names[<span class="string">'SC_CLK_TCK'</span>]))</span><br><span class="line">system = float(system / os.sysconf(os.sysconf_names[<span class="string">'SC_CLK_TCK'</span>]))</span><br><span class="line">idle = float(idle / os.sysconf(os.sysconf_names[<span class="string">'SC_CLK_TCK'</span>]))</span><br><span class="line">iowait = float(iowait / os.sysconf(os.sysconf_names[<span class="string">'SC_CLK_TCK'</span>]))</span><br><span class="line">irq = float(irq / os.sysconf(os.sysconf_names[<span class="string">'SC_CLK_TCK'</span>]))</span><br><span class="line">softirq = float(softirq / os.sysconf(os.sysconf_names[<span class="string">'SC_CLK_TCK'</span>]))</span><br><span class="line">cpubusy = float(cpubusy / os.sysconf(os.sysconf_names[<span class="string">'SC_CLK_TCK'</span>]))</span><br><span class="line"></span><br><span class="line">timestamp = int(time.time())</span><br><span class="line"></span><br><span class="line">STORE[<span class="string">'user'</span>] = user</span><br><span class="line">STORE[<span class="string">'nice'</span>] = nice</span><br><span class="line">STORE[<span class="string">'system'</span>] = system</span><br><span class="line">STORE[<span class="string">'idle'</span>] = idle</span><br><span class="line">STORE[<span class="string">'iowait'</span>] = iowait</span><br><span class="line">STORE[<span class="string">'irq'</span>] = irq</span><br><span class="line">STORE[<span class="string">'softirq'</span>] = softirq</span><br><span class="line">STORE[<span class="string">'cpubusy'</span>] = cpubusy</span><br><span class="line"></span><br><span class="line">STORE[<span class="string">'timestamp'</span>] = timestamp</span><br><span class="line">with open(CPUSTORE,<span class="string">'w'</span>) as fout:</span><br><span class="line">  fout.write(json.dumps(STORE))</span><br></pre></td></tr></table></figure>

<p>采集到的数据先暂存到redis:</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">t1 = <span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'timestamp'</span>)</span><br><span class="line">t1 = int(t1)</span><br><span class="line">l1 = <span class="built_in">time</span>.localtime(t1)</span><br><span class="line">d1 = <span class="built_in">time</span>.strftime(<span class="string">'%d%H%M%S'</span>, l1)</span><br><span class="line">hostname = os.uname()[<span class="number">1</span>]</span><br><span class="line">skey = <span class="string">'scpu_%s'</span> % hostname</span><br><span class="line">hkey = <span class="string">'cpu_%s_%s'</span> % (hostname,d1)</span><br><span class="line">r.sadd(skey,hkey)</span><br><span class="line">r.hset(hkey,<span class="string">'timestamp'</span>,d1)</span><br><span class="line">r.hset(hkey,<span class="string">'cpubusy'</span>,<span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'cpubusy'</span>))</span><br><span class="line">r.hset(hkey,<span class="string">'user'</span>,<span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'user'</span>))</span><br><span class="line">r.hset(hkey,<span class="string">'nice'</span>,<span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'nice'</span>))</span><br><span class="line">r.hset(hkey,<span class="string">'system'</span>,<span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'system'</span>))</span><br><span class="line">r.hset(hkey,<span class="string">'idle'</span>,<span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'idle'</span>))</span><br><span class="line">r.hset(hkey,<span class="string">'iowait'</span>,<span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'iowait'</span>))</span><br><span class="line">r.hset(hkey,<span class="string">'irq'</span>,<span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'irq'</span>))</span><br><span class="line">r.hset(hkey,<span class="string">'softirq'</span>,<span class="built_in">result</span>.<span class="built_in">get</span>(<span class="string">'softirq'</span>))</span><br><span class="line"><span class="comment">#每隔5s采集一次</span></span><br><span class="line"><span class="built_in">time</span>.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>所以最终redis里面的数据如下所示：<img src="/images/rediscpubusy.png" alt=""><br>有了数据，现在就缺一个前端的展示，很简单，<a href="https://www.hcharts.cn/" target="_blank" rel="noopener">highcharts</a>用起来，最终前端展示得到的曲线如下图：<img src="/images/p1.png" alt=""></p>
<p>可以看到这台机器的cpu.iowait确实波动很厉害，说明小米监控的agent采集到的数据是准确的。</p>
<p>那么：</p>
<ul>
<li>什么是cpu.iowait呢？</li>
<li>cpu.iowait过高是否说明了系统存在I/O问题？</li>
<li>是什么导致了cpu.iowait这么高？</li>
</ul>
<h2 id="iowait深入探究"><a href="#iowait深入探究" class="headerlink" title="iowait深入探究"></a>iowait深入探究</h2><p>%iowait表示什么？其实我自己也是一知半解，google了一番，找到讲的比较透彻的一篇文章：<a href="http://linuxperf.com/?p=33" target="_blank" rel="noopener">理解 %IOWAIT (%WIO)</a>，文中核心的两段话是：</p>
<blockquote>
<p>我们不妨采纳Linux的措辞，%iowait 表示在一个采样周期内有百分之几的时间属于以下情况：<strong>CPU空闲、并且有仍未完成的I/O请求。</strong></p>
</blockquote>
<blockquote>
<p>对 %iowait 常见的误解有两个：一是误以为 %iowait 表示CPU不能工作的时间，二是误以为 %iowait 表示I/O有瓶颈。</p>
</blockquote>
<p>看来%iowait偏高不能说明什么问题。根据定义，它需要同时满足<strong>CPU空闲和有仍未完成的I/O请求</strong>这两个条件，说明CPU其实有空闲的，而且空闲率很高，且落在CPU空闲状态的I/O很多，才导致iowait%偏高。</p>
<h3 id="CPU不能工作？"><a href="#CPU不能工作？" class="headerlink" title="CPU不能工作？"></a>CPU不能工作？</h3><p>为了证明CPU确实是有空闲的，仍然能进行工作，那么如果我把CPU压满，CPU没有了空闲，iowait%理应很低或者波动很小。所以简单写了一个cpu密集型的任务：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing import Pool</span><br><span class="line"></span><br><span class="line">def <span class="builtin-name">run</span>(num):</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    num += 1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"> <span class="built_in"> pool </span>= Pool(6)</span><br><span class="line">  pool.map(run,range(6))</span><br><span class="line">  pool.close()</span><br><span class="line">  pool.join()</span><br></pre></td></tr></table></figure>
<p>没错，就是这么简单！！</p>
<p>为了进行对比，故采取的方式为跑压力一段时间，然后撤掉压力再收集一段时间，最后的曲线图如下：<br><img src="/images/irukayali1.png" alt=""><br>局部放大之后：<br><img src="/images/irukayali2.png" alt=""></p>
<p>从这两幅曲线图可以很明显的看到cpu.busy压到了 70 ~ 90 ，波动范围变小了很多，同时cpu.iowait波动范围也很小了，对比撤掉压力之后的，可以说差别很大。从这里也证明了之前的猜想，<strong>CPU确实是有空闲的，也确实能进行工作，造成cpu.busy波动严重的指标就是cpu.iowait</strong>。那么是什么导致了cpu.iowait偏高，I/O是不是到了瓶颈呢？</p>
<h3 id="I-O存在瓶颈？"><a href="#I-O存在瓶颈？" class="headerlink" title="I/O存在瓶颈？"></a>I/O存在瓶颈？</h3><p>要分析I/O是不是存在瓶颈，必然要借助一些磁盘、I/O性能分析工具，通常分析磁盘性能的工具有iostat,sar等，分析I/O情况的有iotop等，同时结合小米监控的数据进行分析。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>xxx<span class="number">-008</span> ~]# iostat  -xk <span class="number">2</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">           <span class="number">6.77</span>    <span class="number">0.00</span>    <span class="number">3.88</span>    <span class="number">4.31</span>    <span class="number">0.00</span>   <span class="number">85.05</span></span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await  svctm  %util</span><br><span class="line">sda               <span class="number">0.02</span>    <span class="number">10.39</span>  <span class="number">254.22</span>  <span class="number">104.63</span> <span class="number">12579.25</span>  <span class="number">5175.08</span>    <span class="number">98.95</span>     <span class="number">0.44</span>    <span class="number">1.21</span>   <span class="number">0.50</span>  <span class="number">17.79</span></span><br><span class="line">sdb               <span class="number">0.00</span>     <span class="number">5.04</span>   <span class="number">23.05</span>   <span class="number">23.75</span>  <span class="number">1375.87</span>  <span class="number">1809.86</span>   <span class="number">136.14</span>     <span class="number">0.34</span>    <span class="number">7.28</span>   <span class="number">5.69</span>  <span class="number">26.63</span></span><br><span class="line">sdc               <span class="number">0.00</span>     <span class="number">4.66</span>   <span class="number">23.00</span>   <span class="number">24.04</span>  <span class="number">1372.72</span>  <span class="number">1796.91</span>   <span class="number">134.77</span>     <span class="number">0.35</span>    <span class="number">7.41</span>   <span class="number">5.67</span>  <span class="number">26.67</span></span><br><span class="line">sdd               <span class="number">0.00</span>     <span class="number">6.23</span>   <span class="number">22.83</span>   <span class="number">18.82</span>  <span class="number">1356.25</span>  <span class="number">1697.11</span>   <span class="number">146.61</span>     <span class="number">0.39</span>    <span class="number">9.42</span>   <span class="number">6.17</span>  <span class="number">25.71</span></span><br><span class="line">sde               <span class="number">0.00</span>     <span class="number">7.01</span>   <span class="number">20.54</span>   <span class="number">19.57</span>  <span class="number">1227.02</span>  <span class="number">1724.81</span>   <span class="number">147.18</span>     <span class="number">0.10</span>    <span class="number">2.45</span>   <span class="number">8.01</span>  <span class="number">32.14</span></span><br></pre></td></tr></table></figure>
<p>关于iostat的各项参数解释如下：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">rrqm</span>/<span class="selector-tag">s</span>:  	每秒进行 <span class="selector-tag">merge</span> 的读操作数目。即 <span class="selector-tag">delta</span>(rmerge)/<span class="selector-tag">s</span></span><br><span class="line"><span class="selector-tag">wrqm</span>/<span class="selector-tag">s</span>:		每秒进行 <span class="selector-tag">merge</span> 的写操作数目。即 <span class="selector-tag">delta</span>(wmerge)/<span class="selector-tag">s</span></span><br><span class="line"><span class="selector-tag">r</span>/<span class="selector-tag">s</span>:		每秒完成的读 <span class="selector-tag">I</span>/<span class="selector-tag">O</span> 设备次数。即 <span class="selector-tag">delta</span>(rio)/<span class="selector-tag">s</span></span><br><span class="line"><span class="selector-tag">w</span>/<span class="selector-tag">s</span>:		每秒完成的写 <span class="selector-tag">I</span>/<span class="selector-tag">O</span> 设备次数。即 <span class="selector-tag">delta</span>(wio)/<span class="selector-tag">s</span></span><br><span class="line"><span class="selector-tag">rsec</span>/<span class="selector-tag">s</span>:		每秒读扇区数。即 <span class="selector-tag">delta</span>(rsect)/<span class="selector-tag">s</span></span><br><span class="line"><span class="selector-tag">wsec</span>/<span class="selector-tag">s</span>:		每秒写扇区数。即 <span class="selector-tag">delta</span>(wsect)/<span class="selector-tag">s</span></span><br><span class="line"><span class="selector-tag">rkB</span>/<span class="selector-tag">s</span>:		每秒读<span class="selector-tag">K</span>字节数。是 <span class="selector-tag">rsect</span>/<span class="selector-tag">s</span> 的一半，因为每扇区大小为<span class="selector-tag">512</span>字节。(需要计算)</span><br><span class="line"><span class="selector-tag">wkB</span>/<span class="selector-tag">s</span>:		每秒写<span class="selector-tag">K</span>字节数。是 <span class="selector-tag">wsect</span>/<span class="selector-tag">s</span> 的一半。(需要计算)</span><br><span class="line"><span class="selector-tag">avgrq-sz</span>:	平均每次设备<span class="selector-tag">I</span>/<span class="selector-tag">O</span>操作的数据大小 (扇区)。<span class="selector-tag">delta</span>(rsect+wsect)/<span class="selector-tag">delta</span>(rio+wio)</span><br><span class="line"><span class="selector-tag">avgqu-sz</span>:	平均<span class="selector-tag">I</span>/<span class="selector-tag">O</span>队列长度。即 <span class="selector-tag">delta</span>(aveq)/<span class="selector-tag">s</span>/<span class="selector-tag">1000</span> (因为aveq的单位为毫秒)。</span><br><span class="line"><span class="selector-tag">await</span>:		平均每次设备<span class="selector-tag">I</span>/<span class="selector-tag">O</span>操作的等待时间 (毫秒)。即 <span class="selector-tag">delta</span>(ruse+wuse)/<span class="selector-tag">delta</span>(rio+wio)</span><br><span class="line"><span class="selector-tag">svctm</span>:		平均每次设备<span class="selector-tag">I</span>/<span class="selector-tag">O</span>操作的服务时间 (毫秒)。即 <span class="selector-tag">delta</span>(use)/<span class="selector-tag">delta</span>(rio+wio)</span><br><span class="line">%<span class="selector-tag">util</span>:		一秒中有百分之多少的时间用于 <span class="selector-tag">I</span>/<span class="selector-tag">O</span> 操作，或者说一秒中有多少时间 <span class="selector-tag">I</span>/<span class="selector-tag">O</span> 队列是非空的。即 <span class="selector-tag">delta</span>(use)/<span class="selector-tag">s</span>/<span class="selector-tag">1000</span> (因为use的单位为毫秒)</span><br></pre></td></tr></table></figure>

<p>其中重点需要关注的是<strong>avgqu-sz、await、svctm、util</strong>这四个指标，这里推荐可以看一下这篇文章<a href="http://linuxperf.com/?p=156" target="_blank" rel="noopener">容易被误读的IOSTAT</a>，里面提到util和await两个指标要辩证的看待，并不绝对。对于util，由于当今世界的ssd已经具有较高的并行速度，即便util达到了100%也并不能证明磁盘利用率很高，await这个指标也没有较为标准的衡量。<strong>但是，我们可以借此来分析，作为参考</strong>，这是可以的。</p>
<p>同时，查看小米监控关于磁盘的各项数据(主要是disk.io.avgqu-sz、disk.io.util、disk.io.svctm、disk.io.await)：<br><img src="/images/opendisk.png" alt=""></p>
<p>上图可以看到这几个指标波动很大，disk.io.util波动幅度很大很严重；disk.io.await最大值竟然达到了1.252k；disk.io.svctm最大值竟然飙到了192.6；同时disk.io.avgqu-sz也波动，该指标是I/O量的衡量。<strong>猜测这台机器的SSD磁盘确实可能存在I/O性能问题。</strong></p>
<p>那么怎么验证呢？</p>
<h2 id="Find-The-Murderer"><a href="#Find-The-Murderer" class="headerlink" title="Find The Murderer"></a>Find The Murderer</h2><blockquote>
<p>一定要找到凶手！  《致命ID》</p>
</blockquote>
<p>上面的过程可谓拨开云雾见青天，经过一步一步的分析探究，最终得到了猜想：</p>
<blockquote>
<p><strong>猜测这台机器的SSD磁盘确实可能存在I/O性能问题。</strong></p>
</blockquote>
<p>那么怎么来验证呢？很简单，找到造成这些I/O的凶手就行！怎么找，过程中我先后使用了两种方法。</p>
<h3 id="Process-Status-D"><a href="#Process-Status-D" class="headerlink" title="Process  Status D"></a>Process  Status D</h3><p>ps 命令可以查看有关进程的详细信息，比如状态码，关于进程状态码的解释如下：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">PROCESS STATE CODES</span><br><span class="line">       D   uninterruptible sleep (usually IO)</span><br><span class="line">       R   runnable (<span class="keyword">on</span> <span class="title">run</span> <span class="title">queue</span>)</span><br><span class="line">       S   sleeping</span><br><span class="line">       T   traced <span class="keyword">or</span> stopped</span><br><span class="line">       Z   <span class="keyword">a</span> defunct (<span class="string">"zombie"</span>) <span class="built_in">process</span></span><br><span class="line"></span><br><span class="line">       For BSD formats <span class="keyword">and</span> when <span class="keyword">the</span> <span class="string">"stat"</span> keyword is used, additional letters may be displayed:</span><br><span class="line">       W   has no resident pages</span><br><span class="line">       &lt;   high-priority <span class="built_in">process</span></span><br><span class="line">       N   low-priority task</span><br><span class="line">       L   has pages locked <span class="keyword">into</span> memory (<span class="keyword">for</span> real-<span class="built_in">time</span> <span class="keyword">and</span> custom IO)</span><br></pre></td></tr></table></figure>
<p>其中重点关注的状态码为<strong>D</strong>，它表示不可中断的休眠状态，通常表示I/O操作。这就很简单了，要找到进行I/O操作的进程，写个脚本抓一下：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line">def run():</span><br><span class="line">  <span class="built_in">result</span> = []</span><br><span class="line">  timestamp = <span class="built_in">time</span>.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, <span class="built_in">time</span>.localtime(<span class="built_in">time</span>.<span class="built_in">time</span>()))</span><br><span class="line">  cmd = <span class="string">'ps auxf'</span></span><br><span class="line">  ret = os.popen(cmd).readlines()</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> ret:</span><br><span class="line">    <span class="keyword">item</span> = i.<span class="built_in">split</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="keyword">item</span>) &gt; <span class="number">7</span>:</span><br><span class="line">      <span class="keyword">item</span> = <span class="keyword">item</span>[<span class="number">7</span>]</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">item</span> == <span class="string">'D'</span>:</span><br><span class="line">        <span class="built_in">result</span>.append(i)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">result</span>:</span><br><span class="line">    <span class="built_in">process</span> = <span class="string">'%s %s'</span> % ( timestamp,r[:<span class="number">-1</span>])</span><br><span class="line">    print <span class="built_in">process</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">result</span>:</span><br><span class="line">    print <span class="string">'\n'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  <span class="keyword">while</span> True:</span><br><span class="line">    run()</span><br><span class="line">    <span class="built_in">time</span>.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>
<p>最终得到的结果如下：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">378315</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">27</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">5</span>:<span class="number">18</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">378337</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">27</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">7</span>:<span class="number">34</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">378339</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">27</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">7</span>:<span class="number">36</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">378340</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">27</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">7</span>:<span class="number">37</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">378343</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">27</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">7</span>:<span class="number">40</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">378344</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">27</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">7</span>:<span class="number">41</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">382918</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">31</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">3</span>:<span class="number">1</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">383821</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">31</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">6</span>:<span class="number">8</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384627</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">3</span>:<span class="number">2</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384638</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">3</span>:<span class="number">3</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384640</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">0</span>:<span class="number">0</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384642</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">4</span>:<span class="number">0</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384643</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">4</span>:<span class="number">1</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384644</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">4</span>:<span class="number">3</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384645</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">4</span>:<span class="number">4</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384654</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">2</span>:<span class="number">10</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384655</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">2</span>:<span class="number">11</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384656</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">2</span>:<span class="number">12</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384659</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">5</span>:<span class="number">1</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384660</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">5</span>:<span class="number">2</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384661</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">5</span>:<span class="number">3</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384662</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">5</span>:<span class="number">4</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">384663</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">32</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">5</span>:<span class="number">5</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">393220</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">36</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">3</span>:<span class="number">4</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> root      <span class="number">393222</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        D    <span class="number">10</span>:<span class="number">36</span>   <span class="number">0</span>:<span class="number">00</span>  \_ [kworker/<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> nobody   <span class="number">2646439</span>  <span class="number">2.5</span>  <span class="number">1.1</span> <span class="number">2626256</span> <span class="number">191388</span> ?      D    Dec04 <span class="number">369</span>:<span class="number">05</span>      \_ nginx: worker process</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> nobody   <span class="number">2646440</span>  <span class="number">2.9</span>  <span class="number">1.1</span> <span class="number">2029968</span> <span class="number">185368</span> ?      D    Dec04 <span class="number">422</span>:<span class="number">39</span>      \_ nginx: worker process</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> nobody   <span class="number">2646441</span>  <span class="number">2.5</span>  <span class="number">1.2</span> <span class="number">3371008</span> <span class="number">208164</span> ?      D    Dec04 <span class="number">363</span>:<span class="number">58</span>      \_ nginx: worker process</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> nobody   <span class="number">2646442</span>  <span class="number">3.4</span>  <span class="number">1.1</span> <span class="number">2337132</span> <span class="number">188544</span> ?      D    Dec04 <span class="number">490</span>:<span class="number">30</span>      \_ nginx: worker process</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> nobody   <span class="number">2646443</span>  <span class="number">2.5</span>  <span class="number">1.1</span> <span class="number">2646092</span> <span class="number">195748</span> ?      D    Dec04 <span class="number">371</span>:<span class="number">57</span>      \_ nginx: worker process</span><br><span class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">25</span> nobody   <span class="number">2646445</span>  <span class="number">4.6</span>  <span class="number">1.1</span> <span class="number">2576596</span> <span class="number">195664</span> ?      D    Dec04 <span class="number">662</span>:<span class="number">33</span>      \_ nginx: worker process</span><br></pre></td></tr></table></figure>

<p>这里发现有nginx进程，这个并不奇怪，但是也有大量的kworker进程，一脸懵逼！</p>
<h3 id="使用iotop"><a href="#使用iotop" class="headerlink" title="使用iotop"></a>使用iotop</h3><p>这台机器没有这个工具，本地下载了iotop的源码包后传上去，运行抛错：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Could <span class="keyword">not</span> <span class="builtin-name">run</span> iotop as some of the requirements are <span class="keyword">not</span> met:</span><br><span class="line">- Linux &gt;= 2.6.20 with</span><br><span class="line">  - I/O<span class="built_in"> accounting </span>support (CONFIG_TASKSTATS, CONFIG_TASK_DELAY_ACCT, CONFIG_TASK_IO_ACCOUNTING)</span><br></pre></td></tr></table></figure>
<p>错误的原因很明显，内核版本不对，因为这台机器是裁剪了linux内核并重新进行了命名，那么怎么办？</p>
<p>也很简单，修改iotop/data.py，注释掉下面这段代码就行，骗一下iotop:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">'''</span><br><span class="line">if not ioaccounting or not vm<span class="emphasis">_event_</span>counters:</span><br><span class="line"><span class="code">    print('Could not run iotop as some of the requirements are not met:')</span></span><br><span class="line"><span class="code">    print('- Linux &gt;= 2.6.20 with')</span></span><br><span class="line"><span class="code">    if not ioaccounting:</span></span><br><span class="line"><span class="code">        print('  - I/O accounting support ' \</span></span><br><span class="line"><span class="code">          '(CONFIG_TASKSTATS, CONFIG_TASK_DELAY_ACCT, ' \</span></span><br><span class="line"><span class="code">          'CONFIG_TASK_IO_ACCOUNTING)')</span></span><br><span class="line"><span class="code">    if not vm_event_counters:</span></span><br><span class="line"><span class="code">        print('  - VM event counters (CONFIG_VM_EVENT_COUNTERS)')</span></span><br><span class="line"><span class="code">    sys.exit(1)</span></span><br><span class="line">'''</span><br></pre></td></tr></table></figure>
<p>iotop命令的使用很简单，我常用命令：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> iotop.<span class="keyword">py</span> -<span class="keyword">o</span></span><br></pre></td></tr></table></figure>
<p> <strong>-o</strong>参数表示：only show processes or threads actually doing I/O。</p>
<p> <strong>在寻找进行I/O操作的进程的同时，我同时也打开了iostat命令，重点关心%iowait，看当有I/O操作的时候%iowait是不是变高了，两个命令均是动态运行，所以能够抓到同时产生的现象</strong>：<br> <img src="/images/iotop_iostat.png" alt=""></p>
<p>如上图所示，屏幕左右两边是同时产生的结果，左边iotop抓到了产生大量I/O操作的进程，同时屏幕右半边最下面iostat命令输出%iowait从一个很低的值 0.25 飙升到了 51.71，同时注意avgqu-sz、await、svctm三个指标，三个指标均出现了大幅度的增加。从这里就可以肯定的说明<strong>系统I/O确实存在问题，I/O操作量较大的进程也找到了。</strong> </p>
<p> 这里也出现了大量的kworker进程，那么到底kworker是什么？谷歌了一番：</p>
<ul>
<li><a href="https://askubuntu.com/a/421916" target="_blank" rel="noopener">what is kworker</a></li>
</ul>
<p>简而言之，kworker进程是内核在做一些工作，比如系统调用等等。这里的kworker伴随着X进程大量出现，可以猜测是bear进程进行的一些系统调用。</p>
<p>到这里，其实已经可以得出结论了。</p>
<h1 id="最终结论"><a href="#最终结论" class="headerlink" title="最终结论"></a>最终结论</h1><p>经过上述的探究，可以得到如下的结论：</p>
<p><strong>系统存在I/O瓶颈，这台机器的SSD系统盘有性能退化问题。</strong></p>
<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>整个探究过程经过了大概3天左右的时间，相对来说还是有点复杂，有些时候信息太多也不是一件好事，因为太多的信息反而会让你忽视掉一些东西，我说的是小米监控上的数据，小米监控上的指标太多了，而且精度也不算很高。探究问题的过程就是慢慢的把复杂的繁杂的信息简化剥离成清晰明了的东西。没错！</p>
]]></content>
      <categories>
        <category>linux</category>
        <category>python</category>
        <category>open-falcon</category>
      </categories>
      <tags>
        <tag>cpu</tag>
        <tag>iowait</tag>
        <tag>iotop</tag>
        <tag>iostat</tag>
        <tag>open-falcon</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈几种区块链网络攻击以及防御方案之51&amp;#37攻击</title>
    <url>/2020/04/11/network_attack_of_blockchain_51_attack/</url>
    <content><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。</p>
<p>本文就谈一下目前几种区块链网络攻击，以及其防御方案。</p>
<p><strong>本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨</strong>。</p>
<p>同系列：</p>
<ul>
<li><a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之51%攻击</a></li>
<li><a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></li>
<li><a href="http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之女巫攻击</a> </li>
<li><a href="http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</a> </li>
</ul>
<h1 id="51-攻击"><a href="#51-攻击" class="headerlink" title="51%攻击"></a>51%攻击</h1><p>在了解什么是 51%攻击前，先简单科普下区块链的几个概念，这里主要以比特币为例作说明。</p>
<h2 id="什么是挖矿？"><a href="#什么是挖矿？" class="headerlink" title="什么是挖矿？"></a>什么是挖矿？</h2><p>其实挖矿这个词描述得有点太过于形象了，以至于弄得反而很生涩。当然区块链世界里还有很多玩概念的东西，背后道理其实反而没那么复杂。</p>
<p>在比特币网络里，大家共同在维护一张账目表，参与记账的节点可以称之为矿工，其中矿工需要做的事情就是拼命竞争记账的权利，这个竞争记账权的过程可以称之为挖矿，当一个节点得到这个记账权之后，可以描述为这个节点挖到矿了。那么节点为什么会拼命的竞争这个记账权呢？因为比特币会对挖到矿的节点有奖励。这个奖励是基于区块高度的，最开始是每个区块奖励 50btc，每产生 210000 个区块为一个减半间隔，减半间隔之后奖励会减半。比如目前（2020.04）区块奖励是 12.5btc。</p>
<p>上面这段话里面有两个点需要解释：</p>
<ol>
<li><strong>为什么节点要竞争这个记账权</strong>？</li>
<li><strong>区块高度又是什么</strong>？</li>
</ol>
<p>针对第一个问题，如果用比较白话的方式讲的话就是，在分布式去信任的系统中，由于有激励的存在，大家都想拿到这个记账权，但是这个记账权在同一时刻（这里用词不一定表示某一刻，更多的形容相对的同一时刻）只允许其中一个节点拿到，并且由这个节点对交易进行记录。这样才能保证这张账本是唯一的，大家看到的是一样的账本。不然大家都来记账的话，这张账本就乱了，这就是称之为 ”共识“ 的由来。</p>
<p>针对第二个问题，很好理解，区块高度或者说时钟高度，其实是用来描述一个区块的序号的，从创世区块 0 开始依次递增。不用过分纠结，本身是一个很简单的东西，或者叫区块序号更容易理解【手动滑稽】,可以看一下下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/1.png" alt=""></p>
<a id="more"></a>
<p>我们打开 <a href="https://btc.com/" target="_blank" rel="noopener">BTC.com</a>, 可以看到比特币网络的一些信息，比如区块高度，目前最新的已经到了 625408，区块奖励是 12.57869736btc。我们选择一个区块高度（比如 625400), 可以看到这个区块的信息：<br><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/2.png" alt=""></p>
<p>可以看到这个区块高度是 625400, 这个区块里有 243 笔交易，确认数是 9等。这里需要重点关注一下 <strong>确认数</strong> 这个概念，后面会用到这个概念。</p>
<h2 id="共识"><a href="#共识" class="headerlink" title="共识"></a>共识</h2><p>上面提到比特币网络里参与记账的节点竞争记账权的过程称为挖矿，那么除了上面抛出来的两个问题之外，还有一个问题没有解决。</p>
<p>那就是<strong>节点通过什么方式竞争，怎么竞争</strong>？</p>
<p>竞争的方式就称之为共识，描述分布式去中心化的系统中大家通过共识算法达成统一某个行为或是认知的这种行为，即大家达成了共识，本次由 A 节点进行记账，下次由 B 节点进行记账。</p>
<p>共识算法应该能保证大家能在一定时间内形成共识，同时兼具安全性以及公平性。这样的话参与记账的节点才能有机会获得奖励，才能鼓励大家参与这个网络。</p>
<p>对于比特币来说，采用的是 POW 作为共识算法，即 Proof Of Work（工作量证明）。工作量证明算法是一种应对拒绝服务攻击和其他服务滥用的经济对策。它要求发起者进行一定量的耗时适当的复杂运算，并且这个结果能够快速被其他节点进行验证。</p>
<p>比特币节点需要计算一个 hash，具体过程是对一个随机数加上交易数据做 hash，然后穷举这个随机数，使得 hash 之后的值能满足一定的条件，比如前缀是 ‘0000’。谁先计算出来，谁就在本次记账权的竞争中胜出，然后对交易打包，广播区块，获得区块奖励。显然这里的穷举需要耗费大量的算力，并且计算满足条件的  hash 值不是一件容易的事，基本上可以保证很难有在同一时刻（相对同一时刻）两个或者多个节点都找到了这个满足条件的 hash 值，这也就保证了共识的稳定性。</p>
<p>到这里基本上可以明白一个道理，<strong>谁拥有越多的算力，谁得到这个记账权的概率就越大，获得的奖励就会越多</strong>。</p>
<h2 id="最长链原则"><a href="#最长链原则" class="headerlink" title="最长链原则"></a>最长链原则</h2><p>区块链世界中有很多概念还是很不好理解的，慢慢来，比如这个最长链原则。</p>
<p>在分布式去中心化的系统中，由于网络传输的延迟或者网络故障等不可预知的一些因素，会导致大家收到的交易或者数据是不一致的。在几轮记账之后，势必会出现一些节点看到的区块链和其他节点看到的区块链不一致。</p>
<p>由于大家看到的区块链不一致，也就是有长有短的区块链。比特币规定任何矿工在看到更长的区块链的时候，应该立即停止短的区块链上的挖矿，大家共同围绕这最长的这条链进行挖矿。</p>
<p>如果不了解区块链原理的同学可能会一头雾水，是的，这里的概念还是比较难理解的。下面举一个例子作为说明：</p>
<p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/3.png" alt=""></p>
<p>上图可以看到在区块2 之后分叉了，变成了两条链，区块链网络中的一部分节点看到的链是上面这条区块链，另外一部分看到的是下面这条区块链。</p>
<p><strong>矿工在挖矿的时候，或者说节点在做记账权竞争的时候，需要计算 hash，这里会用到最后一个区块的信息，当挖到区块的时候，新产生的区块里会记录上一个区块的一些信息，这样就把整个区块就串起来了，形成一条链</strong>。</p>
<p>假设 A 节点看到的是上面一条链，并且基于这条链进行挖矿，在挖矿的过程中收到了下面一条链的区块7 的数据包，校验发现这个区块的高度相比自己的区块6’ 更高，也就是说收到了一条新的更长的区块链，那么诚实的矿工应该马上停止正在进行的基于区块6‘ 的挖矿，转而基于区块7 进行挖矿。一定时间之后上面这条链就废弃了，网络中没有任何节点会保存这条链的信息，大家看到的都是一条最长的区块链。</p>
<p>设想一下，如果 A 节点仍然基于区块6’ 进行挖矿，那么即便挖到了区块，收到的奖励最后也会无效。</p>
<p>这里可能会有人有疑惑，为什么要制定这个最长链原则？大家为什么又要遵守这个规则？从安全角度讲，最长链原则更安全，更难推翻重写；从其他角度讲，这个规则就是区块链世界里的公理，而公理就是指对一些基本的假定，比特币就是这么规定的，不用过分纠结。</p>
<p>细心的同学可能会注意到上面的一个问题，A 节点放弃自己的链，那么这条链从区块3‘ 开始到区块6’ 里面的数据是不是都无效了？里面的交易呢？</p>
<p><strong>答案是的，里面的交易都无效了，因为一个区块是对一堆交易的打包，而对于同一笔交易来说，转账发起方会把这笔交易广播给所有人，也就是对于一笔交易来说，每个矿工都可能会收到这条交易并且放到自己的交易池。那么针对作废的区块3‘ 到区块6’ 里面的交易，虽然在这条链上无效了，但是这些交易也会被其他节点看到，说不定已经被其他节点挖到区块并且记录到下面这条区块链里了</strong>。所以针对某笔交易来说，并没有丢失。</p>
<h2 id="何为51-攻击"><a href="#何为51-攻击" class="headerlink" title="何为51%攻击"></a>何为51%攻击</h2><p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/4.png" alt=""><br>在通过上述文章的讲解之后，明白了 ”挖矿“ 的概念，”共识“ 的概念以及 ”最长链原则“ 的概念。接下来可以正式开始介绍 51% 攻击了。</p>
<p>51% 攻击是指如果攻击者拥有全网 51% 的算力，那么他就能够利用算力优势搞一些动作。<strong>这里的 51% 是一个概称，实际上运气好的话可能不需要这么多的算力就能发动 51%攻击，比如 45%算力就有成功的可能性</strong>。</p>
<p>那么我们来探讨下攻击者会利用 51%攻击做什么事？</p>
<h3 id="双花攻击或者做空比特币"><a href="#双花攻击或者做空比特币" class="headerlink" title="双花攻击或者做空比特币"></a>双花攻击或者做空比特币</h3><p>攻击者拥有全网超过 51% 算力之后，首先是成功挖矿的概率增大了，由于成功挖矿的概率增大，那么攻击者就能够对挖到的区块进行修改。假设攻击者是理性的，为了利益考虑，那么他会修改区块中关于自己的交易记录，以便双重支付，区块中其他的交易，由于没有发起者的签名，攻击者是不能够去修改的，也就是说攻击者没法做到把别人的币转给自己。</p>
<p>具体做法就是把自己的币转到交易所，卖出后出金提现，然后利用 51% 攻击去修改这笔交易，转到自己的另外一个钱包地址中，由于有算力优势，并且遵循最长链原则，那么之前转到交易所的交易记录被认为是无效的，区块链中记录的是后面这笔交易。也就是同一笔钱花了两次，最终损失的是交易所。这里不一定是交易所，也可能是其他人或者商家等。</p>
<p>但是双花是有可能被检测出来的，还记得上文提到的 “<strong>确认数</strong>” 吗？那么确认数是什么？</p>
<p>区块链是由一个个区块形象的连接在一起，形成链状。当其中某笔交易发生的时候，会被打包到区块中，然后形成区块链，每追加一个区块，确认数加 1。计算方法很简单，<strong>用当前最长链的最新区块高度减去某笔交易所在的区块高度即为确认数</strong>。这里需要注意的由于有分叉的可能（参考上面的两条不同长度的链），这笔交易在不同的链里面高度是不一样的，所以正确获得某笔交易所在的区块高度是通过交易哈希去获取的。</p>
<p>比如下图：<br><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/55.png" alt=""></p>
<p>同样是区块高度为 625400 的区块，经过编写博文这么一段时间来，确认数从 9 变成了 25，说明 625400 这个区块之后新增加了 14 个区块。</p>
<p>节点会对区块进行校验的，对于双花攻击，节点是有可能在 6 个确认周期内发现一笔交易被双重支付了，从而对交易发起者进行一些惩罚。所以为了预防双花，一般可以增加确认数，对比比特币来说， 6 个确认周期是比较合适的。</p>
<p>那么此次成本和收益怎么样呢？成本就是你需要掌握全网 51% 以上的算力，这个本身就是一个很大的成本；收益就是一笔钱被花费了两次，那么这笔钱有多少就很关键了，如果少的话攻击者肯定是犯糊涂了才会发起这个 51% 攻击，如果这笔钱很大呢？在对交易进行验证的过程肯定也会更加严格，包括在交易所出金提现也是会重重验证，想要快速的脱身恐怕很难。</p>
<p>所以发起 51%攻击不可能是因为一次双花攻击。那么做空比特币呢？</p>
<p>比特币遭到 51%攻击之后势必会导致比特币乃至整个加密货币市场的市值损失，然后攻击者通过比特币期货做空比特币获益。这里其实还是跟获益的大小有关系，如果获益比较小，收益都赶不上发起攻击的成本；如果获益很大，则在实际操作套现过程中会变得很困难，至少是不顺利，风险很大。</p>
<p>上面的讨论基于一个假设是攻击者控制了全网 51% 的算力只持续了一段时间，攻击者的目的也只是想要发起双重支付攻击或者做空比特币，并且快速套现脱身，那么如果攻击者控制了全网 51% 以上的算力持续了很长一段时间呢？</p>
<h3 id="摧毁比特币系统"><a href="#摧毁比特币系统" class="headerlink" title="摧毁比特币系统"></a>摧毁比特币系统</h3><p>先说我个人的看法，<strong>对比特币发起 51%攻击，比特币系统不会崩溃，而且还能恢复，但比特币市值就不好说了，甚至整个加密货币的市值很可能损失 0 ~ 90% 以上</strong>。<br><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_51_attack/6.png" alt=""></p>
<p>如果攻击者拥有超过 51% 以上的算力，实际攻击的时候肯定不止 51%，比如达到了70% ~ 90%，并且攻击者控制持续了一段比较长的时间，那么攻击者能够反复进行双花攻击。实际过程可能是这样的：</p>
<p>首先攻击者需要在攻击发起之前买到一定量的比特币，或者说拥有一定量的比特币，那么出售这些比特币，然后利用算力优势发起双花攻击，抹掉出售自己比特币的这些交易记录，相当于自己的比特币与出售之前没什么变化，再次出售这些比特币，然后重复这个过程。</p>
<p>在这个过程中，势必会引起市场的警觉，导致比特币价格一路下跌，只要比特币价格没有跌倒 0，说明有人还愿意收比特币，那么这个攻击就可以持续。直至比特币归零或者其他防御解决方案比如硬分叉重新恢复了比特币网络。这个时候的加密货币市场，肯定是一片哀鸿。</p>
<p>但是从技术层面来讲，即便比特币归零了，比特币网络依然还能够通过诚实的矿工加入，利用全球闲置的大量算力，重新恢复比特币网络。至于比特币价格，这个不做讨论。也就是说 51%攻击能阻断或者影响比特币系统一段时间，但是攻击停止之后还是能够恢复的。这里就不得不提 POW 这个共识的优点了。</p>
<p><strong>本来 POW 是消耗了大量的电力来做算力竞速的，但是在比特币系统接近崩溃的时候，只要有算力的加入，整个区块链网络就能恢复起来</strong>。</p>
<p>然而，如果是<strong>使用了 POS 的区块链系统，如果发生类似的 51% 攻击，由于共识算法是以 Stake 作为依据的，那么新节点加入并不能带来任何起色，整个网络基本上不可能恢复了</strong>。但是这里有个悖论就是拥有 51% 以上 Stake 的攻击者为什么要发起这个攻击？导致自己的币不值钱？真的是人傻钱多，不在乎钱，就想干死这个区块链系统？【黑人问号脸】</p>
<h2 id="51-攻击悖论"><a href="#51-攻击悖论" class="headerlink" title="51%攻击悖论"></a>51%攻击悖论</h2><p>其实上面有提到过，发起 51%攻击的成本很高，尤其是想持续一段时间的攻击。那么收益的大小就很关键，但是无论怎么算，收益本身并不高并且风险巨大。</p>
<p>相比拥有 51% 算力诚实的参与比特币挖矿得到的奖励来说，可能都达不到。而且真实场景下，想要发起 51%攻击，门槛很高，并且不可能做到无人察觉。</p>
<p>所以这也就是为什么 <strong>51%攻击基本上不可能</strong>的原因。但是，，，<strong>结合其他的攻击手段，可以降低 51%攻击的算力门槛</strong>，比如日蚀攻击，这个在下一篇博文中 <a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a> 会做介绍。</p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>关于 51%攻击，大家基本上只需要了解就行了，对于区块链系统来说，基本上不用担心这种攻击，因为有悖论的存在。真正需要关心的是门槛较低，风险较低，收益较高的攻击。</p>
<p>另外，使用 POW 的缺点是很明显的，但是在安全方面又有着很独特的作用，不得不佩服中本聪对比特币系统的设计！！！</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://privacycanada.net/cryptocurrency/51-attack/" target="_blank" rel="noopener">51% Attack</a></p>
<p><a href="https://mp.weixin.qq.com/s/u0BaKzalYTw8o4vXqBuA_g" target="_blank" rel="noopener">51%攻击解析</a></p>
<p><a href="https://www.chainnode.com/tutorial/1949" target="_blank" rel="noopener">什么是比特币51%攻击？</a></p>
<p><a href="https://www.zhihu.com/question/21970544" target="_blank" rel="noopener">是否仅需一次51%攻击，比特币体系即会崩溃？</a></p>
<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p>
</li>
<li><p>email: <a href="mailto:&#108;&#105;&#x6e;&#117;&#120;&#99;&#111;&#x64;&#101;&#50;&#x6e;&#x69;&#x6b;&#x69;&#64;&#x67;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;">&#108;&#105;&#x6e;&#117;&#120;&#99;&#111;&#x64;&#101;&#50;&#x6e;&#x69;&#x6b;&#x69;&#64;&#x67;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;</a></p>
</li>
</ul>
<p>2020-04-11 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>
]]></content>
      <categories>
        <category>blockchain</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>attack</tag>
        <tag>bitcoin</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</title>
    <url>/2020/04/14/network_attack_of_blockchain_ddos_attack/</url>
    <content><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。</p>
<p>本文就谈一下目前几种区块链网络攻击，以及其防御方案。</p>
<p><strong>本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨</strong>。</p>
<p>同系列：</p>
<ul>
<li><a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之51%攻击</a></li>
<li><a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></li>
<li><a href="http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之女巫攻击</a> </li>
<li><a href="http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</a></li>
</ul>
<h1 id="拒绝服务攻击（Denial-of-Service-Attack"><a href="#拒绝服务攻击（Denial-of-Service-Attack" class="headerlink" title="拒绝服务攻击（Denial of Service Attack)"></a>拒绝服务攻击（Denial of Service Attack)</h1><h1 id="分布式拒绝服务攻击（Distributed-Denial-of-Service-Attack"><a href="#分布式拒绝服务攻击（Distributed-Denial-of-Service-Attack" class="headerlink" title="分布式拒绝服务攻击（Distributed Denial of Service Attack)"></a>分布式拒绝服务攻击（Distributed Denial of Service Attack)</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>信息安全的三要素——“保密性”、“完整性”和“可用性”中，拒绝服务攻击，针对的目标正是“可用性”。该攻击方式利用目标系统网络服务功能缺陷或者直接消耗其系统资源，使得该目标系统无法提供正常的服务。</p>
<p>拒绝服务攻击（DoS) 问题一直得不到合理的解决，目前还是世界性难题，究其原因是因为这是由于网络协议本身的安全缺陷造成的，从而拒绝服务攻击也成为了攻击者的终极手法。攻击者进行拒绝服务攻击，实际上让服务器实现两种效果：一是迫使服务器的缓冲区满，不接收新的请求；二是使用IP欺骗，迫使服务器把合法用户的连接复位，影响合法用户的连接。</p>
<p>而分布式拒绝服务攻击 (DDoS) 是指攻击者采用分布式攻击手法施行 DoS 攻击，通常是控制了多台机器向目标主机或者路由器发起 DoS 攻击。</p>
<p>针对区块链来说，攻击者通过 DDoS 攻击试图减慢网络速度，或者迫使网络停止运作。也可用于针对矿池，使矿池脱机，或者针对特定的目标主机，使其从网络离线。</p>
<p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_ddos_attack/11.png" alt=""></p>
<a id="more"></a>

<h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><p>DDoS 攻击造成的危害自不必说，中心化场景下，通常针对网站或者主机施行攻击，造成网站无法访问，影响业务运作，造成巨大经济损失；</p>
<p>在区块链场景下，攻击者目标通常是为了一定的利益才执行这样的攻击，导致网络速度变慢，或者影响矿工挖矿，从而方便攻击者对目标下手。</p>
<p>DDoS 并非是区块链特有的攻击，在中心化场景下的攻击其实相对会更多。</p>
<h2 id="攻击形式"><a href="#攻击形式" class="headerlink" title="攻击形式"></a>攻击形式</h2><h3 id="带宽攻击"><a href="#带宽攻击" class="headerlink" title="带宽攻击"></a>带宽攻击</h3><p>带宽攻击很好理解，通过攻击使受害者节点的网络带宽耗尽，从而造成拒绝服务的效果。</p>
<p>区块链系统的底层构建于 P2P 网络，其中通信上广播占据了大部分通信，一次广播通常就是大于 N 倍的收包，随着网络规模的扩大，节点数量的增多，通信的压力也会很大。</p>
<p>攻击者通过疯狂向节点通信端口发包，或者攻击者利用软件逻辑触发系统自动的大规模通信（比如触发同步），耗尽节点的带宽，最终从网络中离线。</p>
<p>而一旦离线重启之后，往往又会伴随着其他的攻击，比如 日蚀攻击，详情可以参考之前的博文： <a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></p>
<h3 id="CC-攻击"><a href="#CC-攻击" class="headerlink" title="CC 攻击"></a>CC 攻击</h3><p>DDoS 攻击是针对 IP 的攻击，而 CC 攻击的是服务器资源。</p>
<blockquote>
<p>CC攻击全称Challenge Collapsar，中文意思是挑战黑洞，因为以前的抵抗DDoS攻击的安全设备叫黑洞，顾名思义挑战黑洞就是说黑洞拿这种攻击没办法，新一代的抗DDoS设备已经改名为ADS(Anti-DDoS System)，基本上已经可以完美的抵御CC攻击了。CC攻击的原理是通过代理服务器或者大量肉鸡模拟多个用户访问目标网站的动态页面，制造大量的后台数据库查询动作，消耗目标CPU资源，造成拒绝服务。CC不像DDoS可以用硬件防火墙来过滤攻击，CC攻击本身的请求就是正常的请求。我们都知道网站的页面有静态和动态之分，动态网页是需要与后台数据库进行交互的，比如一些论坛用户登录的时候需要去数据库查询你的等级、权限等等，当你留言的时候又需要查询权限、同步数据等等，这就消耗很多CPU资源，造成静态网页能打开，但是需要和数据库交互的动态网页打开慢或者无法打开的现象。这种攻击方式相对于前两种实现要相对复杂一些，但是防御起来要简单的多，提供服务的企业只要尽量少用动态网页并且让一些操作提供验证码就能抵御一般的CC攻击。</p>
<p>CC攻击的种类有三种，直接攻击，代理攻击，僵尸网络攻击，直接攻击主要针对有重要缺陷的 WEB 应用程序，一般说来是程序写的有问题的时候才会出现这种情况，比较少见。僵尸网络攻击有点类似于 DDOS 攻击了，从 WEB 应用程序层面上已经无法防御，所以代理攻击是CC 攻击者一般会操作一批代理服务器，比方说 100 个代理，然后每个代理同时发出 10 个请求，这样 WEB 服务器同时收到 1000 个并发请求的，并且在发出请求后，立刻断掉与代理的连接，避免代理返回的数据将本身的带宽堵死，而不能发动再次请求，这时 WEB 服务器会将响应这些请求的进程进行队列，数据库服务器也同样如此，这样一来，正常请求将会被排在很后被处理，就象本来你去食堂吃饭时，一般只有不到十个人在排队，今天前面却插了一千个人，那么轮到你的机会就很小很小了，这时就出现页面打开极其缓慢或者白屏。</p>
</blockquote>
<h3 id="SYN-洪泛攻击"><a href="#SYN-洪泛攻击" class="headerlink" title="SYN 洪泛攻击"></a>SYN 洪泛攻击</h3><p>SYN Flooding 攻击是指攻击者发送了大量的 TCP/SYN 包，并且以一个假的 IP 作为发送地址到达目标主机，由于 TCP 在建立连接的时候有 3 次握手，也就是建立连接需要发送 3 个包，当目标主机收到这个 SYN 建连包之后，会回复一个 SYN-ACK 包。</p>
<p>但是由于攻击者恶意伪造了来源 IP，那么攻击者是收不到这个 ACK 包的，但是会导致目标主机打开了一个半开放的连接，如果攻击者发动了频繁的 SYN 洪泛攻击，那么会造成目标主机 TCP 资源消耗枯竭，导致无法与正常客户端建立连接，以达到拒绝服务的效果。</p>
<h3 id="Land-攻击"><a href="#Land-攻击" class="headerlink" title="Land 攻击"></a>Land 攻击</h3><p>Land 攻击是 SYN 攻击的变种，攻击者此时伪造的来源 IP 就是目标主机的 IP，也就是说这个 TCP SYN 包的来源 IP  和 目的 IP 相同，都是目标主机，那么就会导致目标主机向自己发送大量的 SYN-ACK 包，从而消耗 TCP 资源，阻止正常客户端的连接建立。</p>
<h2 id="攻击案例"><a href="#攻击案例" class="headerlink" title="攻击案例"></a>攻击案例</h2><h3 id="GitHub-遭受史上最大规模-DDoS-攻击"><a href="#GitHub-遭受史上最大规模-DDoS-攻击" class="headerlink" title="GitHub 遭受史上最大规模 DDoS 攻击"></a>GitHub 遭受史上最大规模 DDoS 攻击</h3><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 想必大家都不陌生，全球最大的同性交友网站。在美国东部时间 2 月 28 日下午 17:28 分，几乎一瞬间收到了 1.35 Tbps 的流量访问。这是互联网有史以来规模最大、威力最大的分布式拒绝服务攻击 （DDos)。</p>
<p>不到十分钟，GitHub 就不得不向 CDN 服务商 Akamai 请求协助。最终 Akamai 接管了GitHub 的所有信息流，并通过其清理中心发送数据以清除和阻止恶意数据包。8 分钟后，攻击者发现没什么效果，选择了撤退，停止了攻击。</p>
<p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_ddos_attack/2.png" alt=""></p>
<p>详情可以查看 GitHub 的官方声明： <a href="https://github.blog/2018-03-01-ddos-incident-report/" target="_blank" rel="noopener">February 28th DDoS Incident Report</a></p>
<p>此次的 DDoS 攻击是属于中心化世界里面的一次较为著名的攻击，而且类似于这样的攻击每天都在发生。</p>
<p>大家可以看一下这个网站，来自卡巴斯基实验室的数据（多观看几分钟能看到 3D 攻击画面，还是挺震撼的）： <a href="https://cybermap.kaspersky.com/cn" target="_blank" rel="noopener">网络威胁实时地图</a></p>
<h3 id="2016-年以太坊-DDoS-攻击"><a href="#2016-年以太坊-DDoS-攻击" class="headerlink" title="2016 年以太坊 DDoS 攻击"></a>2016 年以太坊 DDoS 攻击</h3><p>2016 年以太坊发生过一次严重的 DDoS 攻击，此次攻击也被称为 “EXTCODESIZE” 攻击。</p>
<p>攻击者让矿工和节点需要花费很长的时间 （20 ~ 60 秒) 来处理一些区块。造成这次攻击的原因是一个 EXTCODESIZE 的操作码，它具有相当低的 gas 价格，需要节点从磁盘读取状态信息。攻击交易调用此操作码的频率大约是 50000 次每区块。这样的后果就是，网络大大放缓了，但没有共识故障或是内存超载发生。</p>
<p>因为此次攻击事件，很多媒体都宣告了以太坊的末日。可见在区块链世界里，DDoS 攻击的后果是比较严重的。</p>
<h3 id="以太坊-Fomo3D，黑客拿走-2200-万"><a href="#以太坊-Fomo3D，黑客拿走-2200-万" class="headerlink" title="以太坊 Fomo3D，黑客拿走 2200 万"></a>以太坊 Fomo3D，黑客拿走 2200 万</h3><p>Fomo3D 是以太坊上一个比较火爆的 Dapp，是一个类似于资金盘的游戏。此次攻击过程还是挺有趣的，各位可以往下看。</p>
<p>首先，介绍一下 Fomo3D 这个游戏的规则：</p>
<blockquote>
<p>规则1： 每个人参与游戏需要购买一个 Key</p>
<p>规则2： 在一轮游戏中，谁是最后一个购买 Key 的人，则可以拿走奖池中的大奖</p>
<p>规则3： 只要有人购买一个 Key, 游戏倒计时就会增加 30 秒</p>
<p>规则4： 游戏启动从 24 小时倒计时</p>
</blockquote>
<p>规则里面最吸引人的一条是，只要你是最后一个购买的人，你就是最终的大奖得主，是不是很有 Du博 的感觉？</p>
<img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_ddos_attack/3.png" style="zoom:100%;margin:auto;"/>

<p>所以看到规则后，你会怎么做？</p>
<p>正常人一般都是在倒数的最后几分钟或者几秒钟去购买 Key，这样的话自己也许是倒计时结束后最后一个购买的人。但是这个想法是大多数人的想法，我们毕竟只是普通玩家。</p>
<p>那么稍微高级一点的玩家呢，比如程序员，可能会写个脚本，自动化的方式来购买 Key，速度是不是比手工快多了。</p>
<p><strong>那么来看看黑客玩家是怎么做的</strong>？</p>
<p>我们都知道，购买 Key 之后，只要后面没有人再购买，你就是大奖得主，基于本文的探讨，如果你以前没有听说个这个事件的话，那么此刻你是不是已经有了一些想法？对的，没错，就是利用 DDoS 攻击，在你购买成功后，马上施行攻击，拖慢整个网络，造成矿工无法打包或者打包很慢，那么势必会影响到其他交易的正常进行。如果你比较幸运，正好导致其他正在购买 Key 的人的交易失败了，那么你就是大奖得主。</p>
<p>但是说起来容易，实际做起来还是不太容易操作的。因为你要能确保你购买成功后的  DDos 攻击能让后续的交易都失败，不然弄巧成拙，帮助了某个漏网之鱼，别人恰好因为你的攻击成为了最后一个购买的人。</p>
<p>了解以太坊的人应该听说过 gas 机制，可以理解为一个交易的手续费，而矿工通常会优先打包 gas 费用较高的交易，那么这位黑客利用自己的智能合约创建了大量的交易，并且具有高额的 gas 费用，几乎垄断了以太坊网络的所有算力，这样就造成了以太坊拥堵了接近 3 分钟，进而使其他的玩家无法打包购买 Key 的交易，从而成为大奖得主。</p>
<p>该黑客此前还尝试过多次这样的攻击，直至最后一次才成功。</p>
<p>是不是还是很有趣的？区块链公链本身具有比较致命的缺陷就是 tps 很低，单位时间处理的交易有限。后续的交易只能在排队，尤其是在网络被攻击拖慢的情况下，交易成功的时间会大大拉长。</p>
<h2 id="DDoS-防御方案"><a href="#DDoS-防御方案" class="headerlink" title="DDoS 防御方案"></a>DDoS 防御方案</h2><h3 id="高防服务器"><a href="#高防服务器" class="headerlink" title="高防服务器"></a>高防服务器</h3><p>高防服务器就是指能独立硬防御 50Gbps 以上的服务器，本身就能抑制一定的 DDoS 攻击。这个没什么好说的，买就是了，只是比较贵。</p>
<h3 id="CDN-加速"><a href="#CDN-加速" class="headerlink" title="CDN 加速"></a>CDN 加速</h3><p>CDN 本身就就有大带宽，多节点的优势，并且隐藏了真实的网站 IP。通过把流量分配到多地多节点降低攻击负载，防止源站崩溃。</p>
<h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><p>防火墙能防御 DDoS 和其他的一些攻击。防火墙有软件防火墙和硬件防火墙之分。必要可以两者结合。</p>
<h3 id="攻击检测和溯源"><a href="#攻击检测和溯源" class="headerlink" title="攻击检测和溯源"></a>攻击检测和溯源</h3><p>通过分析攻击的方法和手段，追踪攻击的路由，检测出恶意的 IP 和路由，做好相应的屏蔽，保护主机。</p>
<h3 id="黑名单机制"><a href="#黑名单机制" class="headerlink" title="黑名单机制"></a>黑名单机制</h3><p>通过建立黑名单机制，限制黑名单的访问。</p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>DDoS 攻击每天都在发生，对于区块链系统来说，由于接入的节点性能参差不齐以及无许可的特征，想要利用中心化的防御机制去做好 DDoS 防御可能还是有难度。况且由于区块链本身的弊端，性能瓶颈，更容易被攻击者利用。</p>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p><a href="https://bcsec.org/index/detail/tag/2/id/332" target="_blank" rel="noopener">BlockChain中DDos攻击的深入剖析</a></p>
<p><a href="https://www.safedog.cn/news.html?id=1550" target="_blank" rel="noopener">DDOS攻击疯狂危害大 谈谈如何防御攻击</a></p>
<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p>
</li>
<li><p>email: <a href="mailto:&#x6c;&#x69;&#x6e;&#x75;&#120;&#99;&#x6f;&#100;&#101;&#50;&#x6e;&#105;&#107;&#x69;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#109;">&#x6c;&#x69;&#x6e;&#x75;&#120;&#99;&#x6f;&#100;&#101;&#50;&#x6e;&#105;&#107;&#x69;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#109;</a></p>
</li>
</ul>
<p>2020-04-14 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>
]]></content>
      <categories>
        <category>blockchain</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>attack</tag>
        <tag>bitcoin</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈几种区块链网络攻击以及防御方案之日蚀攻击</title>
    <url>/2020/04/12/network_attack_of_blockchain_eclipse_attack/</url>
    <content><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。</p>
<p>本文就谈一下目前几种区块链网络攻击，以及其防御方案。</p>
<p><strong>本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨</strong>。</p>
<p>同系列：</p>
<ul>
<li><a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之51%攻击</a></li>
<li><a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></li>
<li><a href="http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之女巫攻击</a> </li>
<li><a href="http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</a> </li>
</ul>
<h1 id="日蚀攻击（Eclipse-Attack"><a href="#日蚀攻击（Eclipse-Attack" class="headerlink" title="日蚀攻击（Eclipse Attack)"></a>日蚀攻击（Eclipse Attack)</h1><h2 id="P2P-网络"><a href="#P2P-网络" class="headerlink" title="P2P 网络"></a>P2P 网络</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在介绍什么是日蚀攻击之前，有必要先对区块链系统的底层 P2P 网络做一个简单的介绍，因为日蚀攻击就是利用了 P2P 网络的特性来进行的攻击。</p>
<p>P2P 即 Peer to Peer，中文意思是对等网络，它是分布式系统和计算机网络相结合的产物。对等的意思就是网络中的节点角色、地位是平等的，任何节点具有极强的自由，可以任意加入、离开网络。这跟传统的 C/S 模型的结构有很大区别，任何节点既是 client ，也是 server，或者说网络中没有 server 节点，任何节点 down 掉不会对整个网络产生致命的影响，具有极强的伸缩性。</p>
<p>P2P 网络从诞生到现在经过了几个阶段，分别是混合式 P2P，无结构化 P2P以及结构化 P2P。</p>
<ul>
<li>混合式：顾名思义，P2P 网络混合了传统的 C/S 模型，网络中有角色充当 server 角色</li>
<li>无结构化：也就是网状结构模型，纯分布式网络，典型代表就是比特币网络，节点之间以一种随机的，松散的方式组织在一起</li>
<li>结构化：节点按照一定规则组织在一起，路由算法比较精准，比如 DHT 算法</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_eclipse_attack/2.png" alt=""></p>
<center>混合式</center>

<a id="more"></a>

<p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_eclipse_attack/1.png" alt=""></p>
<center>无结构化</center>
![](https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_eclipse_attack/3.png)
<center>结构化(kademlia算法)</center>

<h3 id="路由表（邻居表）"><a href="#路由表（邻居表）" class="headerlink" title="路由表（邻居表）"></a>路由表（邻居表）</h3><p>P2P 网络里一个比较重要的概念就是路由表，或者说邻居表。路由表里面保存了网络里面的一些节点，具体数量从几个到几十个不等。路由表中的这些节点可以看做是这个节点与这个 P2P 网络建立关联的重要依据，或者说表示节点到这个 P2P 网络的一些入口。这个节点想要发送任何信息需要先转发给路由表中的节点，再由它们负责转发消息。这就是路由表的作用。</p>
<p>那么无论是哪一种结构的 P2P 网络，每个节点都有一个类似于路由表的概念，本质上就是跟这个网络中的多个节点建立了一些联系，然后后续的所有收发包都交由这些邻居代为收发。</p>
<p>所以对于 P2P 网络里的一个节点来说，它看不到网络的全貌，只能看到网络的局部信息。并且由于路由表的存在，哪怕路由表中只保存了一个入口节点，这个节点也能服务于整个 P2P 网络，其他节点也能通过一定的方式找到这个节点。</p>
<h3 id="NAT-穿透"><a href="#NAT-穿透" class="headerlink" title="NAT 穿透"></a>NAT 穿透</h3><p>NAT 穿透不是 P2P 网络的一个必要特性，如果 P2P 网络中都是公网节点（具有公网IP）,其实是不需要 NAT 穿透的。那么如果有一些私网节点（局域网节点）也加入到了这个 P2P 网络中，由于不能互通，导致其他节点无法发现这些私网节点，最后带来的结果就是这个私网节点能够成功发送信息到这个 P2P 网络中，但是可能却无法收到来自 P2P 网络里的消息。注意这里的用词是可能，因为存在一些场景是有可能收到的。</p>
<p>关于 NAT 穿透我有另外的博客介绍 NAT 穿透方面的东西，这里就不做展开讲了。</p>
<h2 id="什么是日蚀攻击"><a href="#什么是日蚀攻击" class="headerlink" title="什么是日蚀攻击"></a>什么是日蚀攻击</h2><p>上面介绍了关于 P2P 网络的一些知识和概念，下面开始正式介绍日蚀攻击。</p>
<p><strong>日蚀，同日食，是指月球运动到地球和太阳的中间，如果三者正好在一条直线上，月球就会挡住太阳射向地球的光，月球身后的黑影正好落到地球上，这时发生日食现象</strong>。月球就切断了地球和太阳之间的（太阳光）联系。<br><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_eclipse_attack/4.png" alt=""></p>
<p>再来看什么是日蚀攻击，<strong>日蚀攻击针对特定的某个节点，通过一些方法，填满被攻击节点的路由表，以便切断它们与其他对等点的所有入站/出站通信（这会有效地窒息受害者）</strong>。上面提到路由表的概念，路由表里的节点是这个 P2P 网络的入口节点，任何收发消息都要经过路由表中的节点。攻击者通过某种方式填满了被攻击的节点，理论上就是控制了这个节点进出网络的信息，造成被攻击节点被 “伪隔离”的现象。</p>
<p>我觉得用日蚀来形象化的比喻这种攻击还是很合适的，本质上就是隔离了这个节点或者说用恶意节点包围了受害节点。</p>
<p>那么会造成什么后果呢？</p>
<ul>
<li><strong>阻止受害节点查看真实的区块链信息</strong></li>
<li><strong>隔离网络中多个节点，以达到分裂网络的可能</strong></li>
<li><strong>用少于 51% 的算力发起 51% 攻击</strong></li>
</ul>
<p>上面的几点其实比较好理解的，受害节点被恶意节点包围之后，恶意节点可以选择性的给受害节点发包或者篡改真实的数据包，本质上就是让这个节点误以为自己还在这个网络中挖矿，然而真实情况是它已经从网络中隔离开来了。</p>
<p>如果受害节点很多的情况，从整个网络全局来看就是被隔离成多个部分，网络实际上已经被分裂了。那么就可以实施分裂网络的 51%攻击，只需要用比原来 51%攻击更少的算力就行。</p>
<p>关于 51%攻击可以查看这篇博文 <a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之51%攻击</a>。</p>
<h2 id="如何发起日蚀攻击"><a href="#如何发起日蚀攻击" class="headerlink" title="如何发起日蚀攻击"></a>如何发起日蚀攻击</h2><p>由于每种区块链底层的 P2P 网络模型可能不一样，所以就以以太坊为例来做说明。</p>
<h3 id="以太坊-kademlia网络原理"><a href="#以太坊-kademlia网络原理" class="headerlink" title="以太坊 kademlia网络原理"></a>以太坊 kademlia网络原理</h3><p>以太坊底层的 P2P 网络采用的是 kademlia 算法，kademlia 网络是一种结构化的 P2P 网络，网络中的节点按照一定的规则组织在一起。</p>
<p><strong>kademlia 算法中的核心特点是用异或来定义两个节点的距离，这种距离与实际的物理距离没有任何关系</strong>。</p>
<p>每个节点的路由表会保存不同距离的节点，这个距离的最小值当然是 0，也就是它自己，这个距离的最大值跟节点 ID 的长度有关系（NodeID）。NodeID 是一段具有特定长度的字符串，每个节点具有唯一的 NodeID，用 NodeID 来作为这个节点在 P2P 网络中的身份信息。比如：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">NodeID:</span>   DEA25B0AF6CC5EA9DA4961DBC5FFEB97</span><br></pre></td></tr></table></figure>

<p>假设 NodeID 长度为 N bit(对于上面的 NodeID 来说 N 为 32 * 8 = 256），那么这个距离的最大值就是 N -1，即距离范围在 [0, N)。</p>
<p>kademlia 网络中的节点的路由表中会保存每一个距离的节点，数量在 1 个以上，这个值称为为 α 值。也就是说与自己的 NodeID 距离为 1 的会保存 α 个，距离为 2 的会保存 α 个，以此类推，直到距离为 N-1 的节点会保存 α 个。<strong>实际情况是距离越大，能找到符合要求的节点的概率也就越大</strong>，想一想为什么？</p>
<p>这里每一个距离称为一个 Bucket，每一个 Bucket 里保存着 [0, α] 个距离匹配的节点。</p>
<p>通过上述对 kademlia 算法的简要描述可以得出一个结论，<strong>知道一个节点的 NodeID，就能够计算出这个节点的路由表中的每一个 Bucket 中应该填入什么样的 NodeID</strong>。而这就是日蚀攻击的核心依据。</p>
<h3 id="发起日蚀攻击"><a href="#发起日蚀攻击" class="headerlink" title="发起日蚀攻击"></a>发起日蚀攻击</h3><p>当我们知道目标节点的 NodeID 之后，就可以通过一定的方式去伪造生成满足不同 Bucket 的 NodeID，当这个目标节点重启之后，马上以这些 NodeID 启动节点去连接目标节点，由于 kademlia 的特性，这些特意伪造的 NodeID 肯定会被填入目标节点的路由表中，从而把路由表占满，以达到日蚀攻击的目的。</p>
<p>至于让目标节点重启，可以等待目标节点自动重启或者采用 DOS 攻击迫使目标节点重启，当重启之后马上进行上面的操作就可以完成日蚀攻击。</p>
<p>当成功发起日蚀攻击之后，随后就能隔离节点，篡改目标节点的收发数据包了。</p>
<h2 id="如何防御日蚀攻击"><a href="#如何防御日蚀攻击" class="headerlink" title="如何防御日蚀攻击"></a>如何防御日蚀攻击</h2><p>根据上述的讨论知道，想要避免日蚀攻击由很多种办法：（可能只适用于 kademlia 网络）</p>
<ul>
<li>提高节点进入网络的准入门槛</li>
</ul>
<p>节点进入 P2P 网络需要一定的门槛，不论是以时间为代价还是以 Stake 或是工作证明为代价，这样就能有效防止大批量伪造节点进入网络，从而从源头上避免日蚀攻击</p>
<ul>
<li>针对同一个 IP 段的节点做连接限制</li>
</ul>
<p>攻击者很可能利用有限的 IP （1 ~ 2 个）伪造大量节点，发起日蚀攻击，那么对于目标节点来说，看到的节点都是来自于这个 IP，多半可以说明这是恶意节点。那么只需要对来自同一个 IP 段的节点做一定数量的限制，比如 最多 2 个，那么也能显著提高攻击者的攻击成本</p>
<ul>
<li>对节点主动建立连接和被动建立连接的数量做一定的均衡</li>
</ul>
<p>发起日蚀攻击，需要主动占满目标节点的路由表，也就是主动与目标节点建立连接，即便不是这样，也有方法让目标节点主动建立连接到恶意节点。所以对于进出的连接数，做一定的均衡能有效避免日蚀攻击的发生</p>
<ul>
<li>NodeID 重启之后变化</li>
</ul>
<p>进行日蚀攻击的前提是需要知道目标节点的 NodeID，并且迫使目标节点重启，然后以事先根据目标节点 NodeID 计算好的伪造节点发起连接，达成日蚀攻击。所以如果节点重启之后 NodeID 变为与原来不再一致，那么攻击者事先计算伪造的节点就变得毫无可用之地了。</p>
<ul>
<li>其他辅助措施</li>
</ul>
<p>比如节点实时检测，发现恶意节点进行广播，并采取一定的惩罚措施等。</p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>最后我们再来简单对比一下比特币和以太坊对日蚀攻击的反应。</p>
<p>由于以太坊采用的是结构化的 P2P 网络，并且采用了 kademlia 算法，那么知道了 NodeID，基本上就大致能知道这个路由表中应该填入一些什么类型的节点；</p>
<p>而对于比特币来说，由于比特币的 P2P 网络采用的是无结构的模型，节点之间以随机，松散的方式进行组织。想要通过类似以太坊日蚀攻击的方法去攻击比特币网络，不太行得通，因为比特币节点不关心你的 NodeID。但是还是有办法迫使比特币节点只与恶意节点建立连接的。</p>
<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p>
</li>
<li><p>email: <a href="mailto:&#x6c;&#105;&#x6e;&#x75;&#120;&#99;&#111;&#x64;&#101;&#50;&#x6e;&#x69;&#107;&#105;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#109;">&#x6c;&#105;&#x6e;&#x75;&#120;&#99;&#111;&#x64;&#101;&#50;&#x6e;&#x69;&#107;&#105;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#109;</a></p>
</li>
</ul>
<p>2020-04-12 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>
]]></content>
      <categories>
        <category>blockchain</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>attack</tag>
        <tag>bitcoin</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈几种区块链网络攻击以及防御方案之其它网络攻击</title>
    <url>/2020/04/16/network_attack_of_blockchain_other_attack/</url>
    <content><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。</p>
<p>本文就谈一下目前几种区块链网络攻击，以及其防御方案。</p>
<p><strong>本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨</strong>。</p>
<p>同系列：</p>
<ul>
<li><a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之51%攻击</a></li>
<li><a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></li>
<li><a href="http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之女巫攻击</a> </li>
<li><a href="http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</a> </li>
<li><a href="http://rebootcat.com/2020/04/16/network_attack_of_blockchain_other_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之其它网络攻击</a> </li>
</ul>
<h1 id="异形攻击"><a href="#异形攻击" class="headerlink" title="异形攻击"></a>异形攻击</h1><p>异形攻击又称地址污染攻击，是指诱使同类链的节点之间互相发现、互联、侵入的一种攻击手法。同类链的意思是底层 P2P 网络使用了相同或者相似的 P2P 通信协议。这尤其针对比特币和以太坊系列的公链。</p>
<p>众所周知，最近几年区块链行业蓬勃发展，又过于浮躁。其中很多劣质公链大量 COPY 以太坊、比特币的源码，甚至不做修改，仅仅修改下名字成为一条新的公链，这就导致大量的公链的底层是相同的或者兼容的。</p>
<p>那么如果攻击者执行了异形攻击，就有可能导致同类链的节点之间互相缠绕在一起，影响公链节点内部的通信和路由，进而影响到交易、共识和安全。从而让攻击者有机会施行其他的攻击，比如 DDoS 攻击，网络分裂攻击。</p>
<p>本质上还是由于伸手党的存在，并且不加以修饰和对节点的检测造成了异形攻击。应对办法也很简单，首先是拒绝做伸手党，即便伸手党，起码也要研究下别人的代码，做点创新和原创的东西；其次加强对本公链的节点类型的检测，比如节点地址不符合的一切拒绝，通信协议不一致的一切拒绝，通信报文头特殊字段不一致的一切拒绝等等。</p>
<img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_other_attack/1.png" style="zoom:100%;margin:auto;"/>

<center>配图与本文无关</center>


<a id="more"></a>

<h1 id="窃听攻击"><a href="#窃听攻击" class="headerlink" title="窃听攻击"></a>窃听攻击</h1><p>这不是区块链特有的攻击手法，本质上就是流量行为分析，通过分析流量，甚至可以把 IP 和家庭地址关联起来，从而知道某笔交易时来自某一个特定的客户端或者某个人。</p>
<p>区块链的去中心化带来的一个好处就是匿名，或者说相对匿名，但是攻击者通过追踪某笔交易，分析流量等措施，锁定现实世界的具体某个人，然后执行一些违法犯罪的事情。</p>
<h1 id="交易延展性攻击"><a href="#交易延展性攻击" class="headerlink" title="交易延展性攻击"></a>交易延展性攻击</h1><p>延展性攻击者侦听P2P网络中的交易，利用交易签名算法的特征修改原交易中的input 签名, 生成拥有一样input和output的新交易，然后广播到网络中形成双花，这样原来的交易就可能有一定的概率不能被确认，在虚拟货币交易的情况下，它可以被用来进行二次存款或双重提现。</p>
<p>案例</p>
<ol>
<li><p>2014年8月，在线黑市Silk Road 2遭遇交易延展性攻击，部分比特币被盗，损失约260万美元</p>
</li>
<li><p>2013年11月，GHash.io矿池对赌博网站BetCoin Dice进行多次付款欺诈，实施双重支出攻击</p>
</li>
</ol>
<h1 id="BGP劫持攻击"><a href="#BGP劫持攻击" class="headerlink" title="BGP劫持攻击"></a>BGP劫持攻击</h1><p>边界网关协议(BGP)是因特网的关键组成部分，用于确定路由路径。BGP劫持,即利用BGP操纵因特网路由路径，最近几年中已经变得越来越频繁。 无论是网络犯罪分子还是政府,都可以利用这种技术来达到自己的目的，如误导和拦截流量等，目前在区块链网络中节点的流量一但被接管又能对整个网络造成巨大的影响，如破坏共识机制，交易等各种信息。</p>
<p>而对于BGP劫持攻击中，目前有安全研究者已经证明该攻击的概念可行性，从2015年11月5日至2016年11月15日通过对节点网络的分析统计目前大多数比特币节点都托管在少数特定的几个互联网服务提供商(ISPs)，而60%的比特币连接都是在这几个ISP。所以这几个ISP可以看到60%的比特币流量，所以也能够做到对目前比特币网络的流量控制权，研究者通过劫持的场景验证了至少如下两个攻击概念是可行的，同时给出了验证的代码[8]。</p>
<p>分割攻击</p>
<p>攻击者可以利用BGP劫持来讲区块链网络划分成两个或多个不相交的网络，此时的区块链会分叉为两条或多条并行链。攻击停止后，区块链会重新统一为一条链，以最长的链为主链，其他的链将被废弃，其上的交易、奖励等全部无效。</p>
<p>攻击场景举例：</p>
<p>1) 首先，攻击者发动BGP劫持，将网络分割为两部分，一个大网络、一个小网络。</p>
<p>2) 在小网络中，攻击者发布交易卖出自己全部的加密货币，并兑换为法币。</p>
<p>3) 经过小网络的“全网确认”，这笔交易生效，攻击者获得等值的法币。</p>
<p>4) 攻击者释放BGP劫持，大网络与小网络互通，小网络上的一切交易被大网络否定，攻击者的加密货币全部回归到账户，而交易得来的法币，依然还在攻击者手中，完成获利。</p>
<h1 id="路由攻击"><a href="#路由攻击" class="headerlink" title="路由攻击"></a>路由攻击</h1><p>路由攻击往往配合其他的攻击来施行，攻击者可以先利用女巫攻击或者日蚀攻击把网络分裂，然后篡改消息发送到网络当中。最终效果是影响了网络中的通信和路由。</p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>其实关于区块链系统的攻击方式还有很多，本系列主要偏重于网络层面的攻击。针对不同的攻击，需要采用不同的防御方案，并且很多攻击手法并非区块链特有。随着区块链的发展，黑客的攻击也不会停止，对于公链来说，还有很多挑战。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.leiphone.com/news/201805/wujKxkTTleb6kBef.html" target="_blank" rel="noopener">疯狂“搬运”币的黑客如何攻击区块链｜干货（一）</a></p>
<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p>
</li>
<li><p>email: <a href="mailto:&#108;&#105;&#110;&#117;&#120;&#99;&#x6f;&#100;&#x65;&#50;&#x6e;&#105;&#107;&#105;&#x40;&#x67;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#109;">&#108;&#105;&#110;&#117;&#120;&#99;&#x6f;&#100;&#x65;&#50;&#x6e;&#105;&#107;&#105;&#x40;&#x67;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#109;</a></p>
</li>
</ul>
<p>2020-04-16 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>
]]></content>
      <categories>
        <category>blockchain</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>attack</tag>
        <tag>bitcoin</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈几种区块链网络攻击以及防御方案之女巫攻击</title>
    <url>/2020/04/13/network_attack_of_blockchain_sybil_attack/</url>
    <content><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>自比特币诞生到现在，比特币（网络）经历过大大小小非常多次的攻击，尤其在比特币诞生之初的几年，并且随着比特币价格的一路飙涨，黑客针对比特币网络的攻击就一直没有停止过。据估算，目前大约有 350 ~ 400 万比特币永久丢失，价值大约 240 ~ 280 亿美元。当然其中不只有由于黑客的攻击导致的丢失，毕竟比特币最初的几年很多人都没有意识到比特币的价值，很多的私钥都遗失了。</p>
<p>本文就谈一下目前几种区块链网络攻击，以及其防御方案。</p>
<p><strong>本文尽量用简单易懂的白话来描述，也仅代表我个人的看法，欢迎探讨</strong>。</p>
<p>同系列：</p>
<ul>
<li><a href="http://rebootcat.com/2020/04/11/network_attack_of_blockchain_51_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之51%攻击</a></li>
<li><a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a> </li>
<li><a href="http://rebootcat.com/2020/04/13/network_attack_of_blockchain_sybil_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之女巫攻击</a> </li>
<li><a href="http://rebootcat.com/2020/04/14/network_attack_of_blockchain_ddos_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之拒绝服务攻击</a> </li>
</ul>
<h1 id="女巫攻击（Sybil-Attack）"><a href="#女巫攻击（Sybil-Attack）" class="headerlink" title="女巫攻击（Sybil Attack）"></a>女巫攻击（Sybil Attack）</h1><h2 id="什么是女巫攻击"><a href="#什么是女巫攻击" class="headerlink" title="什么是女巫攻击"></a>什么是女巫攻击</h2><p>“女巫”这个词我们应该不陌生，通常指邪恶的化身，并且拥有可怕的魔法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/network_attack_of_blockchain_sybil_attack/1.png" alt=""></p>
<a id="more"></a>

<p>对于区块链来说，女巫攻击指攻击者将一个节点伪装成多个节点进入 P2P 网络中，在 P2P 网络中具有多重身份。通常用于恶意刷票、恶意刷排名、恶意刷信誉等网络活动，或者在一些网络活动中通过数量优势进行造假。</p>
<p>女巫攻击与日蚀攻击由类似的地方，但日蚀攻击的着眼点在于某一个确定的节点，而女巫攻击的着眼点在于整个网络。通过伪造身份进入网络，干扰路由，干扰信息传递等。</p>
<blockquote>
<p>关于日蚀攻击可以看这篇博文 <a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a></p>
</blockquote>
<h2 id="如何防御女巫攻击"><a href="#如何防御女巫攻击" class="headerlink" title="如何防御女巫攻击"></a>如何防御女巫攻击</h2><p>女巫攻击的特点就是利用一个节点伪造多重身份信息进入网络，所以一般来说提高进入 P2P 网络的门槛就能有效避免女巫攻击。</p>
<h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><p>身份验证很好理解，进入这个网络的任何节点都需要做验证，验证通过才能进入网络。这就像去参加一个秘密会以，你需要邀请函才能进入。</p>
<p>但是如何做身份验证呢？通常有两种方式：</p>
<ul>
<li>去中心化身份认证</li>
<li>中心化身份认证（第三方身份认证）</li>
</ul>
<p>但基于去中心化系统的匿名性，一般不推荐采用中心化的身份认证方式。所以在进入网络之时，通常需要网络当中已经存在较长时间或者信誉较高的多数节点共同达成认证公式，才能被允许进入。</p>
<h3 id="工作量证明"><a href="#工作量证明" class="headerlink" title="工作量证明"></a>工作量证明</h3><p>进入网络是需要成本的，不能够随意的加入退出。所以可以利用类似 POW 的方式对节点入网做一定的工作量证明，提高节点准入门槛。</p>
<h3 id="特征向量"><a href="#特征向量" class="headerlink" title="特征向量"></a>特征向量</h3><p>在 <a href="http://rebootcat.com/2020/04/12/network_attack_of_blockchain_eclipse_attack/" target="_blank" rel="noopener">浅谈几种区块链网络攻击以及防御方案之日蚀攻击</a> 一文中谈到针对日蚀攻击的防御方案，其中有一个防御方案是采用限制本地路由表中来自同一个 IP 段的节点数量。</p>
<p>其实这种方式是可能造成误杀的，因为并非来自同一个 IP 段的节点就可能是恶意节点。所以我们可能需要一种更加准确的方式去分析一个节点的行为，区分一个节点。</p>
<p>我们在做大数据的时候，往往需要通过很多特征向量来区分出是不是同一个用户，同样的在P2P网络中，我们也可以通过这种特征向量来区分这个节点是不是伪造的节点。当然这种方式不能完全避免女巫攻击，但是可以有效的减少女巫攻击。这种是有成熟产品的，像SybilGuard 和 the Advogato Trust Metric。</p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>女巫攻击相对来说成本是很低的，但是可能获取的收益是比较高的。通常这种攻击也会结合一些日蚀攻击，或者 DDOS 攻击进行。所以真正的区块链网络攻击，多半会结合多种攻击手段一起进行。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/superfjj/article/details/89894076?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1&utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1" target="_blank" rel="noopener">女巫攻击及其防范</a></p>
<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p>
</li>
<li><p>email: <a href="mailto:&#108;&#x69;&#110;&#117;&#x78;&#99;&#x6f;&#100;&#101;&#x32;&#110;&#x69;&#107;&#x69;&#64;&#103;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109;">&#108;&#x69;&#110;&#117;&#x78;&#99;&#x6f;&#100;&#101;&#x32;&#110;&#x69;&#107;&#x69;&#64;&#103;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109;</a></p>
</li>
</ul>
<p>2020-04-12 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>
]]></content>
      <categories>
        <category>blockchain</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>attack</tag>
        <tag>bitcoin</tag>
        <tag>ethereum</tag>
      </tags>
  </entry>
  <entry>
    <title>博客图床切换 Github + jsDelivr + PicGo</title>
    <url>/2018/02/13/new_picture_bed_github/</url>
    <content><![CDATA[<h1 id="前头的话"><a href="#前头的话" class="headerlink" title="前头的话"></a>前头的话</h1><p>博客已经使用一两年了，最近去看以前的博客的时候发现有些博文里面的图片出现无法显示的情况，虽然问题不是很严重，不过少了图片，就少了很多连贯的东西。之前是采用七牛云存储作为博客图床，可能是因为七牛云存储做了一些限制吧，导致图片无法访问。<br>这次打算重新换一种图床方式吧，毕竟使用第三方的图床总有跑路的风险。谷歌搜索了一些解决方案，其中一个是使用 Github + jsDelivr + PicGo 的方式作为个人图床的。于是打算试试，本文作为一个试验。</p>
<p><strong>使用 Github 存储图片有一个弊端就是由于 Github 仓库大小有限制，所以到了一定存量的时候，可能需要考虑其他方案或者新建新的仓库</strong>。</p>
<ul>
<li>Github： 图片仓库</li>
<li>jsDelivr: 一种免费的 CDN 解决方案</li>
<li>PicGo: 快速上传图片至 Github 并且自动拷贝图片地址（其实不用这个也行，手动把图片文件 Push 到 Github, 然后拼接图片地址就行）</li>
</ul>
<h1 id="图床测试"><a href="#图床测试" class="headerlink" title="图床测试"></a>图床测试</h1><blockquote>
<p>图片1.狼</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/wolf.jpg" alt=""></p>
<blockquote>
<p>图片2.SMAUG</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/smaug_huobiteren.jpg" alt=""></p>
<blockquote>
<p>图片3.AryaStark<br><img src="https://cdn.jsdelivr.net/gh/smaugx/MyblogImgHosting/rebootcat/AryaStark.jpg" alt=""></p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.itrhx.com/2019/08/01/A27-image-hosting/" target="_blank" rel="noopener">Github+jsDelivr+PicGo 打造稳定快速、高效免费图床</a></p>
<a id="more"></a>

<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p>
</li>
<li><p>email: <a href="mailto:&#x6c;&#105;&#x6e;&#x75;&#120;&#x63;&#111;&#x64;&#x65;&#50;&#110;&#105;&#x6b;&#105;&#x40;&#x67;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#x6c;&#105;&#x6e;&#x75;&#120;&#x63;&#111;&#x64;&#x65;&#50;&#110;&#105;&#x6b;&#105;&#x40;&#x67;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
</li>
</ul>
<p>2018-02-13 于杭州<br><em>By  <a href="https://github.com/smaugx" target="_blank" rel="noopener">史矛革</a></em></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>拉取小米监控(open-falcon)历史监控数据</title>
    <url>/2017/10/16/pull_history_data_from_open-falcon/</url>
    <content><![CDATA[<h1 id="杭州天气变冷了"><a href="#杭州天气变冷了" class="headerlink" title="杭州天气变冷了"></a>杭州天气变冷了</h1><p>最近杭州的温度下降的有点多，提前进入冬天的节奏，鼻涕不停的流。相对冷，我更喜欢热。冷真的让我受不了，杭州可还算是南方啊！</p>
<p>好久也没写博客了，这段时间一直在忙工作的事情，甚至都没顾上自己的生活。也好久没去骑车了，天气变冷了，身体也越来越垮了。想想下个月5号还有一场180KM的骑行比赛，腿上顿时一阵抽搐，该练练腿了。</p>
<p>该平衡下工作和生活了。没事骑骑车，写写博客了。好了废话不多说，今天分享的是拉取小米监控(open-falcon)历史监控数据。</p>
<h1 id="open-falcon是个啥"><a href="#open-falcon是个啥" class="headerlink" title="open-falcon是个啥?"></a>open-falcon是个啥?</h1><p><img src="http://o8fj2jbwb.bkt.clouddn.com/open-falcon-main.png" alt=""><br>正如<a href="http://open-falcon.com/" target="_blank" rel="noopener">官网</a>介绍的那样，open-falcon是一个分布式的、高性能的互联网企业级监控系统。</p>
<a id="more"></a>
<p>我自己使用的感觉来说，还是很方便的。自定义插件，集群监控，报警等，能很好的发挥监控价值。</p>
<p>通过小米监控的dashboard可以看到很多counter的监控数据曲线，但是往往有些关系是比较隐秘的关系，比如某几个counter之间的作用之后的数据是我们比较关心的，那么这里我们就可以拉取小米监控的历史数据，然后进行分析，进行处理。</p>
<p>拉取历史数据，对于v0.1和v0.2有稍微不同，v2加了鉴权。</p>
<h1 id="open-falcon-v0-1"><a href="#open-falcon-v0-1" class="headerlink" title="open-falcon v0.1"></a>open-falcon v0.1</h1><p><a href="https://book.open-falcon.org/zh/usage/query.html" target="_blank" rel="noopener">官方文档</a>中介绍的很明白，拉取代码很简单。这里就直接上代码吧。其中我使用了配置文件的方式配置endpoints/counters等。</p>
<p>配置文件point-counter.json如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"dimension"</span>:<span class="string">"http_s"</span>,</span><br><span class="line">  <span class="attr">"bandqps"</span>:<span class="string">"qps"</span>,</span><br><span class="line">  <span class="attr">"hour"</span>: <span class="number">24</span>,</span><br><span class="line">  <span class="attr">"compare"</span>:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"time"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"before"</span>:<span class="string">"2017-09-13 18:30:00"</span>,</span><br><span class="line">      <span class="attr">"after"</span>:<span class="string">"2017-09-13 18:30:00"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"filesize"</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">"https"</span>:&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"counters"</span>:[</span><br><span class="line">    <span class="string">"cpu_util"</span>,</span><br><span class="line">    <span class="string">"traffic_out_80"</span>,</span><br><span class="line">    <span class="string">"traffic_out_443"</span>,</span><br><span class="line">    <span class="string">"Nginx-Requests"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"endpoints"</span>:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"default-point"</span>:[</span><br><span class="line">      <span class="string">"TCP-CDN"</span></span><br><span class="line">       ],</span><br><span class="line">    <span class="attr">"another-point"</span>:[</span><br><span class="line">      <span class="string">"TAZ-03"</span>,</span><br><span class="line">      <span class="string">"TAZ-04"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拉取代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*- coding:utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pull history data of marco from  open-falcon(小米监控) and  write to Historydatafile</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[&#123;"endpoint":"hostname1","counter":"cpu_util","dstype":"GAUGE","step":60,"Values":[&#123;"timestamp":1492417260,"value":103.670000&#125;,&#123;"timestamp":1492417320,"value":106.060000&#125;]&#125;]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">upyun = <span class="string">'smaug'</span></span><br><span class="line">endcounter_file = <span class="string">'./point-counter.json'</span></span><br><span class="line"></span><br><span class="line">example = &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"end"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"cf"</span>: <span class="string">"AVERAGE"</span>,</span><br><span class="line">    <span class="string">"endpoint_counters"</span>: [</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queryload = []</span><br><span class="line">CONFIG = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">config_load</span><span class="params">(filename)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> os.path.isfile(filename):</span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">      <span class="keyword">return</span> json.load(f)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"%s not exist"</span> % filename)</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_endpointlist_And_counters</span><span class="params">(conf_dict)</span>:</span></span><br><span class="line">    <span class="comment">#print conf_dict</span></span><br><span class="line">    <span class="keyword">return</span> conf_dict.get(<span class="string">"endpoints"</span>), conf_dict.get(<span class="string">"counters"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(d,endpoint, counter)</span>:</span></span><br><span class="line">    endpoint_counter = &#123;</span><br><span class="line">        <span class="string">"endpoint"</span>: endpoint,</span><br><span class="line">        <span class="string">"counter"</span>: counter,</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="string">'endpoint_counters'</span>].append(endpoint_counter)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkd</span><span class="params">(start,end,ep,counterlist)</span>:</span></span><br><span class="line">  d = copy.deepcopy(example)</span><br><span class="line">  d[<span class="string">'start'</span>]=start</span><br><span class="line">  d[<span class="string">'end'</span>] = end</span><br><span class="line">  <span class="keyword">for</span> cv <span class="keyword">in</span> counterlist[:]:</span><br><span class="line">    append(d,ep, cv)</span><br><span class="line">  queryload.append(d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_end</span><span class="params">(endtime,hour)</span>:</span></span><br><span class="line">  <span class="comment">#endtime 格式为 "2017-04-16 23:59:59"</span></span><br><span class="line">  end = int(time.mktime(time.strptime(endtime,<span class="string">'%Y-%m-%d %H:%M:%S'</span>)))</span><br><span class="line">  ts = <span class="number">3600</span> * hour</span><br><span class="line">  start = end - ts <span class="comment"># 截至时间戳 （例子中为查询过去一个小时的数据）</span></span><br><span class="line">  <span class="keyword">return</span> start,end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_is_dimension</span><span class="params">(CONF,hours,com)</span>:</span></span><br><span class="line">  endpointlists , counterlist = get_endpointlist_And_counters(CONF)</span><br><span class="line">  endpointlist = endpointlists.get(<span class="string">"default-point"</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> endpointlist <span class="keyword">or</span> <span class="keyword">not</span> counterlist :</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line">  before = com.get(<span class="string">"time"</span>).get(<span class="string">"before"</span>)</span><br><span class="line">  sb,eb= start_end(before,hours)</span><br><span class="line">  <span class="keyword">for</span> ep <span class="keyword">in</span> endpointlist[:]:</span><br><span class="line">    mkd(sb,eb,ep,counterlist)</span><br><span class="line"></span><br><span class="line">  after  = com.get(<span class="string">"time"</span>).get(<span class="string">"after"</span>)</span><br><span class="line">  sa,ea = start_end(after,hours)</span><br><span class="line">  <span class="keyword">for</span> ep <span class="keyword">in</span> endpointlist[:]:</span><br><span class="line">    mkd(sa,ea,ep,counterlist)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filesize_is_dimension</span><span class="params">(CONF,hours)</span>:</span></span><br><span class="line">  endpointlists , counterlist = get_endpointlist_And_counters(CONF)</span><br><span class="line">  default_point = endpointlists.get(<span class="string">"default-point"</span>)</span><br><span class="line">  another_point = endpointlists.get(<span class="string">"another-point"</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> default_point <span class="keyword">or</span> <span class="keyword">not</span> another_point:</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line">  end = int(time.mktime(time.strptime(<span class="string">"2017-05-25 08:01:30"</span>,<span class="string">'%Y-%m-%d %H:%M:%S'</span>)))</span><br><span class="line">  <span class="comment">#end = int(time.time())</span></span><br><span class="line">  start = end - <span class="number">3600</span> * hours</span><br><span class="line">  <span class="keyword">for</span> ep <span class="keyword">in</span> default_point[:]:</span><br><span class="line">    mkd(start,end,ep,counterlist)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ep <span class="keyword">in</span> another_point[:]:</span><br><span class="line">    mkd(start,end,ep,counterlist)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CONFIG = config_load(endcounter_file)</span><br><span class="line">dimension = CONFIG.get(<span class="string">"dimension"</span>)</span><br><span class="line">hour = CONFIG.get(<span class="string">"hour"</span>)</span><br><span class="line">compare = CONFIG.get(<span class="string">"compare"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> dimension == <span class="string">"time"</span>:</span><br><span class="line">  time_is_dimension(CONFIG,hour,compare)</span><br><span class="line"><span class="keyword">elif</span> dimension == <span class="string">"filesize"</span>:</span><br><span class="line">  filesize_is_dimension(CONFIG,hour)</span><br><span class="line">  </span><br><span class="line">endname = endcounter_file[<span class="number">2</span>:<span class="number">-5</span>]</span><br><span class="line"></span><br><span class="line">Historydatafile = <span class="string">"./&#123;0&#125;_hist&#123;1&#125;h_&#123;2&#125;_&#123;3&#125;.data"</span>.format(upyun,hour,endname,dimension)</span><br><span class="line"></span><br><span class="line">query_api = <span class="string">"http://queryip:9966/graph/history"</span></span><br><span class="line"><span class="keyword">if</span> os.path.isfile(Historydatafile):</span><br><span class="line">  os.remove(Historydatafile)</span><br><span class="line"><span class="keyword">for</span> vd <span class="keyword">in</span> queryload[:]:</span><br><span class="line">  r = requests.post(query_api, data=json.dumps(vd))</span><br><span class="line">  <span class="comment">#print r.text</span></span><br><span class="line">  STORE = r.json()</span><br><span class="line">  <span class="keyword">with</span> open(Historydatafile, <span class="string">'aw'</span>) <span class="keyword">as</span> fout:</span><br><span class="line">    json.dump(STORE, fout)</span><br><span class="line">    fout.write(<span class="string">'\n'</span>)</span><br><span class="line">print(<span class="string">"pull %s hours historydata to %s"</span> % (hour, Historydatafile))</span><br></pre></td></tr></table></figure>

<p>我上面代码实现的功能是能同时拉取不同的endpoint-counter对写入到文件中保存。</p>
<h1 id="open-falcon-v0-2"><a href="#open-falcon-v0-2" class="headerlink" title="open-falcon v0.2"></a>open-falcon v0.2</h1><p>v0.2相比v0.1，加了一层鉴权。另外也修改了查询的json数据格式。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">"start"</span>: start,</span><br><span class="line">       <span class="attr">"end"</span>: end,</span><br><span class="line">       <span class="attr">"cf"</span>: <span class="string">"AVERAGE"</span>,</span><br><span class="line">       <span class="attr">"endpoint_counters"</span>: [</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">"endpoint"</span>: <span class="string">"host1"</span>,</span><br><span class="line">               <span class="attr">"counter"</span>: <span class="string">"cpu.idle"</span>,</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">"endpoint"</span>: <span class="string">"host1"</span>,</span><br><span class="line">               <span class="attr">"counter"</span>: <span class="string">"load.1min"</span>,</span><br><span class="line">           &#125;,</span><br><span class="line">       ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上是v0.1版本的历史数据查询参数格式，对比v0.2版本：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"step"</span>: <span class="number">60</span>,</span><br><span class="line">  <span class="attr">"start_time"</span>: <span class="number">1481854596</span>,</span><br><span class="line">  <span class="attr">"hostnames"</span>: [</span><br><span class="line">    <span class="string">"docker-a"</span>,</span><br><span class="line">    <span class="string">"docker-b"</span>,</span><br><span class="line">    <span class="string">"docker-c"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"end_time"</span>: <span class="number">1481858193</span>,</span><br><span class="line">  <span class="attr">"counters"</span>: [</span><br><span class="line">    <span class="string">"cpu.idle"</span>,</span><br><span class="line">    <span class="string">"cpu.iowait"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"consol_fun"</span>: <span class="string">"AVERAGE"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>官方API： <a href="http://open-falcon.org/falcon-plus/doc/graph.html" target="_blank" rel="noopener">POST : /api/v1/graph/history</a></p>
<p>这里重点需要拿到的一个东西叫做”sig”。形如:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"root"</span>,<span class="attr">"sig"</span>:<span class="string">"427d6803b78311e68afd0242ac130006"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>拿取方式通过用户名和密码查询。核心代码如下：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="comment">#username和password是v0.2版本新加的，前端dashboard需要注册。ip就是open-falcon运行的机器ip，具体应该是query组件的地址</span></span><br><span class="line"><span class="attr">mytoken</span> = token(<span class="string">"username"</span>, <span class="string">"password"</span>, <span class="string">"http://queryip:8080/api/v1"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def auth_requests(method, *args, **kwargs):</span><br><span class="line">  <span class="keyword">if</span> mytoken.<span class="attr">SIG</span> == None:</span><br><span class="line">    <span class="comment"># 定义一个要提交的数据数组(字典)</span></span><br><span class="line">    <span class="attr">data</span> = &#123;&#125;</span><br><span class="line">    data['name'] = mytoken.NAME</span><br><span class="line">    data['password'] = mytoken.PASSWORD</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义post的地址</span></span><br><span class="line">    <span class="attr">url</span> = mytoken.API_ADDR + '/user/login'</span><br><span class="line">    <span class="attr">post_data</span> = urllib.urlencode(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提交，发送数据</span></span><br><span class="line">    <span class="attr">req</span> = urllib2.urlopen(url, post_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取提交后返回的信息</span></span><br><span class="line">    <span class="attr">content</span> = req.read()</span><br><span class="line"></span><br><span class="line">    <span class="attr">Name</span> = json.loads(content)['name']</span><br><span class="line">    <span class="attr">Sig</span> = json.loads(content)['sig']</span><br><span class="line">    <span class="attr">Admin</span> = json.loads(content)['admin']</span><br><span class="line"></span><br><span class="line">    print '&#123;<span class="string">"name: %s"</span>,<span class="string">"Sig: %s"</span>,<span class="string">"Admin: %s"</span>&#125;' % (Name, Sig, Admin)</span><br><span class="line">    mytoken.<span class="attr">SIG</span> = Sig</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> not content:</span><br><span class="line">      raise Exception(<span class="string">"no api token"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="attr">headers</span> = &#123;</span><br><span class="line">    <span class="string">"Apitoken"</span>: json.dumps(&#123;<span class="string">"name"</span>: mytoken.NAME, <span class="string">"sig"</span>: mytoken.SIG&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> not kwargs:</span><br><span class="line">    <span class="attr">kwargs</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="string">"headers"</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">    headers.update(kwargs[<span class="string">"headers"</span>])</span><br><span class="line">    del kwargs[<span class="string">"headers"</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="attr">method</span> == <span class="string">"POST"</span>:</span><br><span class="line">    return requests.post(*args, <span class="attr">headers=headers,</span> **kwargs)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    raise Exception(<span class="string">"invalid http method"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def post_history(method,d):</span><br><span class="line">  <span class="attr">h</span> = &#123;<span class="string">"Content-type"</span>: <span class="string">"application/json"</span>,<span class="string">"X-Forwarded-For"</span>:<span class="string">"127.0.0.1"</span>&#125;</span><br><span class="line">  <span class="attr">r</span> = auth_requests(method, <span class="string">"%s/graph/history"</span> % (mytoken.API_ADDR), <span class="attr">headers=h,</span> <span class="attr">data=json.dumps(d))</span></span><br><span class="line">  <span class="attr">j</span> = r.json()</span><br><span class="line">  return j</span><br><span class="line">  </span><br><span class="line"><span class="comment">#省略了部分代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.isfile(Historydatafile):</span><br><span class="line">  os.remove(Historydatafile)</span><br><span class="line">for vd <span class="keyword">in</span> queryload[:]:</span><br><span class="line">  <span class="attr">STORE</span> = post_history(<span class="string">"POST"</span>,vd)</span><br><span class="line"><span class="comment">#  print STORE</span></span><br><span class="line">  <span class="keyword">with</span> open(Historydatafile, 'aw') as fout:</span><br><span class="line">    json.dump(STORE, fout)</span><br><span class="line">    fout.write('\n')</span><br><span class="line">print(<span class="string">"pull %s hours historydata to %s"</span> % (hour, Historydatafile))</span><br></pre></td></tr></table></figure>

<p>官方相关链接:</p>
<blockquote>
<p><a href="http://open-falcon.org/falcon-plus/#/authentication" target="_blank" rel="noopener">http://open-falcon.org/falcon-plus/#/authentication</a></p>
<p><a href="http://open-falcon.org/falcon-plus/doc/graph.html" target="_blank" rel="noopener">http://open-falcon.org/falcon-plus/doc/graph.html</a></p>
</blockquote>
<h1 id="历史数据用来做什么"><a href="#历史数据用来做什么" class="headerlink" title="历史数据用来做什么"></a>历史数据用来做什么</h1><p>通常单一的一个指标并不能反映我们需要的信息，往往好多指标是相互作用的，那么这些相互作用的指标并非很直观的显示，拉取历史数据，然后本地处理，采用另外的一些方式，可以更加精确的得到指标间的关系。</p>
<p>下图是拉取历史监控数据后，分析某台机器上的某个服务CPU-BandWidth之间的关系：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/cpuband-a-sfile-oldnewversion.png" alt=""></p>
<h1 id="周末骑行龙门古镇"><a href="#周末骑行龙门古镇" class="headerlink" title="周末骑行龙门古镇"></a>周末骑行龙门古镇</h1><p>骑行距离120KM ~ 150KM，好激动！</p>
]]></content>
      <categories>
        <category>linux</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>open-falcon</tag>
      </tags>
  </entry>
  <entry>
    <title>python杂记</title>
    <url>/2017/07/16/python-notes/</url>
    <content><![CDATA[<h1 id="唠里个叨"><a href="#唠里个叨" class="headerlink" title="唠里个叨"></a>唠里个叨</h1><p>关于python的笔记，比较杂，想到啥就说啥。</p>
<h1 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h1><p>官方文档: <a href="https://docs.python.org/2/library/functions.html#open" target="_blank" rel="noopener">open</a></p>
<p>这是python内建的函数，基本用法如下：</p>
<pre><code>hfile  = open(file_name [, access_mode][, buffering])</code></pre><p>其中access_mode表示打开的模式，常用的如下：</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td>rb</td>
<td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td>r+</td>
<td>打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td>rb+</td>
<td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td>w</td>
<td>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>a</td>
<td>打开一个文件用于追加。</td>
</tr>
<tr>
<td>a+</td>
<td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody></table>
<p>举例如下：</p>
<a id="more"></a>

<pre><code>hfile  = open(&apos;a.data&apos;,&apos;r+&apos;)
print hfile.read()
hfile.write(&quot;hello\n&quot;)
hfile.close()</code></pre><p>不过现在一般推荐另外一种写法：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.data'</span>,<span class="string">'r+'</span>) <span class="keyword">as</span> hfile:</span><br><span class="line">  print hfile.<span class="built_in">read</span>()</span><br><span class="line">  hfile.<span class="built_in">write</span>(<span class="string">"world\n"</span>)</span><br><span class="line">  hfile.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>

<p>文件对象的方法常用的有：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hfile</span><span class="selector-class">.readline</span>()</span><br><span class="line"><span class="selector-tag">hfile</span><span class="selector-class">.readlines</span>()</span><br></pre></td></tr></table></figure>
<p><strong>这里注意一下区别：readline是每次读取一行，readlines是一次性读取所有行，所以这里要注意，不要爆了内存，/滑稽脸</strong></p>
<h1 id="python-json"><a href="#python-json" class="headerlink" title="python json"></a>python json</h1><p>官方文档：<a href="https://docs.python.org/2/library/json.html" target="_blank" rel="noopener">json encode and decode</a></p>
<p>这里说的是python内置的json，为了提高效率，当然可以使用第三方的json库，比如cjson。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>loads</td>
<td>将已经编码好的json字符串转换为python对象</td>
</tr>
<tr>
<td>dumps</td>
<td>与loads相反，将python对象序列化为json字符串</td>
</tr>
</tbody></table>
<p><strong>这里需要对比如下一对函数(不常用):</strong></p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>load</td>
<td>读json文件为python对象</td>
</tr>
<tr>
<td>dump</td>
<td>与load相反，python对象写入json文件</td>
</tr>
</tbody></table>
<p>写脚本的时候经常碰到的是json字符串和dict的转换。</p>
<p><strong><em>暂时就这么多，以后想到再补充</em></strong></p>
<h1 id="python-dict"><a href="#python-dict" class="headerlink" title="python  dict"></a>python  dict</h1><p>python字典应该是比较常用的一种对象，也比较好用。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">d</span> = &#123;<span class="string">"name"</span>:<span class="string">"smaug"</span>,<span class="string">"age"</span>:<span class="number">25</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>&#125;</span><br></pre></td></tr></table></figure>


<h2 id="访问字典"><a href="#访问字典" class="headerlink" title="访问字典"></a>访问字典</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">age = d[<span class="string">'age'</span>]</span><br><span class="line"><span class="builtin-name">print</span> age</span><br></pre></td></tr></table></figure>
<p>但推荐采用下面一种，dict内置函数：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">age = d.<span class="builtin-name">get</span>(<span class="string">'age'</span>)</span><br><span class="line"><span class="builtin-name">print</span> age</span><br></pre></td></tr></table></figure>
<p>如果age不存在，则返回None</p>
<h2 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h2><p>常用两种方法：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment"># method 1</span></span><br><span class="line"><span class="keyword">for</span>  i in d:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"d[%s] = %s"</span>.format(i,d[i])</span><br><span class="line">  </span><br><span class="line"><span class="comment"># method 2</span></span><br><span class="line"><span class="keyword">for</span> (k,v) in d.items():</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"d[%s] = %s"</span>.format(k,v)</span><br></pre></td></tr></table></figure>

<h1 id="时间、日期相关"><a href="#时间、日期相关" class="headerlink" title="时间、日期相关"></a>时间、日期相关</h1><p>这块平常经常用到，日期转时间戳，时间戳转日期，日期格式化等，但我每次都是记不住。</p>
<h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1508103239.487282</span></span><br><span class="line"><span class="built_in">time</span>.<span class="built_in">time</span>()</span><br></pre></td></tr></table></figure>
<p>返回当前时间戳，单位秒。</p>
<h2 id="时间戳转日期"><a href="#时间戳转日期" class="headerlink" title="时间戳转日期"></a>时间戳转日期</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">now</span> = time.time()</span><br><span class="line"><span class="attr">tl</span> = time.localtime(now)</span><br><span class="line"><span class="attr">date</span> = time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, tl)</span><br><span class="line"><span class="comment"># 结果为 '2017-10-16 12:34:00'</span></span><br></pre></td></tr></table></figure>

<h2 id="日期转时间戳"><a href="#日期转时间戳" class="headerlink" title="日期转时间戳"></a>日期转时间戳</h2><figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">dnow = '<span class="number">2017</span>-<span class="number">10</span>-<span class="number">16</span> <span class="number">12</span>:<span class="number">34</span>:<span class="number">00</span>'</span><br><span class="line">timestamp = time.mktime(time.strptime(dnow,'<span class="built_in">%Y</span>-<span class="built_in">%m</span>-<span class="built_in">%d</span> <span class="built_in">%H</span>:<span class="built_in">%M</span>:<span class="built_in">%S</span>'))</span><br></pre></td></tr></table></figure>

<h1 id="python表格"><a href="#python表格" class="headerlink" title="python表格"></a>python表格</h1><p>一般用于打印或者日志输出，以表格的方式展示也会很美观。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> prettytable import PrettyTable</span><br><span class="line"></span><br><span class="line"> row = PrettyTable([<span class="string">"城市"</span>,<span class="string">"总访问量"</span>, <span class="string">"失败量"</span>, <span class="string">"慢速量"</span>,<span class="string">"失败率"</span>,<span class="string">"慢速率"</span>])</span><br><span class="line"> row.align[<span class="string">"城市"</span>] = <span class="string">"l"</span># Left<span class="built_in"> align </span>city names</span><br><span class="line"> row.padding_width = 1# One space between column edges <span class="keyword">and</span> contents (default)</span><br><span class="line"> </span><br><span class="line"> retrow = [[<span class="string">'郑州'</span>,<span class="string">'241'</span>,1,2,0.41,0.83],[<span class="string">'灵宝'</span>,56,0,1,0.0,1.79]]</span><br><span class="line"> <span class="keyword">for</span> r <span class="keyword">in</span> retrow:</span><br><span class="line">   row.add_row(r)</span><br><span class="line"></span><br><span class="line">with open(<span class="string">'mytable'</span>,<span class="string">'w'</span>) as hfile:</span><br><span class="line">  hfile.write(str(row))</span><br><span class="line">  hfile.close()</span><br></pre></td></tr></table></figure>
<p>最终结果形如：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/slowpython.png" alt=""></p>
<h1 id="python可变参数"><a href="#python可变参数" class="headerlink" title="python可变参数"></a>python可变参数</h1><p>形如下面的函数定义就是可变参数：</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">def auth_requests(<span class="function"><span class="keyword">method</span>, *<span class="title">args</span>, **<span class="title">kwargs</span>):</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="args"><a href="#args" class="headerlink" title="*args"></a>*args</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">def Func(someparam, *args):	print someparam	print args	&gt;&gt;&gt; Func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)<span class="number">1</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>Func 中匹配完定义好的参数，剩余的参数以元组的形式存储在 args（args 名称你可以自行定义），因此在上述程序中只要你传入不小于 1 个参数，该函数都会接受，当然你也可以直接定义只接受可变参数，你就可以自由传递你的参数。</p>
<h2 id="kwargs"><a href="#kwargs" class="headerlink" title="**kwargs"></a>**kwargs</h2><p>与<em>args不同，*</em>kwargs不是以元组的方式保存，而是需要采用arg1 = value1,arg2 = value2的字典形式。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def func(a,<span class="number">*b</span>,*<span class="number">*c</span>):</span><br><span class="line"><span class="built_in">..</span>.   <span class="builtin-name">print</span> a</span><br><span class="line"><span class="built_in">..</span>.   <span class="builtin-name">print</span> b</span><br><span class="line"><span class="built_in">..</span>.   <span class="builtin-name">print</span> c</span><br><span class="line"><span class="built_in">..</span>.</span><br><span class="line">&gt;&gt;&gt; func(<span class="string">'helloa'</span>,<span class="string">'hellob'</span>,<span class="string">'hahab'</span>,data = <span class="string">'cc'</span>,cd = <span class="string">'cccc'</span>)</span><br><span class="line">helloa</span><br><span class="line">(<span class="string">'hellob'</span>, <span class="string">'hahab'</span>)</span><br><span class="line">&#123;<span class="string">'data'</span>: <span class="string">'cc'</span>, <span class="string">'cd'</span>: <span class="string">'cccc'</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>还是挺简单的。</p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><p>暂时就写到这里吧，有想到的再补充。</p>
]]></content>
      <categories>
        <category>linux</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>切换博客从win到mac</title>
    <url>/2017/03/22/rebuild_hexoblog_in_mac/</url>
    <content><![CDATA[<h1 id="哎"><a href="#哎" class="headerlink" title="哎"></a>哎</h1><p>事实证明，之前做的那些自动化集成并没有很好的运用，现如今换了电脑，需要写博客，还是想重新再mac上搭建一个全新的hexo博客，哎，折腾的人生！</p>
<p>搭建过程类似我之前写过的博客，请自行查阅。这篇博文为了测试！</p>
<h1 id="还是简要记录下"><a href="#还是简要记录下" class="headerlink" title="还是简要记录下"></a>还是简要记录下</h1><p>重新换电脑搭建博客，相对来说快了很多，大概用了1个小时搞定（还是有点久？）下面简单记录下步骤吧~</p>
<h2 id="安装hexo，安装node-js"><a href="#安装hexo，安装node-js" class="headerlink" title="安装hexo，安装node.js"></a>安装hexo，安装node.js</h2><p>步骤很简单。略。这里的就会埋下隐患，因为hexo是最新版，node.js也是，如果采用前面的博文<a href="http://rebootcat.com/2016/12/13/use-coding-update-blog/" target="_blank" rel="noopener">使用coding私有仓库多终端同步编写博客</a>中的方法就会出现问题。原因是最初搭建博客时候的hexo和node.js的版本与现在的不一样了。</p>
<p>好吧，我们另觅他径。</p>
<h2 id="另外的办法"><a href="#另外的办法" class="headerlink" title="另外的办法"></a>另外的办法</h2><p>参照之前的博文<a href="http://rebootcat.com/2016/06/10/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener">我的个人博客搭建记录</a>中的方法，<strong>配置好ssh key</strong>后，执行下方几个命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo npm install hexo-cli -g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog</span></span><br></pre></td></tr></table></figure>
<p>完了之后你可以用hexo s命令看看是不是能看到helloworld的博文。能的话基本证明博客框架是没问题的。那么接下来怎么做呢？</p>
<a id="more"></a>
<p>还记得之前说的我对博客框架的源代码进行了备份，在coding的私有仓库里？对，没错，找到后,只需要把博客源代码根目录下的几个文件/文件夹放到目前新建的blog目录下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Dockerfile</span> </span><br><span class="line"><span class="selector-tag">daocloud</span><span class="selector-class">.yml</span></span><br><span class="line"><span class="selector-tag">post</span><span class="selector-class">.sh</span> </span><br><span class="line"><span class="selector-tag">themes</span></span><br><span class="line">_<span class="selector-tag">config</span><span class="selector-class">.yml</span>        </span><br><span class="line"><span class="selector-tag">source</span></span><br></pre></td></tr></table></figure>
<p>前3个是我自己特有的，你只需要注意后面三个就行。<br>然后关键的一步来了:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-baidu-sitemap <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-feed</span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>这几个插件是最初搭建博客的时候独立安装的，如果还有其他的插件，也需要独立执行（why?前面说过了npm的版本不一样，重新独立执行后使用的是最新版的npm）</p>
<p>以上就是新的方法，其实也类似吧。</p>
<h2 id="推送到github-Pages-coding-Pages"><a href="#推送到github-Pages-coding-Pages" class="headerlink" title="推送到github Pages/coding Pages"></a>推送到github Pages/coding Pages</h2><p>很简单，执行:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">heox</span> <span class="string">clean </span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d -g</span></span><br></pre></td></tr></table></figure>
<p>这里你如果碰到类似下面的错误：</p>
<blockquote>
<p>% hexo deploy<br>ERROR Deployer not found: github</p>
</blockquote>
<p>解决办法：<a href="https://github.com/hexojs/hexo/issues/1040" target="_blank" rel="noopener">github #1040</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>重新执行hexo d -g 试试？</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>其实弄这个也不算折腾，我重新搭建的时间明显短了很多(废话),关键是需要对博客源代码目录下的结构需要了解，哪一个文件夹是做什么的，哪一个不能动，哪一个跟版本有关，哪一个动了也没事，等等。好了，废话不多说，总体看来，目前推送后看到的博客网站基本正确，有个小问题是原来的“搜索”功能没有了。这个我明天早晨再看看。该关电脑睡觉了，10:56了。😪</p>
<h1 id="次日更新"><a href="#次日更新" class="headerlink" title="次日更新"></a>次日更新</h1><p>解决了之前碰到的小问题，比如rss订阅，sitemap.xml,baidusitemap.xml，local search等。<br>这里主要是想说，早上访问网站的时候出现了下面的提示：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/%E5%A4%9A%E8%AF%B4%E5%88%B0%E6%9C%9F%E6%8F%90%E9%86%92.png" alt=""><br>没办法，只有早做打算。很多人都早已诟病多说了，我自己的感觉可能不太强烈，毕竟刚开始评论数也不是很多。不过还是打算做点调整。</p>
<h2 id="从多说迁移到Disqus"><a href="#从多说迁移到Disqus" class="headerlink" title="从多说迁移到Disqus"></a>从多说迁移到Disqus</h2><p>首先从多说后台导出文章评论数据为export.json文件（步骤略）,其次注册<a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a>,填写博客网站地址，填写disqus_shortname，比如我的”rebootcatmh”,然后去next主题配置文件_config.yml中添加：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">disqus_shortname:</span> rebootcatmh</span><br></pre></td></tr></table></figure>
<p>然后执行：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo d -g</span></span><br></pre></td></tr></table></figure>
<p>是不是看到了Disqus骚气的评论框了呢？😉<br><img src="http://o8fj2jbwb.bkt.clouddn.com/disqus.png" alt=""></p>
<p>到这里只是把评论系统换成了Disqus，那么迁移多说的评论数据呢？<br>可以参考<a href="http://urouge.github.io/migrate-to-disqus/" target="_blank" rel="noopener">多说评论迁移至Disqus</a><br>我这里就把方法截个图，万一他的网站挂了呢？(捂脸)<br><img src="http://o8fj2jbwb.bkt.clouddn.com/jsontoxmldisqus.png" alt=""></p>
<p>然后去看看是不是评论数据都还在呢？<br><img src="http://o8fj2jbwb.bkt.clouddn.com/dis.png" alt=""></p>
<h2 id="Disqus迁移后小问题"><a href="#Disqus迁移后小问题" class="headerlink" title="Disqus迁移后小问题"></a>Disqus迁移后小问题</h2><p>可以看到上图，迁移后用户头像没有了，只是默认的头像。而且好像少了几条评论？这个具体我再看看。</p>
<p>好，更新到这里完！(切换是成功了，但是Disqus在国内是被墙的，暂时打算用duoshuo到它停止那天）</p>
<h1 id="再扯几句"><a href="#再扯几句" class="headerlink" title="再扯几句"></a>再扯几句</h1><p>这是我的第一台mac，说实话，入手两天了，我已经玩得很6了，确实不错。手势确实比较多，也很方便，很多功能也很人性化，没办法，这么多年一直在用windows,突然转过来，那种惊为天人的感觉很强烈！</p>
<p>另外发现了一个小惊喜，现在推送到github pages/coding pages后，更新的速度比原来快了很多，几乎我本地hexo d后，chrome里访问博客就能看到了，真的还是挺惊奇的呢！</p>
<p>好了，扯完了，睡觉~~</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a> (<strong>默认</strong>)</p>
</li>
<li><p>email: <a href="mailto:&#108;&#105;&#x6e;&#x75;&#x78;&#99;&#x6f;&#100;&#x65;&#x32;&#x6e;&#x69;&#107;&#x69;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;">&#108;&#105;&#x6e;&#x75;&#x78;&#99;&#x6f;&#100;&#x65;&#x32;&#x6e;&#x69;&#107;&#x69;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;</a></p>
</li>
</ul>
<p>2017-03-22 于杭州<br><em>By  <a href="http://weibo.com/2793607050/profile?topnav=1&wvr=6&is_all=1" target="_blank" rel="noopener">史矛革</a></em></p>
]]></content>
      <categories>
        <category>blog</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>mac</tag>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊面试那点事</title>
    <url>/2017/05/29/smalltalk_about_interview/</url>
    <content><![CDATA[<h1 id="食言了"><a href="#食言了" class="headerlink" title="食言了"></a>食言了</h1><p>记得刚写好之前的一篇博客<a href="http://rebootcat.com/2017/03/17/use-gcov-in-hugeprogram/" target="_blank" rel="noopener">c++单元测试框架CPPUNIT的使用以及gcov统计大型项目的测试覆盖率</a>时在文末承诺下一篇写面试的经验与感想，然而下一篇并没有写关于面试的东西。刚才的这篇博文是我离职上一个公司的最后几天写的，那个时候已经找到了新的工作，也面试了好几家公司，因此想趁热打铁，好好记录下面试的过程，分享下面试的感想，然而一直拖到了今天。因此我食言了。废话不多说，东拉西扯开始了。</p>
<h1 id="躲不过去的追问"><a href="#躲不过去的追问" class="headerlink" title="躲不过去的追问"></a>躲不过去的追问</h1><p>当我们谈面试的时候，意味着离职，那么我们必然要问“你为什么离职？”这个问题的答案有很多方面，每个人的答案或许都有不同，但总是离不开两个至关重要的因素，这也是马云爸爸说过的，“要么是不开心，要么是钱少了”，然而钱在一定程度上影响了大部分的开心或不开心，所以归根结底，大多数离职是因为“不开心”。这里不跟别人争辩，我只说大多数，当然还有很多因素，比如发展，比如规划，比如各种各种很有正能量的道理，但这些我并没有否认。</p>
<p>那么既然说了“不开心”,再追问“为什么不开心？”我想这个地方追问得到的答案才是千变万化，比如“这跟我之前的预期不太一样”“这完全发挥不了自己的能力”“公司技术氛围不是很浓厚”“团队氛围不好，内部学和尚的太多”，当然还有很多很多。</p>
<p>那么既然已经追问得到了这些深层次的原因，那么为什么就已经得到了解答。但这跟离职之之间好像还间隔一个问题可以再追问，“你为什么不尝试找解决方法，你为什么不改变自己适应环境，你有没有想过是你自己不够优秀？”诚然，这些都对，这些都是值得思考的问题。我一直觉得，工作就像恋爱，开心最重要，从相识相知到相爱，但还有可能从相识相知相爱到相不爱。由相爱到相不爱的过程，我们也尝试过各种解决办法，我们也曾怀疑自己不够优秀，我们也在努力的坚持。但不合适或许就该放手，懂得妥协也许是一种最正确的处世哲学。说得偏了些，简而言之，目前的工作不适合自己，我应该找合适的工作，发挥自己的最大价值，实现自己的理想，因为我生活的理想啊，就是理想的生活。</p>
<h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><a id="more"></a>
<h2 id="简历的撰写"><a href="#简历的撰写" class="headerlink" title="简历的撰写"></a>简历的撰写</h2><p>面试的第一关——简历，这也是很重要的一关。写简历应该怎么写？我相信这个问题在网上有很多很多可以参考的回答。我当时参考的是<a href="http://blog.csdn.net/foruok?viewmode=contents" target="_blank" rel="noopener">foruok</a>大神写的一篇博文<a href="http://blog.csdn.net/foruok/article/details/50726021?locationNum=1&fps=1" target="_blank" rel="noopener">程序员这样优化简历-一投制胜</a>，真的很受用。我的简历也基本是参考了他的格式，大致分为几个部分：</p>
<ul>
<li><strong>个人信息</strong></li>
<li><strong>求职意向</strong></li>
<li><strong>技能与评价</strong></li>
<li><strong>工作经历</strong></li>
<li><strong>项目经历</strong></li>
<li><strong>兴趣爱好</strong></li>
<li><strong>自我评价</strong></li>
</ul>
<blockquote>
<p>个人信息</p>
</blockquote>
<blockquote>
<blockquote>
<p>个人信息一栏尽量简洁明了，两三行就能清晰的介绍自己的姓名，性别，年龄，家乡，毕业院校，学历，联系方式,切忌啰嗦</p>
</blockquote>
</blockquote>
<blockquote>
<p>求职意向</p>
<blockquote>
<p>岗位名称和意向城市，意向城市可以写不止一个，例如“高级软件开发工程师(c++)，杭州”</p>
</blockquote>
</blockquote>
<blockquote>
<p>技能与评价</p>
<blockquote>
<p>这里遵从几个原则，一是重要的写前面，不重要的不自信的往后写；二是少用”精通”等字眼，当然你要是够牛逼，你可以都写精通；三是每条之间尽量不要重复；四是尽量比较全面的覆盖”语言、操作系统、计算机网络、多进程多线程、数据库、设计模式”等这几大块的知识</p>
</blockquote>
</blockquote>
<blockquote>
<p>工作经历</p>
<blockquote>
<p>这里有两个关键点：一是真实(诚信是立人之本）;二是一定要突出你的贡献，你的能力，你的工作成果，工作成果可以分条写，每条尽量不要是打酱油的，要是真真实实做出了点事情的</p>
</blockquote>
</blockquote>
<blockquote>
<p>项目经历</p>
<blockquote>
<p>项目经历比较重要，也是一份简历当中最重要的部分了，也是面试的时候被问的最多的部分了。这里有几个点需要注意：一是采用倒叙的方式，在项目经验很多的情况下捡重点的讲；二是每个项目经历，描述背景，明确自己的职责，突出自己的业绩和贡献；三是描述的话尽量避免主观评价，言辞中性，要给别人一种主动评价的感觉</p>
</blockquote>
</blockquote>
<blockquote>
<p>兴趣爱好</p>
<blockquote>
<p>这里其实没什么好说的，我只是觉得这里需要注意的是尽量避免一些看上去就不应该写在简历上的话，比如“喜欢泡吧，喜欢养小动物等”,你要记住，你简历上的每一个字都其实关系到你这个人想展示给用人单位的一面，那么”泡吧和养小动物“其实对你没什么帮助。我的建议”尽量写一些有团队活动的兴趣爱好，或者能突出你的坚持，你的挑战的一些活动，比如骑行，比如攀岩等。</p>
</blockquote>
</blockquote>
<blockquote>
<p>自我评价</p>
<blockquote>
<p>这里虽然是主观评价，但是也尽量避免过于主观，要始终记得简历上的每一个字都是你想展示给用人单位的面。我的建议，尽量说一些正能量的事，而且能举个简单的例子最好了，比如“热爱骑车，曾参加环绍自行车比赛，单日骑行 160+公里”。这样的话，也更容易让人相信，也避免了过于主观，能让面试官得出一些自己的判断，而这正好是我想表达的点，比如其实刚才骑自行这件事我想表达的是“我的坚持，我的毅力”。这样的效果会更好！</p>
</blockquote>
</blockquote>
<p>以上，就是简历上需要注意的地方了，当然只是我自己的个人建议，你可以做一点参考。写好简历只是完成了最基本的第一步。</p>
<h2 id="我该怎么投简历"><a href="#我该怎么投简历" class="headerlink" title="我该怎么投简历"></a>我该怎么投简历</h2><p>这一步，其实我应该放在后面写的，因为写好简历后不一定就可以开始投了，为什么？因为你不一定准备好了面试。写简历的过程中其实就应该开始准备面试的内容了，而且简历这个东西总是边写边修改边优化，也就是说写简历是一个过程而不是一个结果，这个过程也需要同时进行面试的准备。当然这也不是说等你做好了万全的准备然后才开始投，这个世界没有什么是万全的，总有你猝不及防的事情。写简历，准备面试，投简历这几个过程往往是重合的。那么怎么投呢？</p>
<p>这里涉及到三个”w”——“when,where,what”,也就是何时投？在哪里投？投什么公司？每一个问题都可以展开来讲，我简要写一下自己的拙见。</p>
<h3 id="when"><a href="#when" class="headerlink" title="when"></a>when</h3><p>何时投？很多公司对简历处理的效率不一样，有可能一天，有可能一周，也有可能一个月，当然这也跟你投递的渠道有很大关系。所以当你投递的时候，你要考虑这个问题，你要了解这家公司简历处理的速度，会不会让你难堪。我所说的难堪其实很多人会碰到，就是我一直在等我心仪的公司给我消息，然而我手头已经拿到了一个还不错的，但是有时间限制的offer，该等还是不该等这就是难堪。</p>
<p>考虑好这个问题，所以你就需要早做准备，虽然做不到万全，但我们可以概率逼近万全，哈哈，玩笑了。</p>
<h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>这是很关键的一步!工具决定效率，渠道决定效率。投递简历有很多途径，当然这里我只说针对互联网类的简历投递。像前程无忧，智联招聘，58同城之类的我就不好意思说了，你也懂。我这里只说三个工具<a href="http://www.zhipin.com/" target="_blank" rel="noopener">Boss直聘</a>、<a href="https://www.lagou.com/" target="_blank" rel="noopener">拉勾网</a>、<a href="https://www.liepin.com/" target="_blank" rel="noopener">猎娉网</a>。这三个工具也是我当时使用的三个app，这里我对比一下这三个工具。</p>
<ul>
<li>Boss直聘：上面的招聘信息相对另外两者，偏少。它更像一个社交工具，你可以直接面对面的跟Boss直接沟通，当然对面一般不是Boss,一般是hr，就像微信，你可以直接跟他(她)发消息，点对点沟通，这样的效率会很高。而且它还提供阅读回执，你去访问了Boss的主页，他可以看到，boss访问了你的主页，你也可以看到。而且你投递的时候可以先聊天再投递，一定程度上过滤了部分盲目的选择。还有，你可以看到boss最近活跃的时间，如果时间点比较远，说明boss不经常查看消息，那么有可能处理效率不高，你就尽量别投了。总之，这是我首推的一个app，也是我后来找到工作的途径。</li>
<li>拉勾网：比较专业，招聘信息较多，它对简历的处理模式我还不太清楚，总之感觉像一个中介的感觉，对简历的处理速度偏慢。它比较好的一个点是你可以跟踪简历的状态，比如“被查阅””待沟通“”不合适“等，这点可能对你的面试计划会有一定的帮助。</li>
<li>猎聘网：猎聘网上除了有公司招聘，还有相当一部分的猎头。猎头可以查看你的简历，他手里有人才需求的公司，合适的话可能会跟你联系。在这里你就像一个商品，猎头买入卖出，收取中介费。如果你够优秀，你是很有可能被猎头卖一个好价钱的。当然我还没体验过。</li>
</ul>
<p>这里三个app我都用过，每个app上投递的量相当，但比较下来，处理速度最快的还是Boss直聘，其次是拉勾网，然后是猎聘网。效率最高的也是Boss直聘，只不过相对来说，它的招聘信息偏少，好多公司没有在上面发布消息，你需要另觅他径。</p>
<h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>投递什么公司？这也许是最重要的一步了。一段感情分手，我们总是希望下一段感情能长长久久，我们在重新寻找新恋情的时候总是很慎重，因为这关系到我们以后的快乐和幸福。工作也一样，我们也希望能找到合适的公司。那么什么公司是合适的呢？</p>
<p>这里就不发表在下的拙见了，毕竟评价一个公司是否合适对于每一个人的标准不一样。我觉得<a href="http://blog.csdn.net/foruok?viewmode=contents" target="_blank" rel="noopener">foruok</a>说的已经很好了，可以把自己中意的公司分为A、B、C三类，A类是你最想去的公司，B类次之，C类再次之。由于面试也是需要经验的，那么我们可以先投C类，积累面试经验，再投B类，再投A类，这样就能确保面对自己最中意的公司时能以最好的面试状态来面对。这种方法看上去还不错，但是实际执行的时候还是有很多问题的。毕竟每个公司的面试效率不一致，很难做到我们计划的那样，所以最后我实际上并没有按照这个步骤来。实际的情况是面试集中到了某一两个星期里，最终结果也集中到了这两个星期，这两周也决定了你最终的归宿。</p>
<p>那么，说这样的还有什么意义呢？其实有意义的，我们需要明白人的精力是有限的，而且面对很紧张的面试，要持续一两周其实很累了。所谓“一鼓作气，再而衰，三而竭”就是这么个道理。所以最终的方法就是：<strong>稳打稳扎，做好准备，以最良好的状态面对面试</strong>。</p>
<h2 id="准备面试-amp-amp-面试"><a href="#准备面试-amp-amp-面试" class="headerlink" title="准备面试 &amp;&amp; 面试"></a>准备面试 &amp;&amp; 面试</h2><p>准备面试可以从撰写简历的时候就开始了，然后这也是一个过程，从每一次面试的经验中找到不足，改善它，重新调整状态并以最好的状态再次面对。那么面试的过程中怎么办呢？</p>
<p>一般开发类的职位面试有三轮，两轮技术面，一轮hr面。前两轮面试其实没什么好说的，准备好扎实的技术功底，然后清晰的表达自己的逻辑就好了，不需要什么花花肠子，需要注意的是不要紧张，某个问题答不出来也没有关系，不要影响到自己之后的发挥。那如果自己不太熟悉的部分怎么办呢？两个解决办法，一是坦然的承认自己不太熟悉，然后面试官其实也就不会追问了；二是胆大心细的忽悠，这里其实并不是贬义词，其实表达也是一种能力，对于自己不擅长的部分，能很自信的表达不露怯，这其实属于人格魅力的一部分，也即所说的气场，但是也切忌夜郎自大，自吹自擂，掌握好一个度很关键。</p>
<p>我自己是很讨厌hr面的，为什么？原因我这里不方便详述，应对hr面，我给各位求职开发类的同行一个不成熟的小建议，你真诚就好了，最好真诚到让hr震惊，但是真诚可不等于傻，比如问你离职的原因，你可不能答“是因为受不了某一个同事”。为什么这样呢？说实话，套路你是玩不过hr的，这个时候为了避免搬起石头砸自己的脚，你还不如先发制人，让hr无话可说(话说这句话是我昨天看欢乐颂2时想到的，具体哪一幕给大家一说就知道了，就是安迪送包太去酒店的路上就结婚和财产的问题的两种不同价值观的交流)。</p>
<h2 id="我该选什么offer"><a href="#我该选什么offer" class="headerlink" title="我该选什么offer"></a>我该选什么offer</h2><p>到这里基本面试告一段落了，但这里我们往往会碰到类似“最大的麦穗”的烦恼(苏格拉底跟弟子们的一个事情)，别丢了西瓜，捡了芝麻。</p>
<p>那么我们到底该怎么选？这里没有一个标准，我只说我认为对的。</p>
<ul>
<li>规则一：不可将就。你要明白这就像恋爱一样，跟一个人在一起，是因为喜欢，不是其他。如果找不到自己的爱人，宁缺毋滥才是对得起自己的选择。但，这条规则大多数情况下，很难严格遵守。</li>
<li>规则二：概率选择。什么叫概率选择，这就是刚才“最大的麦穗”的问题了，因为实际上每个offer的考虑期限基本在一周左右，而一周能参加的面试可能也就4，5家，而且时间有先有后，那么我拿到了offer，要不要等后面可能更好的offer呢？这就是概率选择的范畴了。通常这个问题也会在面试的时候被问到，也就是“电梯里选最大钻石的事情”。怎么办呢？丢掉手中为了攒面经的公司的offer然后选最好的就行了。至于后面可能还会有你最心仪的公司的offer，那么也只能不要再去考虑。当然这只是从概率论的角度的最优选择。</li>
<li>规则三：从一而终。如果严格遵守上面两个规则，尤其是规则一，出现这种情况的概率就会比较小。很多时候我们做不到规则一，选择了一个将就的工作，于是我们就会出现移情别恋，吃着碗里的看着锅里的这样的情况，说的可能难听了点，但是话糙理不糙。选一个，爱一个，爱一个，选一个，这往往是最好的方式。因为必然会有更好的工作，必然会有更好的恋人。但问题是，我们遇得到吗？我们知道在哪里吗？你怎么定义最合适，最好？这不是自欺欺人，我们选择一个恋人，在一起，爱她，我不知道会不会有比她更好的人，我也不知道会不会跟她一起走到世界尽头，但是在一起的时候就应该用最真诚的心对待，对得起自己，对得起对方，也对得起将来。从一而终不是一个结果，从一而终是一个态度。</li>
</ul>
<h1 id="这次面试遇到的坑"><a href="#这次面试遇到的坑" class="headerlink" title="这次面试遇到的坑"></a>这次面试遇到的坑</h1><p>我所说的坑不是指面试的问题，而是面试这段时间发生的两件事。</p>
<p>第一件事，是某领先的安防企业的面试，hr面的时候，前面一直聊的很好，然后聊薪资的时候我的要求可能高了点，然后她就一直在压，一直在提她们公司的年终奖有多少多少，不要在意月薪，年薪才是关键等等。然后看我比较执着，聊天的氛围就变了，和睦变成了充满了火药味，最后又问了我一遍“低了你的底线就不考虑了吗”，我说“不考虑了”。其实到这里我觉得并没有什么，毕竟谈钱这个事情，都是双方自愿的结果。但是接下来的一幕就让我感觉很不好了，让我觉得如此一个大公司的高级hr(可能是吧)这么不礼貌。我说完“不考虑了”,她匆匆在我的简历上写了什么，头也不抬，写完匆匆起身，走向门外，门口撂下一句“出去的时候把灯关了”，留下一脸懵逼的我坐在面试间，我硬是愣了3秒钟才起身出去的。这让我感觉很不礼貌，就算是谈不拢，也没必要这么没礼貌啊，面完好歹一起出去啊。我以为不会给我消息了，周五早晨那边的技术主管又打电话来，大意是问我对机器人这块的兴趣大不大啥的，offer hr已经在发啥的，当然我也没去，算了，不提也罢。</p>
<p>第二件事，面试的那一周，周一下午面了一家做加密的小公司，跟我聊天的面试官感觉很好，给我一种大学教授的感觉，聊完还不错，问我今天能做决定吗？我说这周五前答复。当然后来我又面了几家，不过感觉还是不太好，拒了这些后，周五打电话过去那边，然后就被鸽了，说“offer给别人了”,我去年买了个表，虽然这也有我的问题，但是总觉得这样的企业不够诚信。算了算了，有些时候也许一切都是最好的结果，被鸽之后，我几乎快崩溃了，因为到手的offer我都拒掉了，还有一个也很中意的offer要等到下周一才有消息，而且不确定，也就是我现在公司的offer。不过好在我还是幸运的，被鸽后的2个小时候，这边的公司打电话来说发offer，我还能怎么说，一口答应啊，这也是我很心仪的一家公司。所以说，有时候也许一切都是最好的安排！</p>
<p>这段是后期更新的，本来不打算写下来的，不过从这两件事我也学到了一些很有价值的教训，也值得我记住。</p>
<h1 id="我该去陪女朋友了"><a href="#我该去陪女朋友了" class="headerlink" title="我该去陪女朋友了"></a>我该去陪女朋友了</h1><p>到这里基本写完了这篇博客。今天是端午节假期的第二天，由于女友要上班，我放假，于是我就蹲在了costa里一个上午和一个下午，写这篇博客。她快要下班了，博客也写完了，该去陪她了。O(∩_∩)O~~</p>
<p>晚上干嘛？可能跟她去钱塘江边骑小黄吧，😁，她技术一直不太好，我去当陪练。</p>
]]></content>
      <categories>
        <category>其他</category>
        <category>聊一聊</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Quickfix源代码分析</title>
    <url>/2017/02/10/sourcecode-of-quickfix/</url>
    <content><![CDATA[<h1 id="先扯一扯"><a href="#先扯一扯" class="headerlink" title="先扯一扯"></a>先扯一扯</h1><p>&emsp;上一篇博文<a href="http://rebootcat.com/2017/02/09/FIX-protocol-introduce/" target="_blank" rel="noopener">FIX协议介绍</a>中对FIX协议背景，语法格式等做了介绍。文中也提到我是由于工作中某个模块需要实现fix报文和xml报文之间的转换对FIX协议进行的接触和了解。文末也给出了一个实现fix协议的开源或闭源的一些代码库的列表。而我采用的是Quickfix引擎。目前国内开发用的多的还是Quickfix,它是一个C++实现的fix引擎。<br>&emsp;<strong>这篇博文我打算对Quickfix源代码进行一些分析！</strong></p>
<h1 id="Quickfix下载（安装）"><a href="#Quickfix下载（安装）" class="headerlink" title="Quickfix下载（安装）"></a>Quickfix下载（安装）</h1><p>两个途径：<br>&emsp;&emsp;Quickfix官网:<a href="http://www.quickfixengine.org/" target="_blank" rel="noopener">http://www.quickfixengine.org/</a><br>&emsp;&emsp;Github上：<a href="https://github.com/quickfix/quickfix" target="_blank" rel="noopener">https://github.com/quickfix/quickfix</a><br>&emsp;下载好Quickfix的源代码后（或许不需要编译安装？）。我自己是直接把quickfix的源代码刨去部分后直接拉进我自己的项目中。如果选择编译安装或许也可以，直接在makefile里链fix的库。</p>
<h1 id="代码目录介绍"><a href="#代码目录介绍" class="headerlink" title="代码目录介绍"></a>代码目录介绍</h1><a id="more"></a>
<p>&emsp;下载好quickfix的源代码并解压后，得到诸如下图的目录结构：<img src="http://o8fj2jbwb.bkt.clouddn.com/quickfixmulu.png" alt=""><br><em>include/*：一些头文件<br>*doc/</em>:一些关于quickfix说明和使用的简要html文件<br><em>example/</em>:实现了简要的交易客户端tradeclien程序<br><em>spec/</em>:数据字典<br><em>src/</em>:源代码，其中c++实现的代码在子目录”c++/“下面  </p>
<p><strong>下面着重介绍下C++这个子目录下的一些源代码文件:</strong>  </p>
<p>DataDictionary<em>.cpp:解析诸如FIX42.xml的数据字典<br>Field</em>.cpp:数据字典中解析预定义的field<br>Message<em>.cpp:数据字典中解析处理message节点<br>Http</em>.cpp: 实现http引擎的部分（我没用到）<br>Socket<em>.cpp:会话层的通信（当然我没用到）<br>Sessian</em>.cpp: 会话层的东西(没用到)<br>还有一些其他的文件，略去不说。这里还要注意还有几个子文件夹：fix40/,fix41/,fix42/,fix43/,fix44/,fix50/,fix50sp1。这几个文件夹下是具体实现了该版本的一些头文件。</p>
<h1 id="数据字典载入、处理"><a href="#数据字典载入、处理" class="headerlink" title="数据字典载入、处理"></a>数据字典载入、处理</h1><p>&emsp;Quickfix中进行数据字典的载入，解析本质是对几个xml文件的解析，所以需要一个xml引擎，早期的quickfix好像是采用libxml作为xml引擎的(不太确定),现在是采用pugixml parser,官方网站：<a href="http://pugixml.org/" target="_blank" rel="noopener">http://pugixml.org/</a>。正如官网介绍的那样：</p>
<blockquote>
<p>Light-weight, simple and fast XML parser for C++ with XPath support  </p>
</blockquote>
<p>然后Quickfix中在之上进行了一层自己的封装，形成PUGIXML_DOMAttributes类，PUGIXML_DOMNode类，PUGIXML_DOMDocument类。在头文件”PUGIXML_DOMDocument.h”中进行了定义，如下：  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">PUGIXML_DOMAttributes</span> :</span> <span class="keyword">public</span> DOMAttributes</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    PUGIXML_DOMAttributes( pugi::xml_node pNode )</span><br><span class="line">    : m_pNode(pNode) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">get</span><span class="params">( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp;, <span class="built_in">std</span>::<span class="built_in">string</span>&amp; )</span></span>;</span><br><span class="line">    <span class="function">DOMAttributes::<span class="built_in">map</span> <span class="title">toMap</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    pugi::xml_node m_pNode;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// XML node as represented by pugixml.</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">PUGIXML_DOMNode</span> :</span> <span class="keyword">public</span> DOMNode</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    PUGIXML_DOMNode( pugi::xml_node pNode )</span><br><span class="line">    : m_pNode(pNode) &#123;&#125;</span><br><span class="line">    ~PUGIXML_DOMNode() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">DOMNodePtr <span class="title">getFirstChildNode</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">DOMNodePtr <span class="title">getNextSiblingNode</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">DOMAttributesPtr <span class="title">getAttributes</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">getText</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    pugi::xml_node m_pNode;</span><br><span class="line">  &#125;;</span><br><span class="line">   <span class="comment">/// XML document as represented by pugixml.</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">PUGIXML_DOMDocument</span> :</span> <span class="keyword">public</span> DOMDocument</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    PUGIXML_DOMDocument() <span class="keyword">throw</span>( ConfigError );</span><br><span class="line">    ~PUGIXML_DOMDocument();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">load</span><span class="params">( <span class="built_in">std</span>::istream&amp; )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">load</span><span class="params">( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">xml</span><span class="params">( <span class="built_in">std</span>::ostream&amp; )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">DOMNodePtr <span class="title">getNode</span><span class="params">( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; )</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    pugi::xml_document m_pDoc;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;其中大多数函数不需要特别关心，我们只需要重点关心PUGIXML_DOMDocument类中的load()函数。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PUGIXML_DOMDocument::load</span><span class="params">( <span class="built_in">std</span>::istream&amp; stream )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> </span><br><span class="line">      &#123; </span><br><span class="line">        <span class="keyword">return</span> m_pDoc.load(stream);</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">catch</span>( ... ) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">PUGIXML_DOMDocument::load</span><span class="params">( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; url )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> </span><br><span class="line">      &#123; </span><br><span class="line">        <span class="keyword">return</span> m_pDoc.load_file(url.c_str());</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">catch</span>( ... ) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这个函数就是对给定一个xml路径然后装载后返回一个pugi::xml_document的对象。</p>
<h1 id="数据字典解析"><a href="#数据字典解析" class="headerlink" title="数据字典解析"></a>数据字典解析</h1><p>&emsp;上面的类实现了诸如FIX44.xml的载入处理，通过上一篇博文<a href="http://rebootcat.com/2017/02/09/FIX-protocol-introduce/" target="_blank" rel="noopener">FIX协议介绍</a>中的介绍，数据字典中定义了很多结构节点，比如fields,messages,groups等，DataDictionary*.cpp是真正对这些xml文件进行解析的源文件。DataDictionary.h中部分源代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataDictionary</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">set</span> &lt; <span class="keyword">int</span> &gt; MsgFields;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span> &lt; <span class="built_in">std</span>::<span class="built_in">string</span>, MsgFields &gt; MsgTypeToField;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">set</span> &lt; <span class="built_in">std</span>::<span class="built_in">string</span> &gt; MsgTypes;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">set</span> &lt; <span class="keyword">int</span> &gt; Fields;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span> &lt; <span class="keyword">int</span>, <span class="keyword">bool</span> &gt; NonBodyFields;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt; OrderedFields;</span><br><span class="line">  <span class="keyword">typedef</span> message_order OrderedFieldsArray;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span> &lt; <span class="keyword">int</span>, TYPE::Type &gt; FieldTypes;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">set</span> &lt; <span class="built_in">std</span>::<span class="built_in">string</span> &gt; Values;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span> &lt; <span class="keyword">int</span>, Values &gt; FieldToValue;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span> &lt; <span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">string</span> &gt; FieldToName;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span> &lt; <span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">int</span> &gt; NameToField;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span> &lt; <span class="built_in">std</span>::pair &lt; <span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">string</span> &gt; , <span class="built_in">std</span>::<span class="built_in">string</span>  &gt; ValueToName;</span><br><span class="line">  <span class="comment">// while FieldToGroup structure seems to be overcomplicated</span></span><br><span class="line">  <span class="comment">// in reality it yields a lot of performance because:</span></span><br><span class="line">  <span class="comment">// 1) avoids memory copying;</span></span><br><span class="line">  <span class="comment">// 2) first lookup is done by comparing integers and not string objects</span></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> use hash_map with good hashing algorithm</span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span> &lt; <span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::pair &lt; <span class="keyword">int</span>, DataDictionary* &gt; &gt; FieldPresenceMap;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span> &lt; <span class="keyword">int</span>, FieldPresenceMap &gt; FieldToGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  DataDictionary();</span><br><span class="line">  DataDictionary( <span class="keyword">const</span> DataDictionary&amp; copy );</span><br><span class="line">  DataDictionary( <span class="built_in">std</span>::istream&amp; stream ) <span class="keyword">throw</span>( ConfigError );</span><br><span class="line">  DataDictionary( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; url ) <span class="keyword">throw</span>( ConfigError );</span><br><span class="line">  <span class="keyword">virtual</span> ~DataDictionary();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">readFromURL</span><span class="params">( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; url )</span> <span class="title">throw</span><span class="params">( ConfigError )</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">readFromDocument</span><span class="params">( DOMDocumentPtr pDoc )</span> <span class="title">throw</span><span class="params">( ConfigError )</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">readFromStream</span><span class="params">( <span class="built_in">std</span>::istream&amp; stream )</span> <span class="title">throw</span><span class="params">( ConfigError )</span></span>;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">&#125;;</span><br><span class="line">....</span><br></pre></td></tr></table></figure>
<p>&emsp;可以看到DataDictionary类中定义了很多的std::map和std::vector,这些容器都是用来存储从FIX4X.xml文件中解析来的内容，一些映射。比如:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span> &lt; <span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">string</span> &gt; FieldToName;</span><br></pre></td></tr></table></figure>
<p>表示存储field和实际的字段名的映射，比如8对应<strong>BeginString</strong>;</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span> &lt; <span class="keyword">int</span>, Values &gt; FieldToValue;</span><br></pre></td></tr></table></figure>
<p>表示枚举当中的int值跟实际的字段名的映射，比如下面的：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">&lt;field number=<span class="string">'13'</span> name=<span class="string">'CommType'</span> type=<span class="string">'CHAR'</span>&gt;</span><br><span class="line">   &lt;<span class="keyword">value</span> <span class="keyword">enum</span>=<span class="string">'1'</span> description=<span class="string">'PER_UNIT'</span> /&gt;</span><br><span class="line">   &lt;<span class="keyword">value</span> <span class="keyword">enum</span>=<span class="string">'2'</span> description=<span class="string">'PERCENTAGE'</span> /&gt;</span><br><span class="line">   &lt;<span class="keyword">value</span> <span class="keyword">enum</span>=<span class="string">'3'</span> description=<span class="string">'ABSOLUTE'</span> /&gt;</span><br><span class="line">   &lt;<span class="keyword">value</span> <span class="keyword">enum</span>=<span class="string">'4'</span> description=<span class="string">'4'</span> /&gt;</span><br><span class="line">   &lt;<span class="keyword">value</span> <span class="keyword">enum</span>=<span class="string">'5'</span> description=<span class="string">'5'</span> /&gt;</span><br><span class="line">   &lt;<span class="keyword">value</span> <span class="keyword">enum</span>=<span class="string">'6'</span> description=<span class="string">'POINTS_PER_BOND_OR_CONTRACT_SUPPLY_CONTRACTMULTIPLIER'</span> /&gt;</span><br><span class="line">  &lt;/field&gt;</span><br></pre></td></tr></table></figure>
<p>3代表<strong>ABSOLUTE</strong>；1代表<strong>PER_UNIT</strong>。  </p>
<p>&emsp;另外需要注意的成员函数readFrom*()系列，底层就是上一节中的类，进行xml的载入。</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">void</span> <span class="variable">DataDictionary</span>::<span class="function"><span class="title">readFromURL</span>( <span class="variable">const</span> <span class="variable">std</span>::<span class="variable">string</span>&amp; <span class="variable">url</span> )</span></span><br><span class="line">  <span class="function"><span class="title">throw</span>( <span class="variable">ConfigError</span> )</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="variable">DOMDocumentPtr</span> <span class="variable">pDoc</span> = <span class="function"><span class="title">DOMDocumentPtr</span>(<span class="variable">new</span> <span class="title">PUGIXML_DOMDocument</span>());</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">    <span class="title">if</span>(<span class="variable">!pDoc</span>-&gt;<span class="title">load</span>(<span class="variable">url</span>))</span></span><br><span class="line">    ¦ <span class="variable">throw</span> <span class="function"><span class="title">ConfigError</span>(<span class="variable">url</span> + <span class="string">": Could not parse data dictionary file"</span>);</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">    <span class="variable"><span class="keyword">try</span></span> </span></span><br><span class="line"><span class="function">    &#123;</span></span><br><span class="line"><span class="function">    ¦ <span class="title">readFromDocument</span>( <span class="variable">pDoc</span> );</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    <span class="title">catch</span>( <span class="variable">ConfigError</span>&amp; <span class="variable">e</span> ) </span></span><br><span class="line"><span class="function">    &#123;</span></span><br><span class="line"><span class="function">    ¦ <span class="variable">throw</span> <span class="title">ConfigError</span>( <span class="variable">url</span> + <span class="string">": "</span> + <span class="variable">e.what</span>() );</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">  <span class="variable">void</span> <span class="variable">DataDictionary</span>::<span class="title">readFromStream</span>( <span class="variable">std</span>::<span class="variable">istream</span>&amp; <span class="variable">stream</span> )</span></span><br><span class="line">  <span class="function"><span class="title">throw</span>( <span class="variable">ConfigError</span> )</span></span><br><span class="line">  &#123;</span><br><span class="line">&gt;*  <span class="variable">DOMDocumentPtr</span> <span class="variable">pDoc</span> = <span class="function"><span class="title">DOMDocumentPtr</span>(<span class="variable">new</span> <span class="title">PUGIXML_DOMDocument</span>());</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">    <span class="title">if</span>(<span class="variable">!pDoc</span>-&gt;<span class="title">load</span>(<span class="variable">stream</span>))</span></span><br><span class="line">    ¦ <span class="variable">throw</span> <span class="function"><span class="title">ConfigError</span>(<span class="string">"Could not parse data dictionary stream"</span>);</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">    <span class="title">readFromDocument</span>( <span class="variable">pDoc</span> );</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">&gt;*<span class="variable">void</span> <span class="variable">DataDictionary</span>::<span class="title">readFromDocument</span>( <span class="variable">DOMDocumentPtr</span> <span class="variable">pDoc</span> )</span></span><br><span class="line">  <span class="function"><span class="title">throw</span>( <span class="variable">ConfigError</span> )</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// VERSION</span></span><br><span class="line">    <span class="variable">DOMNodePtr</span> <span class="variable">pFixNode</span> = <span class="variable">pDoc</span>-&gt;<span class="function"><span class="title">getNode</span>(<span class="string">"/fix"</span>);</span></span><br><span class="line"><span class="function">    <span class="title">if</span>(<span class="variable">!pFixNode.get</span>())</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到这里，数据字典的解析就完成了。简单的理解就是，读入xml文件，然后针对xml文件里的内容，把内容做成映射用map和vector存储。</p>
<h1 id="FIX报文处理"><a href="#FIX报文处理" class="headerlink" title="FIX报文处理"></a>FIX报文处理</h1><p>&emsp;上面的类只是对数据字典的解析和处理，还没有涉及到真正的fix报文的解析，现在开始！</p>
<h2 id="Message类"><a href="#Message类" class="headerlink" title="Message类"></a>Message类</h2><p>&emsp;针对fix报文的处理类是Message。在Message.h文件中部分代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Base class for all %FIX messages.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * A message consists of three field maps.  One for the header, the body,</span></span><br><span class="line"><span class="comment"> * and the trailer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> :</span> <span class="keyword">public</span> FieldMap</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">DataDictionary</span>;</span></span><br><span class="line"><span class="comment">//  friend class Session;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">enum</span> field_type &#123; header, body, trailer &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Message();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Construct a message from a string</span></span><br><span class="line">  Message( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">string</span>, <span class="keyword">bool</span> validate = <span class="literal">true</span> )</span><br><span class="line">  <span class="keyword">throw</span>( InvalidMessage );</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Construct a message from a string using a data dictionary</span></span><br><span class="line">  Message( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">string</span>, <span class="keyword">const</span> FIX::DataDictionary&amp; dataDictionary,</span><br><span class="line">           <span class="keyword">bool</span> validate = <span class="literal">true</span> )</span><br><span class="line">  <span class="keyword">throw</span>( InvalidMessage );</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Construct a message from a string using a session and application data dictionary</span></span><br><span class="line">  Message( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">string</span>, <span class="keyword">const</span> FIX::DataDictionary&amp; sessionDataDictionary,</span><br><span class="line">           <span class="keyword">const</span> FIX::DataDictionary&amp; applicationDataDictionary, <span class="keyword">bool</span> validate = <span class="literal">true</span> )</span><br><span class="line">  <span class="keyword">throw</span>( InvalidMessage );</span><br><span class="line"></span><br><span class="line">  Message( <span class="keyword">const</span> Message&amp; copy )</span><br><span class="line">  : FieldMap( copy )</span><br><span class="line">  &#123;</span><br><span class="line">    m_header = copy.m_header;</span><br><span class="line">    m_trailer = copy.m_trailer;</span><br><span class="line">    m_validStructure = copy.m_validStructure;</span><br><span class="line">    m_tag = copy.m_tag;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Set global data dictionary for encoding messages into XML</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">InitializeXML</span><span class="params">( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">string</span> )</span></span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">setString</span><span class="params">( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">string</span> )</span></span></span><br><span class="line"><span class="function">  <span class="title">throw</span><span class="params">( InvalidMessage )</span></span></span><br><span class="line"><span class="function">  </span>&#123; setString(<span class="built_in">string</span>, <span class="literal">true</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setString</span><span class="params">( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">string</span>, <span class="keyword">bool</span> validate )</span></span></span><br><span class="line"><span class="function">  <span class="title">throw</span><span class="params">( InvalidMessage )</span></span></span><br><span class="line"><span class="function">  </span>&#123; setString(<span class="built_in">string</span>, validate, <span class="number">0</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setString</span><span class="params">( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">bool</span> validate,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">const</span> FIX::DataDictionary* pDataDictionary )</span></span></span><br><span class="line"><span class="function">  <span class="title">throw</span><span class="params">( InvalidMessage )</span></span></span><br><span class="line"><span class="function">  </span>&#123; setString(<span class="built_in">string</span>, validate, pDataDictionary, pDataDictionary); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setString</span><span class="params">( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">bool</span> validate,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">const</span> FIX::DataDictionary* pSessionDataDictionary,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">const</span> FIX::DataDictionary* pApplicationDataDictionary )</span></span></span><br><span class="line"><span class="function">  <span class="title">throw</span><span class="params">( InvalidMessage )</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setGroup</span><span class="params">( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; msg, <span class="keyword">const</span> FieldBase&amp; field,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">string</span>, <span class="built_in">std</span>::<span class="built_in">string</span>::size_type&amp; pos,</span></span></span><br><span class="line"><span class="function"><span class="params">                 FieldMap&amp; <span class="built_in">map</span>, <span class="keyword">const</span> DataDictionary&amp; dataDictionary )</span></span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正如Message类的注释那样，Message类是各种FIX messages的基类，并且包含3个field maps，分别为header,body,trailer。Message类继承自类FieldMap,关于FiledMap待会再谈。先来看看Message类的构造函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Message::Message()</span><br><span class="line">    : m_validStructure( <span class="literal">true</span> ) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  Message::Message( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">string</span>, <span class="keyword">bool</span> validate )</span><br><span class="line">  <span class="keyword">throw</span>( InvalidMessage )</span><br><span class="line">    : m_validStructure( <span class="literal">true</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    setString( <span class="built_in">string</span>, validate );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Message::Message( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">string</span>,</span><br><span class="line">                    <span class="keyword">const</span> DataDictionary&amp; dataDictionary,</span><br><span class="line">                    <span class="keyword">bool</span> validate )</span><br><span class="line">  <span class="keyword">throw</span>( InvalidMessage )</span><br><span class="line">    : m_validStructure( <span class="literal">true</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    setString( <span class="built_in">string</span>, validate, &amp;dataDictionary, &amp;dataDictionary );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Message::Message( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">string</span>,</span><br><span class="line">                    <span class="keyword">const</span> DataDictionary&amp; sessionDataDictionary,</span><br><span class="line">                    <span class="keyword">const</span> DataDictionary&amp; applicationDataDictionary,</span><br><span class="line">                    <span class="keyword">bool</span> validate )</span><br><span class="line">  <span class="keyword">throw</span>( InvalidMessage )</span><br><span class="line">    : m_validStructure( <span class="literal">true</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    setStringHeader( <span class="built_in">string</span> );</span><br><span class="line">    <span class="keyword">if</span>( isAdmin() )</span><br><span class="line">      setString( <span class="built_in">string</span>, validate, &amp;sessionDataDictionary, &amp;sessionDataDictionary );</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      setString( <span class="built_in">string</span>, validate, &amp;sessionDataDictionary, &amp;applicationDataDictionary );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>根据不同的初始化参数调用不同的构造函数，不过最终调用到成员函数setString()。那么setString(）函数究竟做了什么呢?</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">void Message::setString( const std::string&amp; string,</span><br><span class="line">                           bool doValidation,</span><br><span class="line">                           const DataDictionary* pSessionDataDictionary,</span><br><span class="line">                           const DataDictionary* pApplicationDataDictionary )</span><br><span class="line">  throw( InvalidMessage )</span><br><span class="line">  &#123;</span><br><span class="line">    clear();</span><br><span class="line">  </span><br><span class="line">    std::string::size_type pos = 0;</span><br><span class="line">    int count = 0;</span><br><span class="line">    std::string msg;</span><br><span class="line">  </span><br><span class="line">    static int const headerOrder[] =</span><br><span class="line">    &#123;</span><br><span class="line">      FIELD::BeginString,</span><br><span class="line">      FIELD::BodyLength,</span><br><span class="line">      FIELD::MsgType</span><br><span class="line">    &#125;;</span><br><span class="line">  </span><br><span class="line">    field_type<span class="built_in"> type </span>= header;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> ( pos &lt; string.size() )</span><br><span class="line">    &#123;</span><br><span class="line">      FieldBase field = extractField( string, pos, pSessionDataDictionary, pApplicationDataDictionary );</span><br><span class="line">      <span class="keyword">if</span> ( count &lt; 3 &amp;&amp; headerOrder[ count++ ] != field.getTag() )</span><br><span class="line">        <span class="keyword">if</span> ( doValidation ) throw InvalidMessage(<span class="string">"Header fields out of order"</span>);</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">if</span> ( isHeaderField( field, pSessionDataDictionary ) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in"> type </span>!= header )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span>(m_tag == 0) m_tag = field.getTag();</span><br><span class="line">          m_validStructure = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( field.getTag() == FIELD::MsgType )</span><br><span class="line">          msg = field.getString();</span><br><span class="line">  </span><br><span class="line">        m_header.setField( field, <span class="literal">false</span> );</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> ( pSessionDataDictionary )</span><br><span class="line">          setGroup( <span class="string">"_header_"</span>, field, string, pos, getHeader(), *pSessionDataDictionary );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( isTrailerField( field, pSessionDataDictionary ) )</span><br><span class="line">      &#123;</span><br><span class="line">       <span class="built_in"> type </span>= trailer;</span><br><span class="line">        m_trailer.setField( field, <span class="literal">false</span> );</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> ( pSessionDataDictionary )</span><br><span class="line">          setGroup( <span class="string">"_trailer_"</span>, field, string, pos, getTrailer(), *pSessionDataDictionary );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in"> type </span>== trailer )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span>(m_tag == 0) m_tag = field.getTag();</span><br><span class="line">          m_validStructure = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">       <span class="built_in"> type </span>= body;</span><br><span class="line">        setField( field, <span class="literal">false</span> );</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> ( pApplicationDataDictionary )</span><br><span class="line">          setGroup( msg, field, string, pos, *this, *pApplicationDataDictionary );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> ( doValidation )</span><br><span class="line">      validate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数应该比较容易读懂，第一个参数string保存了fix的真实报文，比如：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">8</span>=FIX<span class="number">.4</span><span class="number">.2</span>\<span class="number">0019</span>=<span class="number">272</span>\<span class="number">00135</span>=E\<span class="number">00134</span>=<span class="number">126</span>\<span class="number">00166666</span>=<span class="number">1095350459</span>\<span class="number">00150</span>=<span class="number">00303</span>\<span class="number">00149</span>=BUYSIDE\<span class="number">00152</span>=<span class="number">20040916</span><span class="number">-16</span>:<span class="number">19</span>:<span class="number">18.328</span>\<span class="number">00168</span>=<span class="number">2</span>\<span class="number">00156</span>=SELLSIDE\<span class="number">00173</span>=<span class="number">2</span>\<span class="number">00111</span>=<span class="number">1095350459</span>\<span class="number">00155</span>=fred\<span class="number">00140</span>=<span class="number">1</span>\<span class="number">00167</span>=<span class="number">1</span>\<span class="number">0011</span>=<span class="number">00303</span>\<span class="number">00178</span>=<span class="number">3</span>\<span class="number">00179</span>=<span class="built_in">string</span>\<span class="number">00179</span>=<span class="built_in">string</span>\<span class="number">00179</span>=<span class="built_in">string</span>\<span class="number">00154</span>=<span class="number">1</span>\<span class="number">001</span>  <span class="number">59</span>=<span class="number">3</span>\<span class="number">00111</span>=<span class="number">1095350460</span>\<span class="number">00167</span>=<span class="number">2</span>\<span class="number">00140</span>=<span class="number">1</span>\<span class="number">00159</span>=<span class="number">3</span>\<span class="number">0011</span>=<span class="number">00303</span>\<span class="number">00178</span>=<span class="number">3</span>\<span class="number">00179</span>=<span class="built_in">string</span>\<span class="number">00179</span>=<span class="built_in">string</span>\<span class="number">00179</span>=<span class="built_in">string</span>\<span class="number">00155</span>=feed\<span class="number">0</span>  <span class="number">0154</span>=<span class="number">5</span>\<span class="number">001394</span>=<span class="number">3</span>\<span class="number">00110</span>=<span class="number">120</span>\<span class="number">001</span></span><br></pre></td></tr></table></figure>

<p>然后从这个字符串开始一直往后解析，参照一个DataDictionary类的指针pSessianDataDictionary，进行解析，比如从fix报文中读到了8这个tag,那么需要从这个指针中找到对应的字段名值为<strong>BeginString</strong>。最终还原成实际的报文。<br>&emsp;那么读到的这些tag和value存到哪里呢?这就是刚才卖的关子，可以直接跳到FieldMap类那小节来了解FieldMap类的实现。<br>&emsp;setString()函数负责解包，那么组包呢？<br>组包实现的成员函数是toString()函数：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">Message::toString</span><span class="params">( <span class="keyword">int</span> beginStringField, </span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">int</span> bodyLengthField, </span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">int</span> checkSumField )</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">return</span> toString( str, beginStringField, bodyLengthField, checkSumField );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="title">Message::toString</span><span class="params">( <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str, </span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> beginStringField,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> bodyLengthField, </span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> checkSumField )</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = bodyLength( beginStringField, bodyLengthField, checkSumField );</span><br><span class="line">    m_header.setField( IntField(bodyLengthField, length) );</span><br><span class="line">    m_trailer.setField( CheckSumField(checkSumField, checkSum(checkSumField)) );</span><br><span class="line">  </span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> defined(_MSC_VER) &amp;&amp; _MSC_VER &lt; 1300</span></span><br><span class="line">    str = <span class="string">""</span>; </span><br><span class="line">  <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">&gt;&gt;  str.<span class="built_in">clear</span>();</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">/*small speculation about the space needed for FIX string*/</span>    str.reserve( length + <span class="number">64</span> );</span><br><span class="line">  </span><br><span class="line">    m_header.calculateString( str );    FieldMap::calculateString( str );</span><br><span class="line">    m_trailer.calculateString( str );  </span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>函数也比较容易读懂，一个fix报文包含三个部分，header,body,trailer。</p>
<h2 id="FieldMap类"><a href="#FieldMap类" class="headerlink" title="FieldMap类"></a>FieldMap类</h2><p>&emsp;FieldMap类是Message类的基类。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Stores and organizes a collection of Fields.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * This is the basis for a message, header, and trailer.  This collection</span></span><br><span class="line"><span class="comment">   * class uses a sorter to keep the fields in a particular order.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">FieldMap</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> defined(_MSC_VER) &amp;&amp; _MSC_VER &lt; 1300</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">multimap</span> &lt; <span class="keyword">int</span>, FieldBase, message_order &gt; Fields;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span> &lt; <span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">vector</span> &lt; FieldMap* &gt;, <span class="built_in">std</span>::less&lt;<span class="keyword">int</span>&gt; &gt; Groups;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">multimap</span> &lt; <span class="keyword">int</span>, FieldBase, message_order, </span><br><span class="line">                            ALLOCATOR&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">const</span> <span class="keyword">int</span>,FieldBase&gt; &gt; &gt; Fields;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span> &lt; <span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">vector</span> &lt; FieldMap* &gt;, <span class="built_in">std</span>::less&lt;<span class="keyword">int</span>&gt;, </span><br><span class="line">                       ALLOCATOR&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">const</span> <span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt; FieldMap* &gt; &gt; &gt; &gt; Groups;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">typedef</span> Fields::const_iterator iterator;</span><br><span class="line">    <span class="keyword">typedef</span> iterator const_iterator;</span><br><span class="line">    <span class="keyword">typedef</span> Groups::const_iterator g_iterator;</span><br><span class="line">    <span class="keyword">typedef</span> Groups::const_iterator g_const_iterator;</span><br><span class="line">  </span><br><span class="line">    FieldMap( <span class="keyword">const</span> message_order&amp; order =</span><br><span class="line">              message_order( message_order::normal ) ) </span><br><span class="line">    : m_fields( order ) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">    FieldMap( <span class="keyword">const</span> <span class="keyword">int</span> order[] )</span><br><span class="line">    : m_fields( message_order(order) ) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">    FieldMap( <span class="keyword">const</span> FieldMap&amp; copy )</span><br><span class="line">    &#123; *<span class="keyword">this</span> = copy; &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个类好像没什么好解释的。</p>
<h1 id="好像介绍完了"><a href="#好像介绍完了" class="headerlink" title="好像介绍完了"></a>好像介绍完了</h1><p>&emsp;其实回过头来看这些代码，也比较容易，不过当时还是花了点时间琢磨的。如果想要实现自己的Message类可以从Message类进行派生，然后实现自己的特定组包解包函数。<br>&emsp;这还是算一个比较大的开源库了，阅读这样的开源代码确实收获不少，可以学习到别的优秀的C++者的书写习惯，可以学习到别人运用这些库的熟练程度等，收获不少。<br>&emsp;由于是回过头来记录当时的项目，可能会遗漏部分或者忽略了部分，因为现在看是比较简单的。多看，多学，多写！</p>
<p>(小插曲：原来markdown换行是两个空格，以前都是直接一个空行。另外行首缩进是<img src="http://o8fj2jbwb.bkt.clouddn.com/%E9%A6%96%E8%A1%8C%E7%BC%A9%E8%BF%9B.png" alt="">)分别表示一个空格和两个空格。这篇博文就是采用了新的方式，不知道效果如何，先试试看)</p>
<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a> (<strong>默认</strong>)</p>
</li>
<li><p>email: <a href="mailto:&#108;&#105;&#x6e;&#x75;&#x78;&#x63;&#x6f;&#100;&#x65;&#50;&#110;&#105;&#107;&#105;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#109;">&#108;&#105;&#x6e;&#x75;&#x78;&#x63;&#x6f;&#100;&#x65;&#50;&#110;&#105;&#107;&#105;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#109;</a></p>
</li>
</ul>
<p>2017-02-10 于杭州<br><em>By  <a href="http://weibo.com/2793607050/profile?topnav=1&wvr=6&is_all=1" target="_blank" rel="noopener">史矛革</a></em></p>
]]></content>
      <categories>
        <category>fix</category>
      </categories>
      <tags>
        <tag>fix</tag>
        <tag>c++</tag>
        <tag>quickfix</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>使用coding私有仓库多终端同步编写博客</title>
    <url>/2016/12/13/use-coding-update-blog/</url>
    <content><![CDATA[<h1 id="前头的话"><a href="#前头的话" class="headerlink" title="前头的话"></a>前头的话</h1><p>目前为止，从刚开始搭建本地博客，部署至github以及coding，到绑定自己的个人域名，再到现在，使用coding的私有仓库同步博客源代码，以及构建了一个基于docker的hexo镜像，用来以后迁移环境，再到现在使用daocloud进行持续自动集成，博客上的东西基本搞的还是比较差不多了。</p>
<p>其实我还是挺喜欢瞎折腾的，说实话，主要也是为了装逼，毕竟我不懂前端，搞一些更个性化的东西还是比较不会，但能折腾的尽量折腾（可惜github pages不支持https，不然也搞一个https的。哈哈）。当然，为了好玩之余，还是想认认真真的做一件事，记录自己的成长，记录每段时间的收获。</p>
<p>本篇记录下使用coding私有仓库，同步博客源代码，方便多台PC迁移。</p>
<h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p>我的博客系统搭建在一台我只有使用权的笔记本电脑上，也就是公司的电脑上，如果碰到离职或者电脑出了问题的情况，那么博客系统岂不是要全部挂掉，所以要执行异地灾备策略，首先备份博客源代码，那么迁移到新的PC上，只需要安装好相应的博客环境hexo,node等，就可以接着进行编写博客了。</p>
<p>通常，博客源代码的备份可以考虑两种方式，一是各种云盘，二是使用git进行管理。</p>
<h1 id="使用云盘"><a href="#使用云盘" class="headerlink" title="使用云盘"></a>使用云盘</h1><p>推荐百度云。过程略。大家应该都会懂，设置一个自动备份目录。</p>
<h1 id="使用coding私有仓库"><a href="#使用coding私有仓库" class="headerlink" title="使用coding私有仓库"></a>使用coding私有仓库</h1><p>使用git仓库管理是一个比较好的方式，可以选择github,coding,gitcafe等，我使用的是coding。因为github的私有仓库好像是要收费，coding的私有仓库是免费的，博客源代码涉及到一些敏感个人信息，推荐放到私有仓库。当然啦，有没有用再说，我的意思是现在这个世界，个人隐私真的有吗？【手动抠鼻】</p>
<h2 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h2><a id="more"></a>
<p>此处我是不需要的，因为我的博客是搭建在github pages和coding pages上的,之前就已经设置过ssh认证了。如果需要，可以查看coding上的帮助文档<a href="https://coding.net/help/doc/git/ssh-key.html" target="_blank" rel="noopener">配置SSH公匙</a>。</p>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ol>
<li><p>在coding上新建私有仓库，获取SSH仓库路径</p>
</li>
<li><p>删除博客目录下以及主题文件夹下的.git文件夹,不然无法提交更新</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">rm -rf *<span class="string">.git</span> &amp;&amp; <span class="keyword">cd</span>  themes/next &amp;&amp; rm -rf  *<span class="string">.git</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新建或编辑.gitignore文件，并保存</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">.deploy_git</span>/*</span><br><span class="line"><span class="meta">public</span>/*</span><br><span class="line">node_modules/*</span><br></pre></td></tr></table></figure>
<p> <em>说明：.gitignore文件是告诉git忽略那些文件，不进行监视</em><br>.deploy_git是hexo默认的git同步文件夹，不需要备份，public文件夹下是hexo g命令生成的，不需要备份，node_modules目录是npm install <plugin> 的插件目录，不需要备份。</p>
</li>
<li><p>初始化仓库</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git init </span><br><span class="line">git remote <span class="keyword">add</span><span class="bash"> origin &lt;server&gt;</span></span><br></pre></td></tr></table></figure>
<p> server是私有仓库的ssh路径。</p>
</li>
<li><p>提交推送博客源码</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">add </span>.</span><br><span class="line"><span class="symbol">git</span>  commit -m <span class="string">"first push, hexo blog"</span></span><br><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>-u origin master</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>至此，博客源代码就算备份好了。下面如果换了PC机后怎么操作呢？</p>
<h2 id="在另外的PC上"><a href="#在另外的PC上" class="headerlink" title="在另外的PC上"></a>在另外的PC上</h2><ol>
<li><p>首先是安装hexo的环境(略）</p>
<p> <em>正是因为这一步的存在，导致更换环境变得很繁琐，而且每个版本之间还有些许不一样，所以必须探索其他方式，比如docker方式的，比如自动集成式的等,这是后话，再说</em></p>
</li>
<li><p>新建博客根目录，克隆博客源码</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">mkdir hexoblog</span><br><span class="line">git <span class="keyword">clone</span> <span class="title">&lt;server</span>&gt;</span><br></pre></td></tr></table></figure>
<p> 到此，博客源码就已经克隆下来了，接下来可以编写，修改博文或是博客配置。</p>
</li>
<li><p>编写博客，提交部署</p>
<p> 首先需要执行：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm  <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p> 然后编写博客，完成后:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">d -g </span></span><br><span class="line"><span class="attr">git</span> <span class="string">add .</span></span><br><span class="line"><span class="attr">git</span> <span class="string">commit -m "another PC ,first commit"</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push origin master</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>回到第一台PC</p>
<p> 由于在另外的PC上进行了修改，博客源码的修改，那么如果回到此台电脑进行博客编写，需要执行：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git pull</span></span><br></pre></td></tr></table></figure>
<p> 更新博客后，编写博客，保存。然后执行之前的命令:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">d -g</span></span><br><span class="line"><span class="attr">git</span> <span class="string">add .</span></span><br><span class="line"><span class="attr">git</span> <span class="string">commit -m "update"</span></span><br><span class="line"><span class="attr">git</span> <span class="string">push</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>上面记录了当时我对于我的博客系统进行异地灾备系统的策略。当然目前看来没问题的，也挺方便的。唯一的问题就是上文提到的，换了新环境需要重新搭建hexo环境，比较繁琐。所以后面我又采用docker，容器化我的博客系统，制作成镜像，然后把上面提到的换到另外PC机上的步骤执行。这个后文再说。</p>
<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p>
</li>
<li><p>email: <a href="mailto:&#x6c;&#x69;&#x6e;&#x75;&#x78;&#99;&#x6f;&#x64;&#x65;&#50;&#110;&#x69;&#x6b;&#105;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#x6c;&#x69;&#x6e;&#x75;&#x78;&#99;&#x6f;&#x64;&#x65;&#50;&#110;&#x69;&#x6b;&#105;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></p>
</li>
</ul>
<p>2016-12-13 于杭州<br><em>By  <a href="http://weibo.com/2793607050/profile?topnav=1&wvr=6&is_all=1" target="_blank" rel="noopener">史矛革</a></em></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>coding</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用daocloud持续化构建hexo博客</title>
    <url>/2016/12/21/use-daocloud-buildhexo/</url>
    <content><![CDATA[<h1 id="前面的话"><a href="#前面的话" class="headerlink" title="前面的话"></a>前面的话</h1><p>前面几篇博客陆续记录了我使用coding仓库备份博客网站源码，以及构建了hexo的docker镜像，也提到了使用daocloud进行自动化构建hexo博客的功能。这篇博文就是记录使用daocloud持续化构建hexo博客的折腾。前面的折腾如下：</p>
<ul>
<li><a href="http://rebootcat.com/2016/12/13/use-coding-update-blog/" target="_blank" rel="noopener">使用coding私有仓库多终端编写博客</a></li>
<li><a href="http://rebootcat.com/2016/12/20/docker-made-hexoimage/" target="_blank" rel="noopener">使用docker制作hexo镜像</a></li>
</ul>
<h1 id="daocloud"><a href="#daocloud" class="headerlink" title="daocloud"></a>daocloud</h1><p>其实我是很喜欢简单粗暴的，直接，爽快，干净，利落。我可以直接记录我搭建的过程，中间可以略去对daocloud的介绍，对碰到的问题的介绍，但是，博客的目的不只是记录啊，更多的还是分享自己碰到的问题，或者自己的理解。所以，对于daocloud的介绍还是打算来一下下。</p>
<h2 id="什么是daocloud？"><a href="#什么是daocloud？" class="headerlink" title="什么是daocloud？"></a>什么是daocloud？</h2><blockquote>
<p>官网: <a href="https://www.daocloud.io/" target="_blank" rel="noopener"><strong>www.daocloud.io</strong></a></p>
</blockquote>
<p>什么是daocloud?daocloud有什么用？正如官网的主页介绍的：</p>
<blockquote>
<p>重新定义计算的边界</p>
<p>业界领先的企业级容器云及解决方案</p>
</blockquote>
<a id="more"></a>
<p>直观的理解就是一个docker容器，只不过被搬到了云上。那么使用daocloud后我发布博客会有什么区别呢？</p>
<p>原来的方式是写好博客后执行hexo clean  &amp;&amp;hexo d -g一系列的操作手工发布博客，而且必须是在安装好了hexo的环境上执行；<strong>那么使用daocloud之后呢?现在我只需要编写好博客，不用限制在hexo的环境中，在任何环境下，只要有博客源码存在，然后git push到博客源码的仓库，就会触发daocloud的自动集成，博客就发布好了。</strong>是不是方便了很多呢？O(∩_∩)O。</p>
<h2 id="daocloud与docker"><a href="#daocloud与docker" class="headerlink" title="daocloud与docker"></a>daocloud与docker</h2><p>既然理解了daocloud其实就是一个云容器(当然可能还有其他的部分)，那么与docker就脱不了干系。那么构建的过程原理是如何的呢?</p>
<p>daocloud使用daocloud.yml文件脚本进行持续构建，daocloud.yml是一系列的命令的集合，自动集成前需要一个docker镜像，这个docker镜像可以是公有的docker镜像，也可以是自己构建的镜像。然后daocloud执行daocloud.yml中一系列的命令就是基于这个镜像，直至最后的博客自动发布。那么如果是自己构建的镜像，如之前的文章<a href="http://rebootcat.com/2016/12/20/docker-made-hexoimage/" target="_blank" rel="noopener">使用docker制作hexo镜像</a>中讲的一样，需要自己编写Dockerfile，然后构建镜像。</p>
<p>下面是详细的步骤。</p>
<h1 id="使用daocloud详细步骤"><a href="#使用daocloud详细步骤" class="headerlink" title="使用daocloud详细步骤"></a>使用daocloud详细步骤</h1><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>在博客根目录新建Dockerfile,内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:slim</span><br><span class="line"><span class="keyword">MAINTAINER</span> nick &lt;linuxcode2niki@gmail.com&gt;</span><br><span class="line"><span class="comment"># instal basic tool </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y git ssh-client ca-certificates --no-install-recommends &amp;&amp; rm -r /var/lib/apt/lists/*</span></span><br><span class="line"><span class="comment"># set time zone</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Asia/Shanghai"</span> &gt; /etc/timezone &amp;&amp; dpkg-reconfigure -f noninteractive tzdata</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install</span></span><br><span class="line"><span class="comment"># install hexo</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install hexo-cli -g</span></span><br><span class="line"><span class="comment"># install hexo server</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install hexo-server</span></span><br><span class="line"><span class="comment"># set base dir</span></span><br><span class="line"><span class="comment">#RUN mkdir /hexo</span></span><br><span class="line"><span class="comment">#WORKDIR /hexo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">4000</span></span><br><span class="line"><span class="comment">#CMD ["/bin/bash"]</span></span><br></pre></td></tr></table></figure>
<p>Dockerfile用来构建hexo环境，可以缩短每次自动集成的时间。</p>
<h2 id="编写daocloud-yml"><a href="#编写daocloud-yml" class="headerlink" title="编写daocloud.yml"></a>编写daocloud.yml</h2><p>在博客根目录新建daocloud.yml，内容如下:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="attribute">version</span>: 2.0</span><br><span class="line"></span><br><span class="line"><span class="attribute">test:</span></span><br><span class="line">    image:</span><br><span class="line">        daocloud.io/rebootcaty/hexo:latest</span><br><span class="line"></span><br><span class="line">    services:</span><br><span class="line">        #- redis</span><br><span class="line"></span><br><span class="line">    # using default docker-link env</span><br><span class="line">    env:</span><br><span class="line">        #- REDIS_PORT_6379_TCP_PROTO = "tcp"</span><br><span class="line">        #- REDIS_PASSWORD = ""</span><br><span class="line"></span><br><span class="line">    install:</span><br><span class="line">      # - npm install</span><br><span class="line"></span><br><span class="line">    before_script:</span><br><span class="line">        - mkdir ~/.ssh</span><br><span class="line">        # 将ssh配置文件放入目录</span><br><span class="line">        - mv .daocloud/id_rsa ~/.ssh/id_rsa</span><br><span class="line">        # 将ssh配置文件放入目录</span><br><span class="line">        - mv .daocloud/ssh_config ~/.ssh/config</span><br><span class="line">        # 修改私钥和配置文件为可读权限</span><br><span class="line">        - chmod 600 ~/.ssh/id_rsa</span><br><span class="line">        - chmod 600 ~/.ssh/config</span><br><span class="line">        # 启动ssh-agent</span><br><span class="line">        - eval $(ssh-agent)</span><br><span class="line">        # 添加私钥 </span><br><span class="line">        - ssh-add ~/.ssh/id_rsa</span><br><span class="line">        # 删除存放私钥和配置的目录及文件</span><br><span class="line">        - rm -rf .daocloud</span><br><span class="line">        # 配置git全局的用户名和邮件，没有配置不能clone</span><br><span class="line">        - git config --global user.name "nick"</span><br><span class="line">        - git config --global user.email "linuxcode2niki@gmail.com"</span><br><span class="line"></span><br><span class="line">    script:</span><br><span class="line">        - hexo clean</span><br><span class="line">        - hexo g</span><br><span class="line">        - hexo d</span><br><span class="line">        - rm -rf ~/.ssh/</span><br><span class="line"></span><br><span class="line"><span class="attribute">build:</span></span><br><span class="line">    lite_image:</span><br><span class="line">        compile:</span><br><span class="line">            dockerfile_path: Dockerfile</span><br><span class="line">            build_dir: /</span><br><span class="line">            cache: true</span><br><span class="line"></span><br><span class="line">        extract:</span><br><span class="line">           #  - /go/bin/app</span><br><span class="line"></span><br><span class="line">        #package:</span><br><span class="line">            #  dockerfile_path: Dockerfile.sec</span><br><span class="line">            #  build_dir: /</span><br><span class="line">            #  cache: true</span><br></pre></td></tr></table></figure>
<p>daocloud.yml中拉取镜像 daocloud.io/rebootcaty/hexo:latest，这个到时候可以改成你自己的镜像。这一步不明白没关系，可以先暂时放一放，不影响。</p>
<h2 id="新建-daocloud文件夹"><a href="#新建-daocloud文件夹" class="headerlink" title="新建.daocloud文件夹"></a>新建.daocloud文件夹</h2><p>在博客根目录新建.daocloud文件夹:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span>  .daocloud</span><br></pre></td></tr></table></figure>
<p>然后把之前生成的ssh key(一般在~/.ssh/下)复制一份到这个文件夹下：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>cp  ~<span class="regexp">/.ssh/id</span>_rsa*   .daocloud/</span><br></pre></td></tr></table></figure>
<p>接着在.daocloud文件夹下新建文件ssh_config:</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>touch ssh_config</span><br></pre></td></tr></table></figure>
<p>然后写入内容:</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">StrictHostKeyChecking <span class="literal">no</span></span><br><span class="line">UserKnownHostsFile /dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><strong><em>到此，准备工作还有最后一步，就是提交到博客源码仓库:</em></strong></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git add .</span><br><span class="line"><span class="variable">$ </span>git commit -m <span class="string">"first commit hexo"</span></span><br><span class="line"><span class="variable">$ </span>git push origin master</span><br></pre></td></tr></table></figure>

<p><strong><em>接下来才是真正的开始！</em></strong></p>
<h2 id="daocloud-io上注册用户新建项目"><a href="#daocloud-io上注册用户新建项目" class="headerlink" title="daocloud.io上注册用户新建项目"></a>daocloud.io上注册用户新建项目</h2><p>去daocloud官网<a href="https://www.daocloud.io/" target="_blank" rel="noopener">www.daocloud.io</a>注册账号<br><img src="http://o8fj2jbwb.bkt.clouddn.com/daocloud1.png" alt=""><br>点击项目，新建新项目，填入名称，绑定你的博客源码仓库(比如我的是coding的私有仓库),选择持续集成：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/dao2.png" alt=""><br>然后点击开始创建,然后到”构建设置”里边：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/dao%E6%9E%84%E5%BB%BA%E8%AE%BE%E7%BD%AE.png" alt=""><br>然后是”触发规则”里边：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/dao4.png" alt=""><br>可以注意到上面选择了<strong>成功构建后设置latest为镜像标签</strong>，这就是daocloud.yml中拉取的镜像。</p>
<p>然后到”流程定义”里：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/dao%E6%B5%81%E7%A8%8B%E5%AE%9A%E4%B9%89.png" alt=""><br>点击保存后点击右上角的手动构建。然后你就会看到一个终端窗口打开了，开始记录构建日志了，嘻嘻。<br><img src="http://o8fj2jbwb.bkt.clouddn.com/dao%E6%97%A5%E5%BF%97.png" alt=""><br>静静等待完成<del>~</del></p>
<p>如果成功构建，完成后是这样的：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/daoimages1.png" alt=""><br><img src="http://o8fj2jbwb.bkt.clouddn.com/daoimage2.png" alt=""></p>
<p>至此，当每次写完博客，只需要执行下面这几条命令就不用管了，daocloud会自动构建发布。</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span>  <span class="keyword">add </span>.</span><br><span class="line"><span class="symbol">git</span> commit -m <span class="string">"update"</span></span><br><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>origin master</span><br></pre></td></tr></table></figure>

<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><p>关于daocloud，不要觉得太欣喜，毕竟“免费的是最贵的”，写这篇博文的时候我是重新又创建了一个项目，重新操作了一遍，但是在它自动构建的时候，执行了很长时间，上面的最后这两张图是我之前的项目的构建结果(我实在等不了刚刚新创建的这个项目的构建了，好慢好慢)。不过你也可以付费购买更好的服务。</p>
<p>到目前为止，博客的环境迁移，自动发布折腾的差不多了，以后就是坚持写博客，记录知识，分享知识。好吧，坚持不容易，加油！</p>
<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a></p>
</li>
<li><p>email: <a href="mailto:&#108;&#x69;&#x6e;&#x75;&#x78;&#99;&#x6f;&#100;&#x65;&#x32;&#x6e;&#105;&#x6b;&#x69;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;">&#108;&#x69;&#x6e;&#x75;&#x78;&#99;&#x6f;&#100;&#x65;&#x32;&#x6e;&#105;&#x6b;&#x69;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;</a></p>
</li>
</ul>
<p>2016-12-21 于杭州<br><em>By  <a href="http://weibo.com/2793607050/profile?topnav=1&wvr=6&is_all=1" target="_blank" rel="noopener">史矛革</a></em></p>
]]></content>
      <categories>
        <category>docker</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>docker</tag>
        <tag>daocloud</tag>
      </tags>
  </entry>
  <entry>
    <title>c++单元测试框架CPPUNIT的使用以及gcov统计大型项目的测试覆盖率</title>
    <url>/2017/03/17/use-gcov-in-hugeprogram/</url>
    <content><![CDATA[<h1 id="先来闲聊下"><a href="#先来闲聊下" class="headerlink" title="先来闲聊下"></a>先来闲聊下</h1><p>3月的杭州，依旧不见暖意。从老家过完年回来，气温低的有点不适应，还感冒了一次。身体没消停，思想也没消停，目前的环境，不太适合自身的发展与追求，良禽择木而栖，打算辞职。忙完了新公司的面试，空下了大半个月的时间，用来处理老东家这边手头的工作交接以及一系列离职手续相关的事项，另外，也打算为下一份工作做点准备，学学python,写个爬虫程序玩玩。后面我会写一篇博文分享一下最近面试的感触与经验。这篇博文主要来聊聊目前我手头还没有交接的工作——cppunit的使用以及gcov统计代码覆盖率的问题。</p>
<h1 id="CPPUNIT"><a href="#CPPUNIT" class="headerlink" title="CPPUNIT"></a>CPPUNIT</h1><p><a href="https://sourceforge.net/projects/cppunit/" target="_blank" rel="noopener">cppunit</a>是个基于LGPL的开源项目，最初版本移植自 JUnit，是一个非常优秀的开源测试框架。正如官方介绍那样：</p>
<blockquote>
<p>CppUnit is the C++ port of the famous JUnit framework for unit testing.<br>Test output is in XML or text format for automatic testing and GUI based for supervised tests.</p>
</blockquote>
<p>废话不多说，开始正题。或许你也可以参考<a href="http://cppunit.sourceforge.net/doc/cvs/cppunit_cookbook.html" target="_blank" rel="noopener">CppUnit Cookbook</a>快速上手，进行单元测试案例的编写。</p>
<h2 id="CppUnit原理"><a href="#CppUnit原理" class="headerlink" title="CppUnit原理"></a>CppUnit原理</h2><p><img src="http://o8fj2jbwb.bkt.clouddn.com/TestCase.png" alt=""></p>
<a id="more"></a>
<p>TestCase 代表一个测试用例，TestSuit 包含一组测试用例。一个或一组测试用例的测试对象被称为 Fixture。Fixture 就是被测试的目标，可能是一个对象或者一组相关的对象，甚至一个函数。通常编写一个TestCase包含如下四个步骤：</p>
<ul>
<li>对 fixture 进行初始化，及其他初始化操作，比如：生成一组被测试的对象，初始化值，setUp()函数；</li>
<li>按照要测试的某个功能或者某个流程对 fixture 进行操作;</li>
<li>验证结果是否正确，使用一系列预定义的宏;</li>
<li>对 fixture 的及其他的资源释放等清理工作，tearDown()函数。</li>
</ul>
<h2 id="CppUnit实例"><a href="#CppUnit实例" class="headerlink" title="CppUnit实例"></a>CppUnit实例</h2><p>对 fixture 的所有测试用例可以被封装在一个 CppUnit::TestFixture 的子类中或者一个CPPUNIT_NS::TestCase子类中，如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//GxpMessageTest.h</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cppunit/extensions/HelperMacros.h&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cppunit/TestFixture.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两种派生方式都可以，下面那种为了兼容parasoftcpp的使用</span></span><br><span class="line"><span class="comment">//class GxpMessageTest:public CppUnit::TestFixture</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GxpMessageTest</span>:</span><span class="keyword">public</span> CPPUNIT_NS::TestCase </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  CPPUNIT_TEST_SUITE(GxpMessageTest);<span class="comment">//开始创建一个TestSuite</span></span><br><span class="line"></span><br><span class="line">  CPPUNIT_TEST(test_calculateBasePath_0); <span class="comment">//添加TestCase</span></span><br><span class="line">  CPPUNIT_TEST(test_calculateBasePath_1);  <span class="comment">//添加TestCase</span></span><br><span class="line"></span><br><span class="line">  CPPUNIT_TEST_SUITE_END();<span class="comment">//结束创建TestSuite</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="comment">/* something protected*/</span></span><br><span class="line">  <span class="built_in">string</span> fixml;</span><br><span class="line">  <span class="built_in">string</span> cfgXmlfName;</span><br><span class="line">  <span class="built_in">string</span> fix;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  GxpMessageTest();</span><br><span class="line">  <span class="keyword">virtual</span> ~GxpMessageTest();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>;   <span class="comment">//初始化</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span></span>;  <span class="comment">//结束，清理</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">test_calculateBasePath_0</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">test_calculateBasePath_1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>类GxpMessageTest.cpp的实现如下，主要针对test_calculateBasePath_0这样的测试函数：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="constructor">CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(GxpMessageTest,<span class="string">"GxpMessagetest"</span>)</span>;</span><br><span class="line"></span><br><span class="line">GxpMessageTest::<span class="constructor">GxpMessageTest()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GxpMessageTest::~<span class="constructor">GxpMessageTest()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void GxpMessageTest::set<span class="constructor">Up()</span></span><br><span class="line">&#123;</span><br><span class="line">  fixml.append(LOCATION).append(<span class="string">"/FIX50SP2.xml"</span>);</span><br><span class="line">  cfgXmlfName.append(LOCATION).append(<span class="string">"/gxpFIXpublic.xml"</span>);</span><br><span class="line">  fix.append(<span class="string">"8=FIX.4.2\0019=272\00135=E\00134=126\00166666=1095350459\00150=00303\00149=BUYSIDE\00152"</span></span><br><span class="line">             <span class="string">"=20040916-16:19:18.328\00168=2\00156=SELLSIDE\00173=2\00111"</span></span><br><span class="line">             <span class="string">"=1095350459\00155=fred\00140=1\00167=1\0011=00303\00178=3\00179=string\00179=string\00179=string\00154=1\00159=3\001"</span></span><br><span class="line">             <span class="string">"11=1095350460\00167=2\00140=1\00159=3\0011=00303\00178=3\00179=string\00179=string\00179=string\00155=feed\00154=5\001394=3\00110="</span></span><br><span class="line">             <span class="string">"120\001"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void GxpMessageTest::tear<span class="constructor">Down()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//delete _cfgxml;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void GxpMessageTest::test<span class="constructor">_calculateBasePath_0()</span></span><br><span class="line">&#123;</span><br><span class="line">  FIX::GxpMessage object(_object);</span><br><span class="line">  <span class="built_in">string</span> basepath(<span class="string">"/root/nodeA/nodeB|N"</span>);</span><br><span class="line">  <span class="constructor">CPPUNIT_ASSERT_EQUAL(<span class="params">object</span>.<span class="params">calculateBasePath</span>(<span class="params">basepath</span>,5)</span>,(<span class="built_in">string</span>)<span class="string">"/root/node/nodeB|5"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void GxpMessageTest::test<span class="constructor">_calculateBasePath_1()</span></span><br><span class="line">&#123;</span><br><span class="line">  FIX::GxpMessage obj(_object);</span><br><span class="line">  <span class="comment">/*验证类GxpMessage的构造函数GxpMessage(const FIX::Message&amp; m) */</span></span><br><span class="line">  FIX::GxpMessage object(obj);</span><br><span class="line">  FIX::GxpMessage obj_null;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">string</span> basepath(<span class="string">"/root/nodeA/group|4"</span>);</span><br><span class="line">  <span class="built_in">string</span> falsepath(<span class="string">"/root/nodeA/group|N/subnode"</span>);</span><br><span class="line">  <span class="built_in">string</span> respath;</span><br><span class="line">  <span class="constructor">CPPUNIT_ASSERT_EQUAL((<span class="params">string</span>)</span><span class="string">"/root/nodeA/group|4/subnode"</span>,object.calculate<span class="constructor">BasePath(<span class="params">basepath</span>,<span class="params">falsepath</span>,<span class="params">respath</span>)</span>);</span><br><span class="line"></span><br><span class="line">  basepath.assign(<span class="string">"/root/nodeA/group|4/subnode/subgroup|5"</span>);</span><br><span class="line">  falsepath.assign(<span class="string">"/root/nodeA/group|N/subnode/subgroup|N/abc/group|N"</span>);</span><br><span class="line">  respath.clear<span class="literal">()</span>;</span><br><span class="line">  <span class="constructor">CPPUNIT_ASSERT_EQUAL((<span class="params">string</span>)</span><span class="string">"/root/nodeA/group|4/subnode/subgroup|5/abc/group|N"</span>,object.calculate<span class="constructor">BasePath(<span class="params">basepath</span>,<span class="params">falsepath</span>,<span class="params">respath</span>)</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中需要留意的就是这几个宏，可以方便的创建测试用例：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">CPPUNIT_TEST_SUITE</span><span class="params">()</span></span> 开始创建一个TestSuite </span><br><span class="line"><span class="function"><span class="title">CPPUNIT_TEST</span><span class="params">()</span></span> 添加TestCase </span><br><span class="line"><span class="function"><span class="title">CPPUNIT_TEST_SUITE_END</span><span class="params">()</span></span>  结束创建</span><br><span class="line"><span class="function"><span class="title">CPPUNIT_TEST_SUITE_NAMED_REGISTRATION</span><span class="params">()</span></span> 添加一个TestSuite到一个指定的TestFactoryRegistry工厂（两个参数：第一个是TestSuite；第二个是唯一标识TestSuite名称字符串）</span><br></pre></td></tr></table></figure>

<p>另外，CppUnit提供了多种验证测试用例成功失败的宏：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="constructor">CPPUNIT_ASSERT(<span class="params">condition</span>)</span>   <span class="comment">// 确信condition为真</span></span><br><span class="line"><span class="constructor">CPPUNIT_ASSERT_MESSAGE(<span class="params">message</span>, <span class="params">condition</span>)</span>  </span><br><span class="line"><span class="comment">// 当condition为假时失败, 并打印message</span></span><br><span class="line"><span class="constructor">CPPUNIT_FAIL(<span class="params">message</span>)</span>            </span><br><span class="line"><span class="comment">// 当前测试失败, 并打印message</span></span><br><span class="line"><span class="constructor">CPPUNIT_ASSERT_EQUAL(<span class="params">expected</span>, <span class="params">actual</span>)</span>    </span><br><span class="line"><span class="comment">// 确信两者相等</span></span><br><span class="line"><span class="constructor">CPPUNIT_ASSERT_EQUAL_MESSAGE(<span class="params">message</span>, <span class="params">expected</span>, <span class="params">actual</span>)</span>  </span><br><span class="line"><span class="comment">// 失败的同时打印message</span></span><br><span class="line"><span class="constructor">CPPUNIT_ASSERT_DOUBLES_EQUAL(<span class="params">expected</span>, <span class="params">actual</span>, <span class="params">delta</span>)</span>  </span><br><span class="line"><span class="comment">// 当expected和actual之间差大于delta时失败</span></span><br></pre></td></tr></table></figure>

<p>在完成一个或者多个测试类的编写后，需要用TestRunner类的实例来运行每个测试类的测试函数进行测试。TestRunner类型共有：TextUi::TestRunner，QtUi::TestRunner，MfcUi::TestRunner三个，都可以用来运行测试。</p>
<p>主测试程序如下:</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"> <span class="selector-tag">int</span> <span class="selector-tag">main</span>(int argc,char* argv[])</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    CppUnit::TextUi::TestRunner  runner;</span></span><br><span class="line"><span class="comment">    CppUnit::TestFactoryRegistry &amp;registry =CppUnit::TestFactoryRegistry::getRegistry("alltest");//得到标识MathTest名称字符串</span></span><br><span class="line"><span class="comment">  alltest的TestFactoryRegistry</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">    runner.addTest(registry.makeTest());//添加Test</span></span><br><span class="line"><span class="comment">    runner.run();//运行测试案例</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// informs test-listener about testresults</span></span><br><span class="line">      <span class="attribute">CPPUNIT_NS</span>::TestResult testresult;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// register listener for collecting the test-results</span></span><br><span class="line">      <span class="attribute">CPPUNIT_NS</span>::TestResultCollector collectedresults;</span><br><span class="line">      <span class="selector-tag">testresult</span><span class="selector-class">.addListener</span> (&amp;collectedresults);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// register listener for per-test progress output</span></span><br><span class="line">      <span class="selector-tag">CPPUNIT_NS</span><span class="selector-pseudo">::BriefTestProgressListener</span> <span class="selector-tag">progress</span>;</span><br><span class="line">      <span class="selector-tag">testresult</span><span class="selector-class">.addListener</span> (&amp;progress);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// insert test-suite at test-runner by registry</span></span><br><span class="line">      <span class="selector-tag">CPPUNIT_NS</span><span class="selector-pseudo">::TestRunner</span> <span class="selector-tag">testrunner</span>;</span><br><span class="line">      <span class="selector-tag">testrunner</span><span class="selector-class">.addTest</span> (<span class="attribute">CPPUNIT_NS</span>::<span class="attribute">TestFactoryRegistry</span>::getRegistry(<span class="string">"GxpMessagetest"</span>).makeTest ());</span><br><span class="line">      <span class="selector-tag">testrunner</span><span class="selector-class">.addTest</span> (<span class="attribute">CPPUNIT_NS</span>::<span class="attribute">TestFactoryRegistry</span>::getRegistry(<span class="string">"CfgXmltest"</span>).makeTest ());</span><br><span class="line">      <span class="selector-tag">testrunner</span><span class="selector-class">.run</span>(testresult);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// output results in compiler-format</span></span><br><span class="line">      <span class="selector-tag">CPPUNIT_NS</span><span class="selector-pseudo">::CompilerOutputter</span> <span class="selector-tag">compileroutputter</span>(&amp;collectedresults, <span class="attribute">std</span>::cerr);</span><br><span class="line">      <span class="selector-tag">compileroutputter</span><span class="selector-class">.write</span> (); </span><br><span class="line">  </span><br><span class="line">      <span class="comment">// Output XML for Jenkins CPPunit plugin</span></span><br><span class="line">      <span class="selector-tag">ofstream</span> <span class="selector-tag">xmlFileOut</span>(<span class="string">"cppTestBasicMathResults.xml"</span>);</span><br><span class="line">      <span class="selector-tag">XmlOutputter</span> <span class="selector-tag">xmlOut</span>(&amp;collectedresults, xmlFileOut);</span><br><span class="line">      <span class="selector-tag">xmlOut</span><span class="selector-class">.write</span>();</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// return 0 if tests were successful</span></span><br><span class="line">      <span class="selector-tag">return</span> <span class="selector-tag">collectedresults</span><span class="selector-class">.wasSuccessful</span>() ? <span class="selector-tag">0</span> : <span class="selector-tag">1</span>;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>至此，可以很便利的使用CppUnit进行单元测试案例的编写，提高单元测试案例的编写效率以及测试效果。如果单元测试案例写的够详细，那么可以把代码覆盖率提高很多，对源代码的静态或者逻辑功能进行较为详细的测试。<br>另外，可以参考以下网址：</p>
<p><a href="http://www.whiteboxtest.com/Unit-Testing-With-CppUnit.php" target="_blank" rel="noopener">UnitTestingWithCppUnit</a>    &amp;&amp;<br> <a href="https://www.ibm.com/developerworks/cn/linux/l-cppunit/" target="_blank" rel="noopener">便利的开发工具 CppUnit 快速使用指南</a></p>
<h1 id="GCOV"><a href="#GCOV" class="headerlink" title="GCOV"></a>GCOV</h1><p>gcov是gcc中内建的工具，用来做代码覆盖率统计；lcov是GCOV图形化的前端工具,基于Html输出，并生成一棵完整的HTML树。</p>
<h2 id="步骤概览"><a href="#步骤概览" class="headerlink" title="步骤概览"></a>步骤概览</h2><ol>
<li>编译生成xx.gcno文件</li>
<li>执行程序生成xx.gcda文件</li>
<li>使用lcov命令手机覆盖率信息写入yy.info文件，可能对多个yy.info文件进行合并为一个大的info文件</li>
<li>使用genhtml命令生成用于展示覆盖率的html文件</li>
</ol>
<h2 id="gcno文件-amp-amp-gcda文件"><a href="#gcno文件-amp-amp-gcda文件" class="headerlink" title="gcno文件 &amp;&amp; gcda文件"></a>gcno文件 &amp;&amp; gcda文件</h2><p>要在编译时生成gcno文件，运行后生成gcda文件，需要在编译链接过程对相关文件进行插桩，即在编译时添加编译选项<strong>-fprofile-arcs   -ftest-coverage</strong>，在链接时加上选项<strong>-lgcov</strong>。如果没有-lgcov选项编译出来的.so文件在动态加载的时候会提示类似 undefined reference to ‘<strong>gcov_merge_add’ 或者 undefined reference to ‘</strong>gcov_init’这样的错误。可以在makefile里定义宏：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">GCOVFLAG</span>=-fprofile-arcs -ftest-coverage </span><br><span class="line"><span class="attr">LINKFLAG</span>=-lgcov</span><br></pre></td></tr></table></figure>
<p>编译后每个.cpp文件对应一个gcno文件，然后运行测试程序可以生成gcda文件，虽然可以用环境变量指定gcda文件生成的路径，但是不建议这么做，因为后续的lcov收集覆盖信息需要gcno文件和gcda文件在一个目录下。</p>
<p>这两个文件都是二进制文件，包含不可见字符。此处需要留意的是<strong><em>可执行程序</em></strong>。对于我来说，此处的 <strong><em>可执行程序</em></strong> 是我使用CppUnit框架编写的单元测试程序，在链接的时候以<strong>动态库so</strong>的方式对需要测试的源代码进行链接。</p>
<p>通常的做法是，如果源代码目录名为/fix,下面包含了很多.c/.cpp/.h文件，我的做法是在/fix目录下新建一个cppunit文件夹作为单元测试案例的编写目录。编写好后，只需要在源代码目录/fix下的makefile里加入<strong>GCOVFLAG和LINKFLAG</strong>，然后在cppunit目录下的makefile里链接源代码生成的so库,然后make生成可执行程序,然后运行该可执行程序。</p>
<p>这将会在源代码目录/fix下生成gcno和gcda文件，对应每一个c/cpp文件。如图：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/gcda.png" alt=""></p>
<h2 id="info文件-amp-amp-html文件"><a href="#info文件-amp-amp-html文件" class="headerlink" title="info文件 &amp;&amp; html文件"></a>info文件 &amp;&amp; html文件</h2><p>使用lcov命令收集覆盖率信息，写入info文件。具体参数使用请查看 lcov –help .我常用命令:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">GCOVTESTPATH</span>=/home/niki/sources/src/gcovtest</span><br><span class="line"><span class="attribute">INFONAME</span>=$(basename `pwd`)</span><br><span class="line">lcov  -d .  -o <span class="variable">$GCOVTESTPATH</span>/<span class="variable">$INFONAME</span>.<span class="builtin-name">info</span>  -c</span><br></pre></td></tr></table></figure>
<p>其中gcovtest目录是我专门用来收集info文件的目录，因为会涉及到很多个文件夹，每个源代码目录都可能产生一个info文件，最终需要合并这些info文件为一个统一的info文件然后才能进行分析。这里我用到了一个小脚本all_gcov:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">./generate_info </span><br><span class="line"></span><br><span class="line">aArg=</span><br><span class="line">argsingle=</span><br><span class="line"></span><br><span class="line">HTMLPATH=~/windows/result</span><br><span class="line"><span class="keyword">for</span> nf <span class="keyword">in</span> `ls *.info`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  argsingle=<span class="string">"-a <span class="variable">$nf</span> "</span></span><br><span class="line">  aArg=<span class="string">"<span class="variable">$aArg</span> <span class="variable">$argsingle</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="variable">$aArg</span></span><br><span class="line">lcov   -o Main.INFO   <span class="variable">$aArg</span></span><br><span class="line">genhtml -o <span class="variable">$HTMLPATH</span>  Main.INFO</span><br></pre></td></tr></table></figure>
<p>脚本很容易理解，generate_info脚本是用来对每个源代码目录生成info文件到$GCOVTESTPATH下,后面会介绍。脚本对$GCOVTESTPATH目录下的*.info文件进行遍历，然后合并成一个大的Main.INFO文件。然后使用genhtml命令生成html文件写到目录~/windows/result目录下。</p>
<p>那么generate_info脚本是什么样的?</p>
<p>对于一个大型项目来说，有很多的源代码目录甚至多个子目录，每个源代码目录下的源代码都需要编写单元测试案例进行测试，当每个目录下都生成了gcno和gcda文件后，这个时候就需要generate_info脚本了，大致原理是进入到每一个源代码目录下，使用lcov命令根据gcno和gcda文件生成info文件到$GCOVTESTPATH目录下。部分代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/ksh</span></span><br><span class="line">SRC_DIR=<span class="variable">$GXPHOME</span>/src</span><br><span class="line">BASE_DIR=`<span class="built_in">cd</span> .&amp;&amp;<span class="built_in">pwd</span>`</span><br><span class="line">MAKE_LOG=<span class="variable">$BASE_DIR</span>/gcov.log</span><br><span class="line">COMPILE_LOG=<span class="variable">$BASE_DIR</span>/process.log</span><br><span class="line"></span><br><span class="line">GCOVTESTPATH=/home/niki/sources/src/gcovtest</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入到某个源代码目录下,根据生成的*.gcno和*.gcda文件,lcov抓取数据生成xx.info文件写到$GCOVTESTPATH目录下</span></span><br><span class="line"><span class="keyword">function</span> gen_infofile &#123;</span><br><span class="line">  INFONAME=$(basename `<span class="built_in">pwd</span>`)</span><br><span class="line">  lcov  -d .  -o <span class="variable">$GCOVTESTPATH</span>/<span class="variable">$INFONAME</span>.info  -c   &gt;&gt; <span class="variable">$COMPILE_LOG</span> 2&gt;&amp;1</span><br><span class="line">  <span class="comment">#du filename 输出为 256 filename</span></span><br><span class="line">  filenone=$(du  <span class="variable">$GCOVTESTPATH</span>/<span class="variable">$INFONAME</span>.info)</span><br><span class="line">  <span class="comment">#获取文件大小</span></span><br><span class="line">  filesize=`<span class="built_in">echo</span> <span class="variable">$filenone</span> | awk <span class="string">'&#123;print $1;&#125;'</span>`</span><br><span class="line">  <span class="comment">#如果文件大小为0,则删除这个info空文件</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$filesize</span>"</span>  -eq 0 ];<span class="keyword">then</span></span><br><span class="line">  ¦ rm <span class="variable">$GCOVTESTPATH</span>/<span class="variable">$INFONAME</span>.info</span><br><span class="line">  <span class="keyword">fi</span>  </span><br><span class="line"></span><br><span class="line">TARGET=gcov_info_file</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"begin <span class="variable">$&#123;TARGET&#125;</span>"</span>|tee <span class="variable">$MAKE_LOG</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"begin process "</span>&gt;<span class="variable">$COMPILE_LOG</span></span><br><span class="line"><span class="comment">#xml</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"begin gcov xml.info"</span> |tee -a <span class="variable">$MAKE_LOG</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$SRC_DIR</span>/xml</span><br><span class="line">gen_infofile</span><br><span class="line"></span><br><span class="line"><span class="comment">#plugin</span></span><br><span class="line">PLUGIN_SRC_DIR=<span class="variable">$SRC_DIR</span>/plugin</span><br><span class="line"><span class="keyword">for</span> loop <span class="keyword">in</span> `ls <span class="variable">$PLUGIN_SRC_DIR</span>|grep -v demo`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  ¦ is_in_skiplist <span class="variable">$loop</span></span><br><span class="line">  ¦ <span class="keyword">if</span> [ <span class="variable">$SKIPRET</span> = 1 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">continue</span></span><br><span class="line">  ¦ <span class="keyword">fi</span></span><br><span class="line">  ¦ <span class="built_in">echo</span> <span class="string">"begin gcov plugin <span class="variable">$loop</span>.info"</span>|tee -a <span class="variable">$MAKE_LOG</span></span><br><span class="line">  ¦ <span class="built_in">cd</span> <span class="variable">$PLUGIN_SRC_DIR</span>/<span class="variable">$loop</span></span><br><span class="line">    gen_infofile</span><br><span class="line">  ¦ <span class="comment">#./gcov.sh &gt;&gt;$COMPILE_LOG 2&gt;&amp;1</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#省略了一些类似的代码</span></span><br></pre></td></tr></table></figure>

<p><strong>优化:</strong>这个地方还可以优化，前提需要每个源代码目录下都编译&amp;&amp;运行产生了gcno和gcda文件;其实还可以写脚本执行产生gcno/gcda文件的重复性工作。</p>
<h2 id="html浏览器展示"><a href="#html浏览器展示" class="headerlink" title="html浏览器展示"></a>html浏览器展示</h2><p>genhtml命令产生的html文件写到了~/windows/result文件夹下，用浏览器打开index.html:<br><img src="http://o8fj2jbwb.bkt.clouddn.com/html.png" alt=""><br><img src="http://o8fj2jbwb.bkt.clouddn.com/html2.png" alt=""><br><img src="http://o8fj2jbwb.bkt.clouddn.com/html3.png" alt=""><br>可以看到还是比较详细的把代码覆盖率显示了。点开源代码也可以看到具体哪一些代码行被执行了哪一些没有被执行。总体看来还是挺不错的！</p>
<h1 id="CppUnit配合Gcov"><a href="#CppUnit配合Gcov" class="headerlink" title="CppUnit配合Gcov"></a>CppUnit配合Gcov</h1><p>上面详细的介绍了CppUnit和Gcov的使用，那么现在对于一个新编写的源代码目录，比如/newsrcdir,需要做下面一些工作：</p>
<ol>
<li>新建目录/newsrcdir/cppunit，编写单元测试案例到此目录下</li>
<li>/newsrcdir/makefile中添加$GCOVFLAG和$LINKFLAG，编译源代码生成gcno文件</li>
<li>/newsrcdir/cppunit/makefile中链接-lnewsrcdir(测试源代码生成的动态库）,make all</li>
<li>执行生成的可执行程序</li>
<li>/newsrcdir目录下生成了gcda文件</li>
<li>去到$GCOVTESTPATH下执行./all_gcov</li>
<li>浏览器中查看html</li>
</ol>
<p>以上步骤可以优化，最终的all_gcov执行结果为:<br><img src="http://o8fj2jbwb.bkt.clouddn.com/info.png" alt=""><br><img src="http://o8fj2jbwb.bkt.clouddn.com/info2.png" alt=""></p>
<h1 id="好了，结束，下班，回家"><a href="#好了，结束，下班，回家" class="headerlink" title="好了，结束，下班，回家"></a>好了，结束，下班，回家</h1><p>写完了。下一篇，面试的感触与经验分享。</p>
<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a> (<strong>默认</strong>)</p>
</li>
<li><p>email: <a href="mailto:&#108;&#x69;&#x6e;&#117;&#x78;&#x63;&#111;&#100;&#101;&#x32;&#x6e;&#105;&#x6b;&#x69;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#108;&#x69;&#x6e;&#117;&#x78;&#x63;&#111;&#100;&#101;&#x32;&#x6e;&#105;&#x6b;&#x69;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a></p>
</li>
</ul>
<p>2017-03-17 于杭州<br><em>By  <a href="http://weibo.com/2793607050/profile?topnav=1&wvr=6&is_all=1" target="_blank" rel="noopener">史矛革</a></em></p>
]]></content>
      <categories>
        <category>c/c++</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>gcov</tag>
        <tag>lcov</tag>
        <tag>genthml</tag>
        <tag>linux</tag>
        <tag>cppunit</tag>
      </tags>
  </entry>
  <entry>
    <title>辩证看待 iostat</title>
    <url>/2018/01/16/using-iostat-dialectically/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经常做系统分析会接触到很多有用的工具，比如 iostat,它是用来分析磁盘性能、系统 I/O 的利器。</p>
<p>本文将重点<strong>介绍 iostat 命令的使用，并分析容易引起误解的几个指标</strong>。</p>
<h1 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h1><blockquote>
<p>iostat - Report Central Processing Unit (CPU) statistics and input/output statistics for devices and partitions.</p>
</blockquote>
<p>上面是 man 手册关于 iostat 命令的介绍，非常简单明了。iostat 是我们经常用来分析 cpu 负载和磁盘 I/O 情况的工具。</p>
<h2 id="iostat-基本使用"><a href="#iostat-基本使用" class="headerlink" title="iostat 基本使用"></a>iostat 基本使用</h2><p>常用命令（个人习惯）：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">iostat -xk <span class="number">2</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>参数的解释可以查看 man 手册：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">OPTIONS</span><br><span class="line">       -c     Display the CPU utilization report.</span><br><span class="line"></span><br><span class="line">       -d     Display the device utilization report.</span><br><span class="line"></span><br><span class="line">       -g group_name &#123; device [<span class="built_in">..</span>.] | ALL &#125;</span><br><span class="line">              Display statistics <span class="keyword">for</span> a<span class="built_in"> group </span>of devices.  The iostat command reports statistics <span class="keyword">for</span> each individual device <span class="keyword">in</span> the list then a line of global statistics <span class="keyword">for</span> the<span class="built_in"> group </span>displayed as group_name <span class="keyword">and</span> made  up  of  all  the</span><br><span class="line">              devices <span class="keyword">in</span> the list. The ALL keyword means that all the block devices defined by the<span class="built_in"> system </span>shall be included <span class="keyword">in</span> the group.</span><br><span class="line"></span><br><span class="line">       -h     Make the Device Utilization Report easier <span class="keyword">to</span> read by a human.</span><br><span class="line"></span><br><span class="line">       -j &#123; ID | LABEL | PATH | UUID | <span class="built_in">..</span>. &#125; [ device [<span class="built_in">..</span>.] | ALL ]</span><br><span class="line">              Display  persistent  device  names.  Options  ID,  LABEL,  etc.  specify  the<span class="built_in"> type </span>of the persistent name. These options are <span class="keyword">not</span> limited, only prerequisite is that directory with required persistent names is present <span class="keyword">in</span></span><br><span class="line">              /dev/disk.  Optionally, multiple devices can be specified <span class="keyword">in</span> the chosen persistent name type.  Because persistent device names are usually long, option -h is enabled implicitly with this option.</span><br><span class="line"></span><br><span class="line">       -k     Display statistics <span class="keyword">in</span> kilobytes per second.</span><br><span class="line"></span><br><span class="line">       -m     Display statistics <span class="keyword">in</span> megabytes per second.</span><br><span class="line"></span><br><span class="line">       -N     Display the registered device mapper names <span class="keyword">for</span> any device mapper devices.  Useful <span class="keyword">for</span> viewing LVM2 statistics.</span><br><span class="line"></span><br><span class="line">       -p [ &#123; device [,<span class="built_in">..</span>.] | ALL &#125; ]</span><br><span class="line">              The -p option displays statistics <span class="keyword">for</span> block devices <span class="keyword">and</span> all their partitions that are used by the system.  <span class="keyword">If</span> a device name is entered on the command line, then statistics <span class="keyword">for</span> it <span class="keyword">and</span> all its partitions  are  displayed.</span><br><span class="line">              Last,  the  ALL  keyword  indicates  that  statistics  have <span class="keyword">to</span> be displayed <span class="keyword">for</span> all the block devices <span class="keyword">and</span> partitions defined by the system, including those that have never been used. <span class="keyword">If</span> option -j is defined before this</span><br><span class="line">              option, devices entered on the command line can be specified with the chosen persistent name type.</span><br><span class="line"></span><br><span class="line">       -T     This option must be used with option -g <span class="keyword">and</span> indicates that only global statistics <span class="keyword">for</span> the<span class="built_in"> group </span>are <span class="keyword">to</span> be displayed, <span class="keyword">and</span> <span class="keyword">not</span> statistics <span class="keyword">for</span> individual devices <span class="keyword">in</span> the group.</span><br><span class="line"></span><br><span class="line">       -t     <span class="builtin-name">Print</span> the time <span class="keyword">for</span> each report displayed. The timestamp format may depend on the value of the S_TIME_FORMAT environment variable (see below).</span><br><span class="line"></span><br><span class="line">       -V     <span class="builtin-name">Print</span> version number then exit.</span><br><span class="line"></span><br><span class="line">       -x     Display extended statistics.</span><br><span class="line"></span><br><span class="line">       -y     Omit first report with statistics since<span class="built_in"> system </span>boot, <span class="keyword">if</span> displaying multiple records at given interval.</span><br><span class="line"></span><br><span class="line">       -z     Tell iostat <span class="keyword">to</span> omit output <span class="keyword">for</span> any devices <span class="keyword">for</span> which there was <span class="literal">no</span> activity during the sample period.</span><br></pre></td></tr></table></figure>
<p>简单讲，-x 参数能比较详细的给出一些指标，2 代表间隔时间为 2s，统计输出 10 次。</p>
<a id="more"></a>

<p>上面的命令可以看到如下的输出：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avg-cpu:</span>  <span class="string">%user</span>   <span class="string">%nice</span> <span class="string">%system</span> <span class="string">%iowait</span>  <span class="string">%steal</span>   <span class="string">%idle</span></span><br><span class="line">           <span class="number">0.40</span>    <span class="number">0.00</span>    <span class="number">0.49</span>    <span class="number">0.42</span>    <span class="number">0.00</span>   <span class="number">98.69</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Device:</span>         <span class="string">rrqm/s</span>   <span class="string">wrqm/s</span>     <span class="string">r/s</span>     <span class="string">w/s</span>    <span class="string">rkB/s</span>    <span class="string">wkB/s</span> <span class="string">avgrq-sz</span> <span class="string">avgqu-sz</span>   <span class="string">await</span> <span class="string">r_await</span> <span class="string">w_await</span>  <span class="string">svctm</span>  <span class="string">%util</span></span><br><span class="line"><span class="string">sda</span>               <span class="number">0.00</span>   <span class="number">253.00</span>    <span class="number">0.02</span>   <span class="number">10.26</span>     <span class="number">0.66</span>  <span class="number">2081.56</span>   <span class="number">405.05</span>     <span class="number">0.65</span>   <span class="number">62.78</span>    <span class="number">6.01</span>   <span class="number">62.92</span>   <span class="number">4.55</span>   <span class="number">4.68</span></span><br><span class="line"><span class="string">sdb</span>               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">8.19</span>     <span class="number">0.00</span>    <span class="number">0.23</span>    <span class="number">0.23</span>    <span class="number">0.00</span>   <span class="number">0.23</span>   <span class="number">0.00</span></span><br><span class="line"><span class="string">sdc</span>               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">8.19</span>     <span class="number">0.00</span>    <span class="number">0.32</span>    <span class="number">0.32</span>    <span class="number">0.00</span>   <span class="number">0.32</span>   <span class="number">0.00</span></span><br><span class="line"><span class="string">sdd</span>               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">8.19</span>     <span class="number">0.00</span>    <span class="number">0.34</span>    <span class="number">0.34</span>    <span class="number">0.00</span>   <span class="number">0.34</span>   <span class="number">0.00</span></span><br><span class="line"><span class="string">sde</span>               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">8.19</span>     <span class="number">0.00</span>    <span class="number">0.34</span>    <span class="number">0.34</span>    <span class="number">0.00</span>   <span class="number">0.34</span>   <span class="number">0.00</span></span><br></pre></td></tr></table></figure>
<p>上面各个字段的解释如下（同样来自 man）</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Device Utilization Report</span><br><span class="line">       rrqm/s</span><br><span class="line">              The <span class="built_in">number</span> <span class="keyword">of</span> <span class="built_in">read</span> requests merged per <span class="keyword">second</span> that were queued <span class="built_in">to</span> <span class="keyword">the</span> device.</span><br><span class="line"></span><br><span class="line">       wrqm/s</span><br><span class="line">              The <span class="built_in">number</span> <span class="keyword">of</span> <span class="built_in">write</span> requests merged per <span class="keyword">second</span> that were queued <span class="built_in">to</span> <span class="keyword">the</span> device.</span><br><span class="line"></span><br><span class="line">       r/s</span><br><span class="line">              The <span class="built_in">number</span> (<span class="keyword">after</span> merges) <span class="keyword">of</span> <span class="built_in">read</span> requests completed per <span class="keyword">second</span> <span class="keyword">for</span> <span class="keyword">the</span> device.</span><br><span class="line"></span><br><span class="line">       w/s</span><br><span class="line">              The <span class="built_in">number</span> (<span class="keyword">after</span> merges) <span class="keyword">of</span> <span class="built_in">write</span> requests completed per <span class="keyword">second</span> <span class="keyword">for</span> <span class="keyword">the</span> device.</span><br><span class="line"></span><br><span class="line">       rsec/s (rkB/s, rMB/s)</span><br><span class="line">              The <span class="built_in">number</span> <span class="keyword">of</span> sectors (kilobytes, megabytes) <span class="built_in">read</span> <span class="built_in">from</span> <span class="keyword">the</span> device per <span class="keyword">second</span>.</span><br><span class="line"></span><br><span class="line">       wsec/s (wkB/s, wMB/s)</span><br><span class="line">              The <span class="built_in">number</span> <span class="keyword">of</span> sectors (kilobytes, megabytes) written <span class="built_in">to</span> <span class="keyword">the</span> device per <span class="keyword">second</span>.</span><br><span class="line"></span><br><span class="line">       avgrq-sz</span><br><span class="line">              The <span class="built_in">average</span> size (<span class="keyword">in</span> sectors) <span class="keyword">of</span> <span class="keyword">the</span> requests that were issued <span class="built_in">to</span> <span class="keyword">the</span> device.</span><br><span class="line"></span><br><span class="line">       avgqu-sz</span><br><span class="line">              The <span class="built_in">average</span> queue <span class="built_in">length</span> <span class="keyword">of</span> <span class="keyword">the</span> requests that were issued <span class="built_in">to</span> <span class="keyword">the</span> device.</span><br><span class="line"></span><br><span class="line">       await</span><br><span class="line">              The <span class="built_in">average</span> <span class="built_in">time</span> (<span class="keyword">in</span> <span class="built_in">milliseconds</span>) <span class="keyword">for</span> I/O requests issued <span class="built_in">to</span> <span class="keyword">the</span> device <span class="built_in">to</span> be served. This includes <span class="keyword">the</span> <span class="built_in">time</span> spent <span class="keyword">by</span> <span class="keyword">the</span> requests <span class="keyword">in</span> queue <span class="keyword">and</span> <span class="keyword">the</span> <span class="built_in">time</span> spent servicing them.</span><br><span class="line"></span><br><span class="line">       r_await</span><br><span class="line">              The <span class="built_in">average</span> <span class="built_in">time</span> (<span class="keyword">in</span> <span class="built_in">milliseconds</span>) <span class="keyword">for</span> <span class="built_in">read</span> requests issued <span class="built_in">to</span> <span class="keyword">the</span> device <span class="built_in">to</span> be served. This includes <span class="keyword">the</span> <span class="built_in">time</span> spent <span class="keyword">by</span> <span class="keyword">the</span> requests <span class="keyword">in</span> queue <span class="keyword">and</span> <span class="keyword">the</span> <span class="built_in">time</span> spent servicing them.</span><br><span class="line">                            w_await</span><br><span class="line">              The <span class="built_in">average</span> <span class="built_in">time</span> (<span class="keyword">in</span> <span class="built_in">milliseconds</span>) <span class="keyword">for</span> <span class="built_in">write</span> requests issued <span class="built_in">to</span> <span class="keyword">the</span> device <span class="built_in">to</span> be served. This includes <span class="keyword">the</span> <span class="built_in">time</span> spent <span class="keyword">by</span> <span class="keyword">the</span> requests <span class="keyword">in</span> queue <span class="keyword">and</span> <span class="keyword">the</span> <span class="built_in">time</span> spent servicing them.</span><br><span class="line"></span><br><span class="line">       svctm</span><br><span class="line">              The <span class="built_in">average</span> service <span class="built_in">time</span> (<span class="keyword">in</span> <span class="built_in">milliseconds</span>) <span class="keyword">for</span> I/O requests that were issued <span class="built_in">to</span> <span class="keyword">the</span> device. Warning! Do <span class="keyword">not</span> trust this field <span class="keyword">any</span> more.  This field will be removed <span class="keyword">in</span> <span class="keyword">a</span> future sysstat <span class="built_in">version</span>.</span><br><span class="line"></span><br><span class="line">       %util</span><br><span class="line">              Percentage <span class="keyword">of</span> elapsed <span class="built_in">time</span> during which I/O requests were issued <span class="built_in">to</span> <span class="keyword">the</span> device (bandwidth utilization <span class="keyword">for</span> <span class="keyword">the</span> device). Device saturation occurs when this <span class="built_in">value</span> is <span class="built_in">close</span> <span class="built_in">to</span> <span class="number">100</span>%.</span><br></pre></td></tr></table></figure>
<p>上面的英文应该还是挺容易明白的，其中重点需要关注的是下面几个指标：</p>
<ul>
<li>avgrq-sz：每个 IO 的平均扇区数，即所有请求的平均大小，以扇区（512字节）为单位</li>
<li>avgqu-sz：平均意义上的请求队列长度</li>
<li>await：平均每个 I/O 花费的时间，包括在队列中等待时间以及磁盘控制器中真正处理的时间</li>
<li>svctm：每个 I/O 的服务时间。但注意上面的解释 <code>Warning! Do not trust this field any more</code>。iostat 中关于每个 I/O 的真实处理时间不可靠</li>
<li>util：磁盘繁忙程度，单位为百分比</li>
</ul>
<p>分析建议：<br>当系统性能下降时，我们往往需要着重关注上面列出来的 5 个参数，比如：</p>
<ul>
<li><strong>I/O 请求队列是否过长？</strong></li>
<li><strong>I/O size 是否过大或过小？</strong></li>
<li><strong>是否造成了 I/O 等待过长？</strong></li>
<li><strong>每个 I/O 处理时间是否过大？</strong></li>
<li><strong>磁盘压力是否过大？</strong></li>
</ul>
<p>综合分析上述指标，可以得到一定的性能分析结论，但需要注意一些陷阱。</p>
<h2 id="注意陷阱"><a href="#注意陷阱" class="headerlink" title="注意陷阱"></a>注意陷阱</h2><p>我们看到上面 iostat 的输出如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Device:</span>         <span class="string">rrqm/s</span>   <span class="string">wrqm/s</span>     <span class="string">r/s</span>     <span class="string">w/s</span>    <span class="string">rkB/s</span>    <span class="string">wkB/s</span> <span class="string">avgrq-sz</span> <span class="string">avgqu-sz</span>   <span class="string">await</span> <span class="string">r_await</span> <span class="string">w_await</span>  <span class="string">svctm</span>  <span class="string">%util</span></span><br><span class="line"><span class="string">sda</span>               <span class="number">0.00</span>   <span class="number">253.00</span>    <span class="number">0.02</span>   <span class="number">10.26</span>     <span class="number">0.66</span>  <span class="number">2081.56</span>   <span class="number">405.05</span>     <span class="number">0.65</span>   <span class="number">62.78</span>    <span class="number">6.01</span>   <span class="number">62.92</span>   <span class="number">4.55</span>   <span class="number">4.68</span></span><br></pre></td></tr></table></figure>
<p>svctm 为 4.55 ms，即每个 I/O 处理时间为 4.55 ms，这其实是有点偏慢了，但是 await 却高达 62.78 ms，为何？</p>
<p>上面可以看到总的 I/O 数为『读 I/O』+ 『写 I/O』 = 0.02 + 10.26 ≈ 11 个，假设这 11 个 I/O 是同时发起，且磁盘是顺序处理的情况，那么平均等待时间计算如下：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">平均等待时间 = 单个 I/O 处理时间 * ( <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + ...+ I/O 请求总数 - <span class="number">1</span> ) / 请求总数 = <span class="number">4.55</span> * （ <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + ... + <span class="number">10</span>） / <span class="number">11</span> = <span class="number">22.75</span> ms</span><br></pre></td></tr></table></figure>
<p>解释如下：</p>
<blockquote>
<p>可以把 iostat 想像成 超市付款处，有 11 个顾客排队等待付款，只有一个收银员在服务，每个顾客处理时间为 4.55 ms，第一个顾客不需要等待，第二个顾客需要等待第一个顾客的处理时间，第三个顾客需要等待前面两位的处理时间…以此类推，所有等待时间为 单个 I/O 处理时间 * ( 1 + 2 + 3 + …+ I/O 请求总数 - 1 ).</p>
</blockquote>
<p>计算得到的平均等待时间为 22.75 ms，再加上单个 I/O 处理时间 4.55 ms 得到 27.3 ms:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">22.75</span> + <span class="number">4.55</span> = <span class="number">27.3</span> ms</span><br></pre></td></tr></table></figure>
<p>27.3ms 可以表征 iostat 中的 await 指标，因为 await 包括了等待时间和实际处理时间。但 iostat 的 await 为 62.78 ms，为何会比 iostat 得到的 await 值小这么多？<strong>why?</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="number">27.3</span> <span class="keyword">ms</span> <span class="title">&lt;  62</span>.<span class="number">78</span> ms</span><br></pre></td></tr></table></figure>
<p>再次查看计算方法，步骤和原理都是正确的，但其中唯一不准确的变量就是单个 I/O 的处理时间 svctm！另外就是前提假定了磁盘是顺序处理 I/O 的。</p>
<blockquote>
<p>那么是不是 svctm 不准确呢？或者磁盘并不是顺序处理 I/O 请求的呢？</p>
</blockquote>
<h3 id="丢弃-svctm"><a href="#丢弃-svctm" class="headerlink" title="丢弃 svctm"></a>丢弃 svctm</h3><p>我们一直想要得到的指标是能够衡量磁盘性能的指标，也就是单个 I/O 的 service time。但是 service time 和 iostat 无关，iostat 没有任何一个参数能够提供这方面的信息。人们往往对 iostat 抱有过多的期待！</p>
<blockquote>
<p>Warning! Do not trust this field any more.  This field will be removed in a future sysstat version.</p>
</blockquote>
<p>man 手册中给出了这么一段模凌两可的警告，却没有说明原因。那么原因是什么呢？svctm  又是怎么得到的呢？</p>
<p>iostat 命令来自 <a href="https://github.com/sysstat/sysstat" target="_blank" rel="noopener">sysstat</a> 工具包，翻阅源码可以在 <code>rd_stats.c</code> 找到 svctm 的计算方法，其实 svctm 的计算依赖于其他指标：</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   ***************************************************************************</span></span><br><span class="line"><span class="comment">   * Compute "extended" device statistics (service time, etc.).</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * IN:</span></span><br><span class="line"><span class="comment">   * @sdc     Structure with current device statistics.</span></span><br><span class="line"><span class="comment">   * @sdp     Structure with previous device statistics.</span></span><br><span class="line"><span class="comment">   * @itv     Interval of time in 1/100th of a second.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * OUT:</span></span><br><span class="line"><span class="comment">   * @xds     Structure with extended statistics.</span></span><br><span class="line"><span class="comment">   ***************************************************************************</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  void compute_ext_disk_stats(struct stats_disk *sdc, struct stats_disk *sdp,</span><br><span class="line">               unsigned long long itv, struct ext_disk_stats *xds)</span><br><span class="line">  &#123;</span><br><span class="line">      double tput</span><br><span class="line">          = ((<span class="function"><span class="title">double</span>) (sdc-&gt;</span><span class="function"><span class="title">nr_ios</span> - sdp-&gt;</span>nr_ios)) * <span class="number">100</span> / itv;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="title">xds</span>-&gt;</span><span class="function"><span class="title">util</span>  = S_VALUE(sdp-&gt;</span><span class="function"><span class="title">tot_ticks</span>, sdc-&gt;</span>tot_ticks, itv);</span><br><span class="line">      <span class="function"><span class="title">xds</span>-&gt;</span><span class="function"><span class="title">svctm</span> = tput ? xds-&gt;</span>util / tput : <span class="number">0.0</span>;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * Kernel gives ticks already in milliseconds for all platforms</span></span><br><span class="line"><span class="comment">      * =&gt; no need for further scaling.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="function"><span class="title">xds</span>-&gt;</span><span class="function"><span class="title">await</span> = (sdc-&gt;</span><span class="function"><span class="title">nr_ios</span> - sdp-&gt;</span>nr_ios) ?</span><br><span class="line">          ((<span class="function"><span class="title">sdc</span>-&gt;</span><span class="function"><span class="title">rd_ticks</span> - sdp-&gt;</span><span class="function"><span class="title">rd_ticks</span>) + (sdc-&gt;</span><span class="function"><span class="title">wr_ticks</span> - sdp-&gt;</span>wr_ticks)) /</span><br><span class="line">          ((<span class="function"><span class="title">double</span>) (sdc-&gt;</span><span class="function"><span class="title">nr_ios</span> - sdp-&gt;</span>nr_ios)) : <span class="number">0.0</span>;</span><br><span class="line">      <span class="function"><span class="title">xds</span>-&gt;</span><span class="function"><span class="title">arqsz</span> = (sdc-&gt;</span><span class="function"><span class="title">nr_ios</span> - sdp-&gt;</span>nr_ios) ?</span><br><span class="line">          ((<span class="function"><span class="title">sdc</span>-&gt;</span><span class="function"><span class="title">rd_sect</span> - sdp-&gt;</span><span class="function"><span class="title">rd_sect</span>) + (sdc-&gt;</span><span class="function"><span class="title">wr_sect</span> - sdp-&gt;</span>wr_sect)) /</span><br><span class="line">          ((<span class="function"><span class="title">double</span>) (sdc-&gt;</span><span class="function"><span class="title">nr_ios</span> - sdp-&gt;</span>nr_ios)) : <span class="number">0.0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>其中重点关注：</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">xds</span>-&gt;</span><span class="function"><span class="title">svctm</span> = tput ? xds-&gt;</span>util / tput : <span class="number">0.0</span>;</span><br></pre></td></tr></table></figure>
<p>学过 C 语言的都知道这是一个三元运算符：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">A ? <span class="keyword">B </span>: C</span><br><span class="line">表示如果 A 为真，那么表达式值为 <span class="keyword">B，否则为 </span>C</span><br></pre></td></tr></table></figure>
<p><strong>tput</strong> 可以理解为 IOPS，即当 IOPS 非零时，svctm 等于 util / tput；否则等于 0。</p>
<blockquote>
<p>tput 相当于 IOPS，下文会作解释。</p>
</blockquote>
<p>上面说的 svctm 的计算依赖的值就是 <strong>util</strong>，那么 <strong>man 手册给出的警告应该废弃 svctm 的原因是不是因为 util 的计算不准确呢</strong>？</p>
<h3 id="util-磁盘利用率"><a href="#util-磁盘利用率" class="headerlink" title="util 磁盘利用率"></a>util 磁盘利用率</h3><blockquote>
<p>上面说到应该废弃 svctm 指标，因为它并不能作为衡量磁盘性能的指标，svctm 的计算是不准确的。但从上面的计算公式可以看到，唯一的不确定的变量是 util 的值。</p>
</blockquote>
<p>util 是用来衡量磁盘利用率的指标，那么 util 是怎么计算的呢？还是上面的 <code>compute_ext_disk_stats</code> 函数：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">void compute_ext_disk_stats(<span class="class"><span class="keyword">struct</span> <span class="title">stats_disk</span></span> *sdc, <span class="class"><span class="keyword">struct</span> <span class="title">stats_disk</span></span> *sdp,</span><br><span class="line">               unsigned long long itv, <span class="class"><span class="keyword">struct</span> <span class="title">ext_disk_stats</span></span> *xds)</span><br><span class="line">  &#123;</span><br><span class="line">      double tput</span><br><span class="line">          = ((double) (sdc-&gt;nr_ios - sdp-&gt;nr_ios)) * <span class="number">100</span> / itv;</span><br><span class="line"></span><br><span class="line">      xds-&gt;util  = S_VALUE(sdp-&gt;tot_ticks, sdc-&gt;tot_ticks, itv);</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>进一步阅读源码找到 S_VALUE 的定义：</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">#define S_VALUE(<span class="name">m</span>,n,p)      (((<span class="name">double</span>) ((<span class="name">n</span>) - (<span class="name">m</span>))) / (<span class="name">p</span>) * 100)</span><br></pre></td></tr></table></figure>
<p>且上面的注释可以看到：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">* <span class="variable">@sdc</span>        Structure with current device statistics.</span><br><span class="line">* <span class="variable">@sdp</span>        Structure with previous device statistics.</span><br><span class="line">* <span class="variable">@itv</span>        Interval of time in <span class="number">1</span>/<span class="number">100</span>th of a second.</span><br></pre></td></tr></table></figure>
<p>最终得到 util 的计算方法为：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">util</span> = ( current_tot_ticks - previous_tot_ticks ) /  采样周期 * <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>那么 <code>tot_ticks</code> 是什么呢？这里需要关注 <code>stats_disk</code> 这个结构体，查阅源码在 <code>rd_stats.h</code> 文件中：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* rd_stats.h */</span></span><br><span class="line"><span class="comment">/* Structure for block devices statistics */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stats_disk</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> nr_ios;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>      rd_sect  __attribute__ ((aligned (<span class="number">8</span>)));</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>      wr_sect  __attribute__ ((aligned (<span class="number">8</span>)));</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>       rd_ticks __attribute__ ((aligned (<span class="number">8</span>)));</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>       wr_ticks;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>       tot_ticks;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>       rq_ticks;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>       major;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>       minor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这里看不出具体每个字段是什么意义，源文件也没有作注释，接着看 <code>rd_stats.c</code> 文件是怎么对结构体赋值的，源文件 <code>rd_stats.c</code> 中：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">   <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line"><span class="bullet">   * </span>Read block devices statistics from /proc/diskstats.</span><br><span class="line">   *</span><br><span class="line">*/</span><br><span class="line">  <span class="strong">__nr_t read_diskstats_disk(struct stats_disk *st_disk, __</span>nr<span class="emphasis">_t nr_</span>alloc,int read_part)</span><br><span class="line">  &#123;</span><br><span class="line">  ...</span><br><span class="line"><span class="code">     if ((fp = fopen(DISKSTATS, "r")) == NULL)</span></span><br><span class="line"><span class="code">          return 0;</span></span><br><span class="line"></span><br><span class="line"><span class="code">      while (fgets(line, sizeof(line), fp) != NULL) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="code">          if (sscanf(line, "%u %u %s %lu %*u %lu %u %lu %*u %lu"</span></span><br><span class="line"><span class="code">                 " %u %*u %u %u",</span></span><br><span class="line"><span class="code">                 &amp;major, &amp;minor, dev_name,</span></span><br><span class="line"><span class="code">                 &amp;rd_ios, &amp;rd_sec, &amp;rd_ticks, &amp;wr_ios, &amp;wr_sec, &amp;wr_ticks,</span></span><br><span class="line"><span class="code">                 &amp;tot_ticks, &amp;rq_ticks) == 11) &#123; ... &#125;</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>核心代码如上，具体来讲，iostat 的使用其实是依赖于 <code>/proc/diskstats</code> 文件，读取  <code>/proc/diskstats</code> 值，然后做进一步的分析处理。这里额外介绍下 <code>/proc/diskstats</code> 文件：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost ~]# cat /proc/diskstats</span><br><span class="line">   <span class="number">1</span>       <span class="number">0</span> ram0 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span>       <span class="number">1</span> ram1 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span>       <span class="number">2</span> ram2 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span>       <span class="number">3</span> ram3 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span>       <span class="number">4</span> ram4 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span>       <span class="number">5</span> ram5 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span>       <span class="number">6</span> ram6 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span>       <span class="number">7</span> ram7 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">1</span>       <span class="number">8</span> ram8 <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">   <span class="number">8</span>       <span class="number">0</span> sda <span class="number">82044583</span> <span class="number">3148</span> <span class="number">10966722840</span> <span class="number">222442157</span> <span class="number">24658460</span> <span class="number">2499170</span> <span class="number">2700969385</span> <span class="number">105371088</span> <span class="number">0</span> <span class="number">57897509</span> <span class="number">328196252</span></span><br><span class="line">   <span class="number">8</span>       <span class="number">1</span> sda1 <span class="number">4144</span> <span class="number">0</span> <span class="number">339790</span> <span class="number">2859</span> <span class="number">93359</span> <span class="number">82770</span> <span class="number">4180584</span> <span class="number">671453</span> <span class="number">0</span> <span class="number">534023</span> <span class="number">674311</span></span><br><span class="line">   <span class="number">8</span>       <span class="number">2</span> sda2 <span class="number">487</span> <span class="number">0</span> <span class="number">4114</span> <span class="number">28</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">28</span> <span class="number">28</span></span><br><span class="line">   <span class="number">8</span>       <span class="number">3</span> sda3 <span class="number">8450</span> <span class="number">0</span> <span class="number">206387</span> <span class="number">3489</span> <span class="number">598140</span> <span class="number">1719768</span> <span class="number">413807296</span> <span class="number">6739177</span> <span class="number">0</span> <span class="number">1204240</span> <span class="number">6742537</span></span><br><span class="line">   <span class="number">8</span>       <span class="number">4</span> sda4 <span class="number">82031488</span> <span class="number">3148</span> <span class="number">10966172437</span> <span class="number">222435779</span> <span class="number">23966958</span> <span class="number">696632</span> <span class="number">2282981505</span> <span class="number">97960444</span> <span class="number">0</span> <span class="number">57538914</span> <span class="number">321035535</span></span><br><span class="line">   <span class="number">8</span>      <span class="number">16</span> sdb <span class="number">6696805</span> <span class="number">672</span> <span class="number">1028622736</span> <span class="number">99268437</span> <span class="number">3479149</span> <span class="number">1095853</span> <span class="number">385460280</span> <span class="number">4357778</span> <span class="number">0</span> <span class="number">80933531</span> <span class="number">103624000</span></span><br><span class="line">   <span class="number">8</span>      <span class="number">32</span> sdc <span class="number">6535697</span> <span class="number">706</span> <span class="number">1003357408</span> <span class="number">101660311</span> <span class="number">3409287</span> <span class="number">1048913</span> <span class="number">370227528</span> <span class="number">4329287</span> <span class="number">0</span> <span class="number">82570947</span> <span class="number">105987603</span></span><br><span class="line">   <span class="number">8</span>      <span class="number">48</span> sdd <span class="number">6555170</span> <span class="number">652</span> <span class="number">1005848496</span> <span class="number">98046714</span> <span class="number">3392381</span> <span class="number">1044610</span> <span class="number">369149464</span> <span class="number">4407316</span> <span class="number">0</span> <span class="number">80348361</span> <span class="number">102451899</span></span><br><span class="line">   <span class="number">8</span>      <span class="number">64</span> sde <span class="number">6532011</span> <span class="number">671</span> <span class="number">1002703024</span> <span class="number">134576408</span> <span class="number">3406505</span> <span class="number">1054721</span> <span class="number">372497720</span> <span class="number">5792380</span> <span class="number">0</span> <span class="number">103162428</span> <span class="number">140366630</span></span><br></pre></td></tr></table></figure>
<p>每个字段的意义解释如下：</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">The /<span class="keyword">proc</span>/diskstats<span class="title"> file</span> displays<span class="title"> the</span> I/O<span class="title"> statistics</span></span><br><span class="line"><span class="title"></span> <span class="title"> of</span> block<span class="title"> devices.</span> Each<span class="title"> line</span> contains<span class="title"> the</span> following 14</span><br><span class="line"><span class="title">  fields:</span></span><br><span class="line"><span class="title"></span>   1 -<span class="title"> major</span> number</span><br><span class="line">   2 -<span class="title"> minor</span> mumber</span><br><span class="line">   3 -<span class="title"> device</span> name</span><br><span class="line">   4 -<span class="title"> reads</span> completed<span class="title"> successfully</span></span><br><span class="line"><span class="title"></span>   5 -<span class="title"> reads</span> merged</span><br><span class="line">   6 -<span class="title"> sectors</span> read</span><br><span class="line">   7 -<span class="title"> time</span> spent<span class="title"> reading</span> (ms)</span><br><span class="line">   8 -<span class="title"> writes</span> completed</span><br><span class="line">   9 -<span class="title"> writes</span> merged</span><br><span class="line">  10 -<span class="title"> sectors</span> written</span><br><span class="line">  11 -<span class="title"> time</span> spent<span class="title"> writing</span> (ms)</span><br><span class="line">  12 -<span class="title"> I/Os</span> currently<span class="title"> in</span> progress</span><br><span class="line">  13 -<span class="title"> time</span> spent<span class="title"> doing</span> I/Os (ms)</span><br><span class="line">  14 -<span class="title"> weighted</span> time<span class="title"> spent</span> doing<span class="title"> I/Os</span> (ms)</span><br></pre></td></tr></table></figure>
<p>这里英文的解释可能没有很明白很清楚，尤其是第 7 、11、13 个字段的解释，我们再用中文解释一下：</p>
<table>
<thead>
<tr>
<th>域</th>
<th>Value</th>
<th>Quoted</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>F1</td>
<td>8</td>
<td>major number</td>
<td>此块设备的主设备号</td>
</tr>
<tr>
<td>F2</td>
<td>0</td>
<td>minor mumber</td>
<td>此块设备的次设备号</td>
</tr>
<tr>
<td>F3</td>
<td>sda</td>
<td>device  name</td>
<td>此块设备名字</td>
</tr>
<tr>
<td>F4</td>
<td>8567</td>
<td>reads completed successfully</td>
<td>成功完成的读请求次数</td>
</tr>
<tr>
<td>F5</td>
<td>1560</td>
<td>reads merged</td>
<td>读请求的次数</td>
</tr>
<tr>
<td>F6</td>
<td>140762</td>
<td>sectors read</td>
<td>读请求的扇区数总和</td>
</tr>
<tr>
<td>F7</td>
<td>3460</td>
<td>time spent reading (ms)</td>
<td>读请求花费的时间总和</td>
</tr>
<tr>
<td>F8</td>
<td>0</td>
<td>writes completed</td>
<td>成功完成的写请求次数</td>
</tr>
<tr>
<td>F9</td>
<td>0</td>
<td>writes merged</td>
<td>写请求合并的次数</td>
</tr>
<tr>
<td>F10</td>
<td>0</td>
<td>sectors written</td>
<td>写请求的扇区数总和</td>
</tr>
<tr>
<td>F11</td>
<td>0</td>
<td>time spent writing (ms)</td>
<td>写请求花费的时间总和</td>
</tr>
<tr>
<td>F12</td>
<td>0</td>
<td>I/Os currently in progress</td>
<td>次块设备队列中的IO请求数</td>
</tr>
<tr>
<td>F13</td>
<td>2090</td>
<td>time spent doing I/Os (ms)</td>
<td>块设备队列非空时间总和</td>
</tr>
<tr>
<td>F14</td>
<td>3440</td>
<td>weighted time spent doing I/Os (ms)</td>
<td>块设备队列非空时间加权总和</td>
</tr>
</tbody></table>
<p>这里需要特别对第 7、11、13 个字段做一点解释，<strong>第 7 个字段表示所有读请求的花费时间总和，这里把每个读 I/O 请求都计算在内；同理是第 11 个字段；那么为什么还有第 13 个字段呢？第 13 个字段不关心有多少 I/O 在处理，它只关心设备是否在做 I/O 操作，所以真实情况是第 7 个字段加上第 11 个字段的值会比第 13 个字段的值更大一点</strong>。</p>
<p>回到 <code>rd_stats.c</code> 源码中，<code>stats_disk</code> 结构体是如何赋值的呢？</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">while</span> (fgets(line, sizeof(line), fp) != NULL) </span><br><span class="line">...</span><br><span class="line">sscanf(line, <span class="string">"%u %u %s %lu %*u %lu %u %lu %*u %lu"</span></span><br><span class="line">                 <span class="string">" %u %*u %u %u"</span>,</span><br><span class="line">                 &amp;major, &amp;minor, dev_name,</span><br><span class="line">                 &amp;rd_ios, &amp;rd_sec, &amp;rd_ticks, &amp;wr_ios, &amp;wr_sec, &amp;wr_ticks,</span><br><span class="line">                 &amp;tot_ticks, &amp;rq_ticks) == <span class="number">11</span>)</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p>使用 fgets 函数获得 <code>/proc/diskstats</code> 文件中的一行数据，然后使用 sscanf 函数格式化字符串到结构体 <code>stats_disk</code> 的不同成员变量中。仔细看代码，格式符号有 14 个，但接收字符串的变量只有 11 个，这里要注意的是 sscanf 的使用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sscanf</span> 中 * 表示读入的数据将被舍弃。带有*的格式指令不对应可变参数列表中的任何数据。</span><br></pre></td></tr></table></figure>
<p>这么一来，我们要寻找的 <code>tot_ticks</code> 就是第 13 个字段，也就是表示：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">13 </span>- time spent doing I/Os (ms)，即 花费在 I/O 上的时间</span><br></pre></td></tr></table></figure>
<p>我们再回到 util 的计算：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">util</span> = ( current_tot_ticks - previous_tot_ticks ) /  采样周期 * <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>util 的计算方法是： <strong>统计一个周期内磁盘有多少自然时间(ms) 是用来做 I/O 的，得出百分比，代表磁盘利用率</strong>。</p>
<p><em>上文对于 svctm 的计算提到 tput 这个变量代表 IOPS，这里额外做一点解释</em>：</p>
<figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*rd_stats.c 中 read_diskstats_disk 函数内 */</span></span><br><span class="line"><span class="comment">/* 读 I/O + 写 I/O 数量 */</span></span><br><span class="line">st_disk_i-&gt;nr_ios  = (unsigned <span class="keyword">long</span> <span class="keyword">long</span>) rd_ios + (unsigned <span class="keyword">long</span> <span class="keyword">long</span>) wr_ios;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* rd_stats.c 中 compute_ext_disk_stats 函数内 */</span></span><br><span class="line"><span class="comment">/* 当前读写 I/O 数量 - 上一次采样时的读写 I/O 数量 */</span></span><br><span class="line"><span class="keyword">double</span> tput = ((<span class="keyword">double</span>) (sdc-&gt;nr_ios - sdp-&gt;nr_ios)) * <span class="number">100</span> / itv;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>经过对 <code>/proc/diskstats</code> 各个字段的分析，不难得出，<code>stats_disk</code> 结构体中的成员变量 <code>nr_ios</code> 代表读写 I/O 成功完成的数量，也就是 IOPS。</p>
<p>再回过来，那么 util 的计算是准确的吗？<code>tot_ticks</code> 的计算是准确的吗？</p>
<p>经过上面的分析，<code>tot_ticks</code> 其实表示的是 <code>/proc/diskstats</code> 文件中第 13 个字段，表示磁盘处理 I/O 操作的自然时间，不考虑并行性。那么由此得到的 util 就失去了最原本的意义。</p>
<p>举个简单的例子，假设磁盘处理单个 I/O 的能力为 0.01ms，依次有 200 个请求提交，需要 2s 处理完所有的请求，如果采样周期为 1s，在 1s 的采样周期里 util 就达到了 100%；但是如果这 200 个请求分批次的并发提交，比如每次并发提交 2 个请求，即每次同时过来 2 个请求，那么需要 1s 即可完成所有请求，采样周期为 1s，util 也是 100%。</p>
<p>两种场景下 util 均是 100%，那一种磁盘压力更大？当然是第二种，但仅仅通过 util 并不能得出这个结论。</p>
<p>再回到 svctm 的计算：</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">double</span> tput  = ((double) (sdc-&gt;</span><span class="function"><span class="title">nr_ios</span> - sdp-&gt;</span>nr_ios)) * <span class="number">100</span> / itv;</span><br><span class="line"><span class="function"><span class="title">xds</span>-&gt;</span><span class="function"><span class="title">util</span>  = S_VALUE(sdp-&gt;</span><span class="function"><span class="title">tot_ticks</span>, sdc-&gt;</span>tot_ticks, itv);</span><br><span class="line"><span class="function"><span class="title">xds</span>-&gt;</span><span class="function"><span class="title">svctm</span> = tput ? xds-&gt;</span>util / tput : <span class="number">0.0</span>;</span><br></pre></td></tr></table></figure>
<p>转换上述两个式子可以得到：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">svctm = ( current_tot_ticks - previous_tot_ticks ) <span class="regexp">/ (current_ios - previous_ios ) = 采样周期内设备进行 I/</span>O 的自然时间  <span class="regexp">/  采样周期内读写 I/</span>O 次数</span><br></pre></td></tr></table></figure>

<p>故通过此表达式计算得到的 svctm 其实并不能准确衡量单个 I/O 的处理能力。如果磁盘没有并行处理的能力，那么采样周期内读写 I/O 次数必然减少，相应的，svctm 的计算就会偏大。</p>
<p>那回到开头提出的疑问，假定顺序请求情况下得到的平均等待时间 27.3ms 小于 iostat 看到的 await 62.78ms:</p>
<pre><code>27.3 ms &lt;  62.78 ms</code></pre><p>现在可以解释了：<strong>27.3 ms 的计算其实使用了偏小的 svctm 值，故得到的平均等待时间较 62.78ms 小很多</strong>。</p>
<h2 id="iostat-辩证看待"><a href="#iostat-辩证看待" class="headerlink" title="iostat 辩证看待"></a>iostat 辩证看待</h2><p>分析到这里，原理已经很明白了，<strong>util 并不能衡量磁盘的利用率，svctm 的值失去了意义。期望通过这两个指标获得一个磁盘性能的衡量恐怕不行了！</strong></p>
<p>但平常的分析，我们可以参考 iostat 的输出，再结合其他的一些工具，进行多方面多方位的性能分析，才能得到比较接近真理的结论！</p>
<h1 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h1><p>上文分析了 iostat 容易引起误解的几个指标，在使用 iostat 时我们需要辩证的看待 iostat 的结果。</p>
<p>但我们往往更希望获得一个能够衡量磁盘性能的指标，iostat 可能帮不上太多忙了，这时可能需要借助其他的工具了，比如 blktrace 这个工具，这才是分析 I/O 的利器！</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://bean-li.github.io/dive-into-iostat/" target="_blank" rel="noopener">深入理解iostat</a></li>
<li><a href="http://linuxperf.com/?p=156" target="_blank" rel="noopener">容易被误读的IOSTAT</a></li>
<li><a href="http://ykrocku.github.io/blog/2014/04/11/diskstats/" target="_blank" rel="noopener">深入分析diskstats</a></li>
<li><a href="https://www.cnblogs.com/zk47/p/4733143.html" target="_blank" rel="noopener">[Linux 运维 – 存储] /proc/diskstats详解</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>磁盘</category>
      </categories>
      <tags>
        <tag>iostat</tag>
        <tag>diskstats</tag>
        <tag>sysstat</tag>
        <tag>blktrace</tag>
      </tags>
  </entry>
  <entry>
    <title>微信跳一跳高分辅助踩坑</title>
    <url>/2018/01/08/wechat_jump_hack/</url>
    <content><![CDATA[<h1 id="最近挺火的微信跳一跳"><a href="#最近挺火的微信跳一跳" class="headerlink" title="最近挺火的微信跳一跳"></a>最近挺火的微信跳一跳</h1><p>最近新版微信的『跳一跳』小程序着实火了一把，也把小程序这个概念再次推波助澜了一波，看来以后小程序这个入口会有大作为。</p>
<blockquote>
<p>张小龙：一个好的 APP 应该是用完即走的。</p>
</blockquote>
<p>这句话对用户来说是个好消息，对其他创业者来说却可能会招来恶语相向。现在这个时代的步伐越来越快，大家好像都很忙，时间越来越珍贵。如果以后微信真的把小程序这个入口做好了，我觉得对于用户来说，是件好事，当然前提是做好了，比如安全性啥的，比如不会被外挂啥的！</p>
<p>现在中午，吃完饭没事大家都会高呼 “来一波！来一波！”，就是微信小游戏『坦克大战』，3V3 玩得不亦乐乎！</p>
<p>废话不多说，看着别人微信跳一跳几百分那么高的分，感觉坐不住了，为了装逼，所以有了这篇博文！</p>
<blockquote>
<p>林夕水共是我，这是目前能让好友看到的最高分</p>
</blockquote>
<p><img src="/images/bi.png" alt=""></p>
<a id="more"></a>

<h1 id="踩完所有坑写的一个简单的说明"><a href="#踩完所有坑写的一个简单的说明" class="headerlink" title="踩完所有坑写的一个简单的说明"></a>踩完所有坑写的一个简单的说明</h1><h2 id="说明一"><a href="#说明一" class="headerlink" title="说明一"></a>说明一</h2><blockquote>
<p>说明：本人的原始目的虽然是为了装逼，但其实是本着一起探讨技术、一起学习、一起 hack 的心态来折腾这些的。所以<strong>对于某些人在某宝上花钱买外挂来刷分的行为表示不齿，不要为了装逼而装逼！</strong></p>
</blockquote>
<p>其实刚开始知道有外挂刷分的时候，并且朋友圈也有转了好几篇关于微信跳一跳可以辅助刷分的文章时，我当时的表情就是，”哦，高分原来是这样”，然后一脸不屑，你是否也跟我一样的表情当时？<br><img src="/images/wechatsoso.png" alt=""></p>
<p>可是，如果是你去做，哪怕按部就班的来做，你能做好吗？</p>
<p>这就是 “眼高手低”，其实很多时候，你看到的和你做过的是两回事。前几天翻出罗振宇2016年跨年演讲，他讲到他想做『得到』APP 的初衷就是希望做一个翰林院，可以把好的东西告诉身为皇帝的我们，因为我们不知道什么好什么不好，我们好多时候需要的是粗暴的对待，需要你直接告诉我结果，哪些是好的不就完了吗？这种有别于类似微博、今日头条这种根据你的口味来推荐的 “母爱算法”，也就是 “父爱算法”。</p>
<p>话没错，我也同意，但忽略了一个东西，每个人的接受能力不同，而且知识这种东西往往不是结果，更多的是过程，过程中获得的东西可能比结果更有价值和意义。用到这里，你看到了那么多篇揭秘跳一跳外挂的文章，你就懂了吗？你就可以不屑一顾了吗？</p>
<p>你以为不过如此，其实中间的波折可能把你弄成一个傻逼！所谓：</p>
<blockquote>
<p><strong>绝知此事要躬行</strong></p>
</blockquote>
<h2 id="说明二"><a href="#说明二" class="headerlink" title="说明二"></a>说明二</h2><ul>
<li>我的技能：C++、Python等</li>
<li>我的设备：Mac Pro &amp;&amp; iPhone 7Plus</li>
</ul>
<p>写这篇博文之前没有接触过安卓、IOS 开发，所以 Debug 移动设备上的程序（游戏、APP）,相对来说会感觉困难一点。所以折腾这个跳一跳，真的还是挺折腾的！</p>
<h1 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h1><p>过程中可能会有很多问题，当时也没来得及做记录，所以仅记录一些能想起来的问题吧！</p>
<h2 id="安装-WDA"><a href="#安装-WDA" class="headerlink" title="安装 WDA"></a>安装 WDA</h2><p>首先，可以先大概看一下<a href="https://zhuanlan.zhihu.com/p/32452473" target="_blank" rel="noopener">教你用 Python 来玩微信跳一跳
</a>这篇文章，作者（@神器的战士）很厉害，他已经把跳一跳辅助 <a href="https://github.com/wangshub/wechat_jump_game" target="_blank" rel="noopener">wechat_jump_game</a> 传到 github 上了，话不多说，按照 Wiki 里的步骤开干。</p>
<p>由于我的设备是 MacOs + iPhone ，故第一步是得安装一个 <a href="https://github.com/facebook/WebDriverAgent" target="_blank" rel="noopener">WebDriverAgent</a>，这个东西我简单理解就是一个 WebServer 驱动，可以远程控制 IOS 设备。类似于安卓里的 ADB 工具。可以参考这篇文章：<a href="https://testerhome.com/topics/7220" target="_blank" rel="noopener">iOS 真机如何安装 WebDriverAgent</a>。</p>
<p>照着操作，没毛病！当然前提是你得安装好了 xcode，没有的话直接在 AppStore 里搜索 xcode 就行。然后后面就是一路的坑。</p>
<ul>
<li>什么是证书？</li>
<li>什么是苹果开发者账号？</li>
<li>有没有免费的苹果开发者账号？</li>
<li>账号和证书啥关系？</li>
<li>免费的证书和收费的证书一样吗？</li>
<li>…</li>
</ul>
<p>由于是 IOS 开发小白，这些概念都不懂，所以走了很多弯路，因为照着 <a href="https://testerhome.com/topics/7220" target="_blank" rel="noopener">iOS 真机如何安装 WebDriverAgent</a> 这篇文章中的步骤操作，预料之中没有那么容易就成功。后来有网友说其实不用开发者账号，有个证书就行，某宝上买一个就行，然后就去某宝上搜索了半天，完全不懂，最后花 19 元买了一个证书，如下图：<br><img src="/images/taobao.png" alt=""></p>
<p>怀着忐忑的心，导入项目中，测试，然后果然也没通过！当然这里反复试了很多次，Google 了很多次，试过了很多能搜到的办法，依然没通过！看来是必须花 99$ 去买一个个人开发者账号了，不然这次装不了这个逼了，心中有点凉了半截了！因为我不想花几百块钱就为了装一次逼！</p>
<p>然后依然是 Google，偶然发现说 “其实真机调试不必花钱买个人开发者账号的，现在 xcode 已经很开放了，可以使用个人的账号（也就是你的 AppleID）升级为免费开发者账号”。没说的，低头就是干！</p>
<p>我使用了用来登录手机的 AppleID 做签名，然后依然是不通过，这里就不放图了。你得自己去亲自操作，自己去踩坑。到这里，心凉的差不多了！离我装逼的目标越来越远了！</p>
<p>感谢伟大的 Google，让我看到了这篇文章 <a href="http://www.applicationloader.net/blog/zh/1073.html" target="_blank" rel="noopener">【新功能】免99美金开发者账号真机调试测试教程</a>，有啥说的呢？跟着干啊！</p>
<p>这里强烈建议<strong>重新申请一个 AppleID，单独用来做这个操作，因为后面需要用到 AppleID 的密码，为了安全，不要使用用来登录手机的那个 AppleID</strong>。我就傻逼的用了自己登录手机的 AppleID，后来要用这个 AppleID 登录软件，执行一些操作，才发现这样不安全，所以赶紧重新申请了个新的 AppleID，然后重新更改了原来 AppleID 的密码。囧！</p>
<p>这里要注意，只需要两个文件就行了，不用跟着做到最后。</p>
<ul>
<li>申请ios测试证书（p12）</li>
<li>申请ios描述文件（mobileprovision）</li>
</ul>
<p><img src="/images/p12.png" alt=""><br><img src="/images/mobile.png" alt=""><br><img src="/images/p12mobile.png" alt=""></p>
<p>到这里，可以很开心继续之前的操作了，拿到项目中，导入进行证书签名，然后又他么失败了，GG!!</p>
<p>好吧，最后试了一下，需要更改 WebDriverAgentRunner Bundle Identifiler，随便加个后缀，比如我加了 “.s6”:<br><img src="/images/s6.png" alt=""></p>
<p>WebDriverAgentLib 的 Bundle Identifiler不用更改。</p>
<p>所以最终的 xocde 中关键地方有以下几处：</p>
<p><img src="/images/corea.png" alt=""><br><img src="/images/core2.png" alt=""></p>
<p>然后插上数据线，开始编译测试。这里可能会碰到很多问题，不过别着急，慢慢来，一个个解决。</p>
<p>碰到的问题现在回过头来已经没办法复现了，所以只能说，别着急，按照步骤来，碰到问题多 Google，反正最终编译安装成功后是这个样子的：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">01.343909</span>+<span class="number">0800</span> WebDriverAgentRunner-Runner[<span class="number">858</span>:<span class="number">330642</span>] +[CATransaction synchronize] called within transaction</span><br><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">01.367036</span>+<span class="number">0800</span> WebDriverAgentRunner-Runner[<span class="number">858</span>:<span class="number">330642</span>] Running tests...</span><br><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">02.340279</span>+<span class="number">0800</span> WebDriverAgentRunner-Runner[<span class="number">858</span>:<span class="number">330642</span>] Continuing to run tests <span class="keyword">in</span> the background with task ID <span class="number">1</span></span><br><span class="line">Test Suite <span class="string">'All tests'</span> started at <span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">03.064</span></span><br><span class="line">Test Suite <span class="string">'WebDriverAgentRunner.xctest'</span> started at <span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">03.065</span></span><br><span class="line">Test Suite <span class="string">'UITestingUITests'</span> started at <span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">03.066</span></span><br><span class="line">Test Case <span class="string">'-[UITestingUITests testRunner]'</span> started.</span><br><span class="line">    t =     <span class="number">0.00</span>s Start Test at <span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">03.067</span></span><br><span class="line">    t =     <span class="number">0.00</span>s Set Up</span><br><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">03.098235</span>+<span class="number">0800</span> WebDriverAgentRunner-Runner[<span class="number">858</span>:<span class="number">330642</span>] Built at Jan  <span class="number">8</span> <span class="number">2018</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">55</span></span><br><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">57</span>:<span class="number">03.131709</span>+<span class="number">0800</span> WebDriverAgentRunner-Runner[<span class="number">858</span>:<span class="number">330642</span>] ServerURLHere-&gt;http:<span class="comment">//192.168.0.101:8100&lt;-ServerURLHere</span></span><br></pre></td></tr></table></figure>
<p>这是通过如下操作看到的：<br><img src="/images/console.png" alt=""></p>
<p>其中比较关键的控制台日志是：</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">S<span class="function"><span class="title">erverURLHere</span>-&gt;</span>http:<span class="comment">//192.168.0.101:8100&lt;-ServerURLHere</span></span><br></pre></td></tr></table></figure>

<p>192.168.0.101 就是 iPhone 设备的 ip 地址了。另外，手机上会有一个 WebDriverAgent App安装上。<br><img src="/images/iphoneweb.png" alt=""></p>
<p>到这里基本可以证明 WebDriverAgent 安装成功了。为了进一步验证，可以参考<a href="https://testerhome.com/topics/7220" target="_blank" rel="noopener">iOS 真机如何安装 WebDriverAgent</a>中关于端口转发一节。其中:</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>imobiledevice</span><br></pre></td></tr></table></figure>
<p>可能会出现下面的问题：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"># brew install imobiledevice</span><br><span class="line"><span class="keyword">Error: </span>No available formula with the name "imobiledevice"</span><br><span class="line">==&gt; Searching for a previously deleted formula (in the last month)...</span><br><span class="line"><span class="keyword">Error: </span>No previously deleted formula found.</span><br><span class="line">==&gt; Searching for similarly named formulae...</span><br><span class="line">==&gt; Searching local taps...</span><br><span class="line">This similarly named formula was found:</span><br><span class="line">libimobiledevice ✔</span><br><span class="line">To install it, run:</span><br><span class="line">  brew install libimobiledevice ✔</span><br><span class="line">==&gt; Searching taps...</span><br><span class="line">==&gt; Searching taps on GitHub...</span><br><span class="line"><span class="keyword">Error: </span>No formulae found in taps.</span><br></pre></td></tr></table></figure>

<p>按照提示来：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>libimobiledevice</span><br></pre></td></tr></table></figure>
<p>成功后，执行命令：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">iproxy <span class="number">8100</span> <span class="number">8100</span></span><br></pre></td></tr></table></figure>
<p>然后访问：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//localhost:8100/status</span></span><br></pre></td></tr></table></figure>
<p>如果看到类似下面的 json 输出说明 WDA 运行成功了：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"value"</span> : &#123;</span><br><span class="line">    <span class="attr">"state"</span> : <span class="string">"success"</span>,</span><br><span class="line">    <span class="attr">"os"</span> : &#123;</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"iOS"</span>,</span><br><span class="line">      <span class="attr">"version"</span> : <span class="string">"11.2.1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"ios"</span> : &#123;</span><br><span class="line">      <span class="attr">"simulatorVersion"</span> : <span class="string">"11.2.1"</span>,</span><br><span class="line">      <span class="attr">"ip"</span> : <span class="string">"192.168.0.101"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"build"</span> : &#123;</span><br><span class="line">      <span class="attr">"time"</span> : <span class="string">"Jan  8 2018 17:00:58"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sessionId"</span> : <span class="string">"7E3A6F32-F529-4C42-9C65-3EF92FD993C6"</span>,</span><br><span class="line">  <span class="attr">"status"</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>几番波折，终于安装好了 WDA，这过程中就可能碰到很多问题，就有可能让你放弃！好在我运气还不错，走到了这里，但这离装逼还很远！</p>
<h2 id="跳一跳辅助上场"><a href="#跳一跳辅助上场" class="headerlink" title="跳一跳辅助上场"></a>跳一跳辅助上场</h2><p>真机安装 WDA 可谓一波三折，好在现在终于可以玩游戏了。</p>
<p>废话不多说，当然首先下载 <a href="https://github.com/wangshub/wechat_jump_game" target="_blank" rel="noopener">wechat_jump_game</a>：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/wangshub/wechat_jump_game </span><br><span class="line">cd wechat_jump_game</span><br></pre></td></tr></table></figure>
<p>这里推荐用虚拟环境（Virtualenv &amp;&amp; python3 ）来管理，不然你会碰到很多问题：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">virtualenv venv</span><br><span class="line"><span class="keyword">source</span> venv<span class="regexp">/bin/</span>active</span><br></pre></td></tr></table></figure>
<p>然后执行：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>如果这一步碰到了安装问题，解决就好。</p>
<p><strong>接下来，就是见证奇迹的时刻：</strong></p>
<p>确保以下事情：</p>
<ul>
<li>WDA 运行成功</li>
<li>启动 iproxy 8100 8100 命令</li>
<li>手机页面到微信跳一跳开始界面<br>然后运行（当然前提还是跟着项目 <a href="https://github.com/wangshub/wechat_jump_game/wiki/Android-%E5%92%8C-iOS-%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4" target="_blank" rel="noopener">Wiki</a> 去做）：</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python3</span> wechat_jump_auto_iOS.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>

<p>你会很开心的！！！</p>
<p><strong>这里要注意的事情：</strong></p>
<ul>
<li>config.json 中参数 “press_coefficient” 设置成 1.32 跳一跳精确度较高（only for iPhone 7Plus）</li>
<li>可以先跑一下手动版的，再上自动版的</li>
</ul>
<blockquote>
<p>这里有个动图可以看一下</p>
</blockquote>
<p><img src="http://o8fj2jbwb.bkt.clouddn.com/wechat.gif" alt=""><br><img src="/images/bi2.png" alt=""></p>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>轻轻松松跑到900多分后，高兴后，想向我女朋友装个逼，结果一问，她说你是 81 分啊，我一脸懵逼，然后跑到 github 上才看到，原来大家早就在讨论了，有可能被腾讯反作弊了，或者分数异常没有提交成功。好吧，后来试了一些办法，目前能成功保存到排行榜上的分数是 659 分。</p>
<p>总的来说，为了成功装逼，需要程序做的一件事就是尽量模拟真人，具体来说：</p>
<ul>
<li>WDA 工具按压屏幕的点不要固定，尽量有个随机偏移</li>
</ul>
<p>具体来说是修改 jump 函数：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">s.tap_hold(random.uniform(<span class="number">100</span>, <span class="number">400</span>), random.uniform(<span class="number">100</span>, <span class="number">400</span>), press_time)</span><br></pre></td></tr></table></figure>
<ul>
<li>每跳一次延时一段时间，不要固定，尽量有随机偏移</li>
</ul>
<p>具体来说，main 函数 while 循环中：</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="built_in">random</span>.<span class="built_in">uniform</span>(<span class="number">1</span>, <span class="number">2.2</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>不要连续跳，可以跳记下，停一段时间再跳</li>
</ul>
<p>具体可以参考 wechat_jump_auto.py 这个脚本，这个脚本是对于 Android 设备的。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">def main():</span><br><span class="line">    i, next_rest, next_rest_time = (<span class="number">0</span>, random.randrange(<span class="number">3</span>, <span class="number">10</span>),</span><br><span class="line">                                    random.randrange(<span class="number">5</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        pull_screenshot()</span><br><span class="line">        <span class="keyword">im</span> = Image.<span class="keyword">open</span>(<span class="string">"/images/1.png"</span>)</span><br><span class="line"></span><br><span class="line">        # 获取棋子和 board 的位置</span><br><span class="line">        piece_x, piece_y, board_x, board_y = find_piece_and_board(<span class="keyword">im</span>)</span><br><span class="line">        <span class="keyword">ts</span> = <span class="keyword">int</span>(time.time())</span><br><span class="line">        <span class="keyword">print</span>(<span class="keyword">ts</span>, piece_x, piece_y, board_x, board_y)</span><br><span class="line">        <span class="keyword">if</span> piece_x == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        set_button_position(<span class="keyword">im</span>)</span><br><span class="line">        distance = math.<span class="built_in">sqrt</span>(</span><br><span class="line">            (board_x - piece_x) ** <span class="number">2</span> + (board_y - piece_y) ** <span class="number">2</span>)</span><br><span class="line">        jump(distance)</span><br><span class="line"></span><br><span class="line">        save_debug_creenshot(<span class="keyword">ts</span>, <span class="keyword">im</span>, piece_x, piece_y, board_x, board_y)</span><br><span class="line">        backup_screenshot(<span class="keyword">ts</span>)</span><br><span class="line">        <span class="keyword">im</span>.<span class="keyword">close</span>()</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        #这里设置跳几下停几秒，防止 ban</span><br><span class="line">        <span class="keyword">if</span> i == next_res<span class="variable">t:</span></span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'已经连续打了 &#123;&#125; 下，休息 &#123;&#125;s'</span>.format(i, next_rest_time))</span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(next_rest_time):</span><br><span class="line">                <span class="keyword">print</span>(<span class="string">"程序将在 &#123;&#125;s 后继续"</span>.format(next_rest_time - <span class="keyword">j</span>))</span><br><span class="line">                time.<span class="keyword">sleep</span>(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'\n继续'</span>)</span><br><span class="line">            i, next_rest, next_rest_time = (<span class="number">0</span>, random.randrange(<span class="number">10</span>, <span class="number">30</span>),</span><br><span class="line">                                            random.randrange(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">'下一次连续跳 &#123;&#125; 休息，下一次将休息 &#123;&#125;s'</span>.format(next_rest, next_rest_time))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # 为了保证截图的时候应落稳了，多延迟一会儿，随机值防 ban</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"\n"</span>)</span><br><span class="line">        time.<span class="keyword">sleep</span>(random.uniform(<span class="number">1</span>, <span class="number">2.2</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>最好不要超过 1000 分，适可而止，逼装成功就行了</li>
<li>跑到一段时间，小人总会掉落，而且两个棋盘越近，跳跃精确度越低，算法可以再改进</li>
<li>…</li>
</ul>
<h1 id="装逼的意义思考"><a href="#装逼的意义思考" class="headerlink" title="装逼的意义思考"></a>装逼的意义思考</h1><p>逼应该是装成功了，还是挺开心的呢！</p>
<p>我觉得某件事有个点能吸引到你，让你投入其中做一些探索、研究，这是一件很好的事情。因为毕竟是因为有趣吸引了你啊，事情就是因为让你感到有趣，才让你有了动力！</p>
<p>另外，回顾整个过程，其实也不难，甚至很简单，但简单的事情不是每个人都可以做到！告诫自己，不要眼高手低，很多事没有想像中那么让你不屑一顾！</p>
<p>这让我又想起了开头提到的老罗的话，确实，知识这个东西，更多的是过程中你的收获和体验，那些才是你珍贵的财富！</p>
<p>说到这，我想起了一个问题，怎样来定义一个人？比如你自己，假如哪天你突然失忆了，忘记了以前发生过的所有事情。那么对于你身边的人来说，你还是你吗？</p>
<p>这个答案估计很不一样，我觉得是：<strong>你已经不是你了</strong>，那些称之为 “你” 的符号、烙印早已消失，那是时间的雕刻啊！每个时间点上时间对你的雕刻，那些才构成了一个个你，如果抹掉所有这些雕刻，你早已不是你了。</p>
<p>可见，过程显得多么重要！</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>继续刷分，目前能让好友能看到的最高分是 659，看能不能接近 1000 分！</p>
<p>洗洗睡吧，现在都凌晨 02:20 了！<strong>逼不停，探索不停！</strong></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://zhuanlan.zhihu.com/p/32452473" target="_blank" rel="noopener">教你用 Python 来玩微信跳一跳
</a></li>
<li><a href="https://github.com/wangshub/wechat_jump_game" target="_blank" rel="noopener">wechat_jump_game</a></li>
<li><a href="https://testerhome.com/topics/7220" target="_blank" rel="noopener">iOS 真机如何安装 WebDriverAgent</a></li>
<li><a href="http://www.applicationloader.net/blog/zh/1073.html" target="_blank" rel="noopener">新功能】免99美金开发者账号真机调试测试教程</a></li>
<li><a href="https://juejin.im/entry/5a4edc57518825732e2f18da" target="_blank" rel="noopener">微信跳一跳-最新可用技(zuo)巧(bi)！</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>python</category>
        <category>ios</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>matplotlib</tag>
        <tag>wechat</tag>
        <tag>ios</tag>
        <tag>wda</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>体验Remix——安卓电脑</title>
    <url>/2016/06/11/%E4%BD%93%E9%AA%8CRemix%E2%80%94%E2%80%94%E5%AE%89%E5%8D%93%E7%94%B5%E8%84%91/</url>
    <content><![CDATA[<h1 id="第一次听说Android-X86"><a href="#第一次听说Android-X86" class="headerlink" title="第一次听说Android-X86"></a>第一次听说Android-X86</h1><p>以前玩唱吧的时候接触过PC上的安卓模拟器，不过这个只是一个软件，效果毕竟不好，想要把电脑变成安卓手机，还差远了。</p>
<p>然后，前段时间一直纠结要不要换个手机，我现在的华为小6已经跟我差不多3年时间了，虽然中间换了好几次系统，但是感觉依然不太流畅了，可能毕竟硬件条件限制。但是又用不起苹果啊，遂想电脑能不能变成安卓手机呢？果然，首先发现了<a href="https://sourceforge.net/projects/android-x86/" target="_blank" rel="noopener">android-x86 download | SourceForge.net</a>,后来又发现了<a href="http://cn.jide.com/remixos-for-pc" target="_blank" rel="noopener">Remix OS PC版</a>，还有其他的。</p>
<h1 id="Vmware-安装android-X86"><a href="#Vmware-安装android-X86" class="headerlink" title="Vmware 安装android-X86"></a>Vmware 安装android-X86</h1><p>选了一个最新的版本，没有安装成功。后来重新下载了一个低版本的系统，能成功安装，进去之后是字符界面，没有进入桌面系统。按照linux的做法，折腾了几下，没有成功，遂放弃。</p>
<p><em><a href="http://www.x86android.com/forum.php" target="_blank" rel="noopener">安卓x86中文站</a></em></p>
<h1 id="Remix-Live-USB"><a href="#Remix-Live-USB" class="headerlink" title="Remix Live USB"></a>Remix Live USB</h1><p>带着比较激动的心情，进入<a href="http://cn.jide.com/remixos-for-pc" target="_blank" rel="noopener">技德科技官网</a>，准备试用Remix.<br><img src="http://o8fj2jbwb.bkt.clouddn.com/remix%E5%AE%98%E7%BD%91.png" alt=""></p>
<a id="more"></a>
<p>Remix 可以硬盘安装，也可以做成live USB。当然我首选了live USB。 之前对live usb这些也不太懂，后来有段时间专门折腾了一下windows的装机，win PE的使用，Puppy linux ,CD linux,甚至Kali Linux,都使用的是live USB方式，这些方面的心得体会我后面应该会另外写博文回忆记录。</p>
<p>制作live USB官网上有教程，一步步来，很容易就做好了live USB.<br><img src="http://o8fj2jbwb.bkt.clouddn.com/remixliveusb.png" alt=""></p>
<h1 id="体验Remix"><a href="#体验Remix" class="headerlink" title="体验Remix"></a>体验Remix</h1><p>用了之后感觉不太好，不太流畅，反应慢 ，桌面类似于win10，没有root权限。原因我分析了，不是电脑配置的原因，可能是usb读写速度影响，也可能是本身系统的问题。所以现在我放弃了这个系统。<br>好了，废话不多少，上图。</p>
<p>F12进入Bios选择usb启动后，出现下图：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/IMG_20160608_084200.jpg" alt=""><br>然后紧接着出现下图，可能会卡在这里一分多钟，严格说，不应该称作卡:<br><img src="http://o8fj2jbwb.bkt.clouddn.com/IMG_20160608_084205.jpg" alt=""><br>进入Remix桌面：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/Screenshot_2016-06-08-08-45-23.png" alt=""></p>
<p><img src="http://o8fj2jbwb.bkt.clouddn.com/Screenshot_2016-06-08-08-56-02.png" alt=""></p>
<p><img src="http://o8fj2jbwb.bkt.clouddn.com/Screenshot_2016-06-08-08-53-58.png" alt=""></p>
<p><img src="http://o8fj2jbwb.bkt.clouddn.com/Screenshot_2016-06-08-09-19-44.png" alt=""></p>
<p>我安装了一个QQ：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/Screenshot_2016-06-08-08-49-04.png" alt=""></p>
<p><img src="http://o8fj2jbwb.bkt.clouddn.com/Screenshot_2016-06-08-08-49-23.png" alt=""></p>
<p>我使用的USB是刚从东哥奶茶店买的usb3.0接口的金士顿16GU盘，由于这个原因我已经申请退货了，后面有空我会再利用其他的u盘实验Remix，也许是因为U盘的原因才导致使用不流畅。但这个原因基本占比10%不到，运行的时候，几乎都在PC内存里操作了，类似于Puppy Linux，当然是我猜测的。当时使用Kali Linux的live USB的时候却是很流畅，没有出现这样的情况。哦，对了，U盘也不同。那可能还要测试测试。这个再说。</p>
<h1 id="是孤陋寡闻，还是发现了新大陆？"><a href="#是孤陋寡闻，还是发现了新大陆？" class="headerlink" title="是孤陋寡闻，还是发现了新大陆？"></a>是孤陋寡闻，还是发现了新大陆？</h1><p>应该说，这些东西很多人知道，并使用，没接触过的人会觉得真的挺神奇，挺有趣的。世界很大，我们都应该多看看！</p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h1><p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a> (<strong>默认</strong>)</p>
</li>
<li><p><a href="http://linxi4linux.github.io/" target="_blank" rel="noopener">http://linxi4linux.github.io/</a>(原地址，备用)</p>
</li>
<li><p><a href="http://reboot_cat.coding.me/" target="_blank" rel="noopener">http://reboot_cat.coding.me/</a> （原地址，备用）</p>
</li>
</ul>
<p>email: <a href="mailto:&#108;&#105;&#110;&#x75;&#120;&#99;&#x6f;&#x64;&#x65;&#x32;&#x6e;&#105;&#x6b;&#105;&#64;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#108;&#105;&#110;&#x75;&#120;&#99;&#x6f;&#x64;&#x65;&#x32;&#x6e;&#105;&#x6b;&#105;&#64;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></p>
<p>2016-6-11 于杭州</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>remix</tag>
        <tag>Android-X86</tag>
      </tags>
  </entry>
  <entry>
    <title>同时托管博客到coding和github</title>
    <url>/2016/06/14/%E5%90%8C%E6%97%B6%E6%89%98%E7%AE%A1%E5%8D%9A%E5%AE%A2%E5%88%B0coding%E5%92%8Cgithub/</url>
    <content><![CDATA[<p>最近几天搭建了基于github+hexo的个人<a href="http://rebootcat.com" target="_blank" rel="noopener">独立博客</a>，然后趁着这个劲头，就折腾了关于托管博客到国内的coding(gitcafe已经被coding收购了，网上关于此类的博客大部分是基于gitcafe，其实步骤大同小异吧)的方法步骤。</p>
<p>故本文的内容是关于同时托管静态博客到github和<a href="https://coding.net" target="_blank" rel="noopener">coding</a>,并设置DNS，绑定到域名，同时修改了之前的博客<a href="http://rebootcat.com/2016/06/10/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener">我的个人博客搭建记录</a>中关于博客被百度收录和谷歌收录的部分内容。</p>
<h1 id="折腾的原因"><a href="#折腾的原因" class="headerlink" title="折腾的原因"></a>折腾的原因</h1><p>原因很简单，github的服务器在国外，虽然GWF没有把它墙了(之前好像是被墙过)，但是访问速度比较慢而且据说百度爬虫不抓取github pages,故为了提高访问速度，同时也能让百度收录咱的博客，就打算同时托管博客到<a href="http://coding.net" target="_blank" rel="noopener">coding</a>上，毕竟是国内，访问速度怎么着也比github快。同时还可以设置国内国外不同的ip分别访问到github pages和coding pages。<br><img src="http://o8fj2jbwb.bkt.clouddn.com/pingcodinggithub.png" alt=""></p>
<p>上图中reboot_cat.coding.me 和linxi4linux.github.io分别是我托管在coding上和github上的博客地址。</p>
<h1 id="托管博客到coding"><a href="#托管博客到coding" class="headerlink" title="托管博客到coding"></a>托管博客到coding</h1><h2 id="注册coding-新建仓库"><a href="#注册coding-新建仓库" class="headerlink" title="注册coding,新建仓库"></a>注册coding,新建仓库</h2><a id="more"></a>

<p>在coding上的操作基本和在github上的操作类似，新建仓库，名称与用户名一样，分支为master.</p>
<h2 id="上传ssh验证"><a href="#上传ssh验证" class="headerlink" title="上传ssh验证"></a>上传ssh验证</h2><p>步骤类似于github上传ssh验证。打开git bash：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">cat  ~<span class="regexp">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure>

<p>然后copy内容到coding上项目ssh设置处：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/codingsshkey.png" alt=""></p>
<h2 id="修改站点配置文件推送博客源码及内容到coding和github"><a href="#修改站点配置文件推送博客源码及内容到coding和github" class="headerlink" title="修改站点配置文件推送博客源码及内容到coding和github"></a>修改站点配置文件推送博客源码及内容到coding和github</h2><p>修改站点配置文件($BLOG/_config.yml),其中BLOG为自己的hexo博客目录，如我的是/g/blog</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line"> <span class="attribute">type</span>: git</span><br><span class="line"><span class="attribute">repo</span>:</span><br><span class="line">  <span class="attribute">github</span>: <span class="attribute">ssh</span>:<span class="comment">//git@github.com/linxi4linux/linxi4linux.github.io.git,master</span></span><br><span class="line">  <span class="attribute">coding</span>: git<span class="variable">@git</span>.coding.<span class="attribute">net</span>:reboot_cat/reboot_cat.git,master</span><br></pre></td></tr></table></figure>

<p>参照我的修改成你自己的仓库地址，然后即可。</p>
<p>然后就是hexo的一系列操作了。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo d -g</span></span><br></pre></td></tr></table></figure>
<p>如果出现错误一般是你上面的_config.yml中github和coding的地址不正确导致的。完成后，你可以去<a href="https://coding.net" target="_blank" rel="noopener">coding</a>上看你的仓库中是不是出现了你$BLOG/public下的文件。同时呢，也推送到了github.</p>
<h2 id="开启coding-pages服务"><a href="#开启coding-pages服务" class="headerlink" title="开启coding pages服务"></a>开启coding pages服务</h2><p>这一步完成后你就可以使用<a href="http://username.coding.me" target="_blank" rel="noopener">http://username.coding.me</a>去访问你的博客了。<br><img src="http://o8fj2jbwb.bkt.clouddn.com/codingpages.png" alt=""></p>
<p>上图是我已经开启了。至于下面的绑定个人域名的你暂时不用管，后面会说到。<br>完事之后你试试<a href="http://username.coding.me" target="_blank" rel="noopener">http://username.coding.me</a>是不是能访问了，当然username换成你自己的。比如我的是<a href="http://reboot_cat.coding.me/" target="_blank" rel="noopener">http://reboot_cat.coding.me/</a></p>
<p>到这一步，是不是很简单，原因嘛自然是我经历过了github pages的洗礼！嘿嘿。</p>
<h1 id="购买自己的域名"><a href="#购买自己的域名" class="headerlink" title="购买自己的域名"></a>购买自己的域名</h1><p>终于要有自己的域名了，以前觉得是一件很酷的事情，真的挺酷的呢！</p>
<h2 id="godaddy"><a href="#godaddy" class="headerlink" title="godaddy"></a><a href="https://godaddy.com" target="_blank" rel="noopener">godaddy</a></h2><p>推荐<a href="https://godaddy.com" target="_blank" rel="noopener">godaddy</a>上购买自己的域名，这是老牌的国外的域名服务商，当然你可以在国内的域名服务商买，但是听说要备案，很麻烦。当然有利有弊，自己权衡。</p>
<p>这一步教程很多，当然其实不用也行，就是普通的网购，中国人都会吧，毕竟因为某宝，对吧，而且关键是 godaddy支持支付宝，这省了很多事。不是土豪的话网上搜一个优惠码，一大堆。我自己购买的时候找到了一个优惠码，我的域名是<a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a>,一年竟然只￥7.14,是的，你没看错，是RMB,激动了一阵后结果证明不能用支付宝购买，而且也不支持国内信用卡，悲剧了。网上的说法是低于$8的都不能用支付宝。那就算了呗，也不差那点钱，所以我暂时买了一年的，价格￥55。<br><img src="http://o8fj2jbwb.bkt.clouddn.com/godadyrebootcat.png" alt=""></p>
<h2 id="选择rebootcat-com的原因"><a href="#选择rebootcat-com的原因" class="headerlink" title="选择rebootcat.com的原因"></a>选择<a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a>的原因</h2><p>不知道大家跟我有没有类似的困惑，碰到在某个网站注册一个用户名的时候，我总是对昵称或者用户名很纠结，纠结良久，因为总是想要想出一个与众不同的，让别人一眼就能记住的名称。那么选择自己的域名也是一个道理，除了有意义、与众不同，最重要的应该是简短。</p>
<p>那么说到我自己的域名<a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a>,为什么选择这个域名？linux命令reboot和cat大家都知道，而且通过这个名称，大家大概也能猜测到这个网址内容是关于哪一方面的，这其实也很重要，要让别人容易知名识意。另外，reboot这个命令是重启的意思，象征着新的开端，象征着新的篇章，当然也是希望自己能过好自己的生活。最后，cat除了是linux命令，还是“猫”的意思，我是一个很喜欢猫，狗的人，以至于我现在的微信头像都是猫(见文末的打赏)，博客的头像是狼。</p>
<p>所以，最终我选择了rebootcat.com作为自己的域名。O(∩_∩)O~</p>
<p>购买之后可能要做一些设置，这部分先不着急，放在dns设置的时候说。</p>
<h1 id="DNSpod"><a href="#DNSpod" class="headerlink" title="DNSpod"></a><a href="https://www.dnspod.cn" target="_blank" rel="noopener">DNSpod</a></h1><p>DNSpod是什么？按照他们的宗旨：</p>
<pre><code>致力于为您提供最稳定 ，最安全的域名解析服务。</code></pre><p>DNS,即域名解析服务器，为什么要有这个？不用这个行不行，理论上说，当然行。这就是人跟机器的区别。计算机当然很喜欢000111101001之类的二进制数了，一个ip地址23.34.124.129可以表示为一串01二进制数，计算机处理这些完全无压力，可是你要是让human beings来记这些数字，谁他么记得住？这就产生了DNS的概念，它提供一种映射，比如<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 映射到的ip是115.239.210.27，你可以试着在浏览器里直接输入这个ip，是不是一样访问的是百度的首页？</p>
<p>理解了DNS，那么再来说DNSpod的设置。</p>
<p>在这一步之前，首先在$BLOG/source目录下新建CNAME文件，内容写上刚刚购买的域名。例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">rebootcat</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure>


<p>进入<a href="https://www.dnspod.cn/console/dns" target="_blank" rel="noopener">DNSpod</a>，点击域名解析，添加域名，然后做映射：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/dnspod.png" alt=""></p>
<p>其中192.30.252.153是github pages的ip地址。注意到图中可以对不同的地址配置不同的线路(国内，国外)。注意到图中的两个地址f1g1ns2.dnspod.net和f1g1ns1.dnspod.net，马上就用得到。</p>
<p><strong>这一步我反反复复设置了好多遍，也做了好多遍测试，所以如果碰到访问不了你刚注册的域名的情况，那么再重新来这里设置吧</strong></p>
<p>然后回到上文中godaddy中域名的设置：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/godaddydnsserver.png" alt=""><br>添加<strong>f1g1ns2.dnspod.net</strong>和<strong>f1g1ns1.dnspod.net</strong>，至于在那个页面，这个自己找。原因嘛，就是设置域名服务器为这两台机器，国内的更靠谱一点。</p>
<p>然后回到<a href="https://coding.net" target="_blank" rel="noopener">coding</a>,到pages页面，绑定你自己的域名：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/codingpages.png" alt=""></p>
<p>过一段时间，几分钟或更长，你可以试着在浏览器里输入你刚注册的域名，看是不是能访问了。如果能成功访问，那么恭喜你，设置应该是正确的，如果不能访问，那么重新配置dns映射。也可以打开CMD命令用ping进行测试：</p>
<p>刷新本地dns:</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ipconfig</span>/flushdns</span><br></pre></td></tr></table></figure>
<p>ping 自己的域名：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ping</span> rebootcat.com</span><br></pre></td></tr></table></figure>

<h1 id="让百度、谷歌收录自己的博客"><a href="#让百度、谷歌收录自己的博客" class="headerlink" title="让百度、谷歌收录自己的博客"></a>让百度、谷歌收录自己的博客</h1><p>如果你能用你自己的域名成功访问自己的博客的话，那么先恭喜你。但是还太早，你看看百度能不能搜到你的博客，看看谷歌能不能搜到你的博客,在百度和谷歌的搜索框里输入：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">site:</span>rebootcat.com</span><br></pre></td></tr></table></figure>
<p>将会出现这样的画面：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/sitebaidurebootcat.png" alt=""><br>谷歌也类似(我随便输的一个域名)：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/sitegooglerebootcat.png" alt=""><br>如果是这样，那么不要急，接着来。</p>
<h2 id="Google-Search"><a href="#Google-Search" class="headerlink" title="Google Search"></a><a href="https://www.google.com/webmasters/tools/home?hl=zh-CN&authuser=0" target="_blank" rel="noopener">Google Search</a></h2><p>步骤此处略，详细配置可以见我之前的博客:<a href="http://rebootcat.com/2016/06/10/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener">我的个人博客搭建记录</a>中<em>提交google抓取</em>一节。<br><a href="http://rebootcat.com/2016/06/10/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener">我的个人博客搭建记录</a>中<em>提交google抓取</em>一节当时上传sitemap.xml是有错误的,google检测没有通过(见下图 6个错误)，原因我现在叙述。<br><img src="http://o8fj2jbwb.bkt.clouddn.com/sitemaperror2.png" alt=""></p>
<p>此处需要修改站点配置文件$BLOG/_config.yml中：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site <span class="keyword">is</span> <span class="keyword">put</span> in <span class="keyword">a</span> subdirectory, <span class="keyword">set</span> url <span class="keyword">as</span> <span class="string">'http://yoursite.com/child'</span> <span class="built_in">and</span> root <span class="keyword">as</span> <span class="string">'/child/'</span></span><br><span class="line">ur<span class="variable">l:</span> http://rebootcat.<span class="keyword">com</span></span><br><span class="line">roo<span class="variable">t:</span> /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_default<span class="variable">s:</span></span><br></pre></td></tr></table></figure>

<p>修改成你自己的域名。然后再提交：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo d -g</span></span><br></pre></td></tr></table></figure>
<p>重新再google search上提交sitemap.xml。</p>
<h1 id="百度站长平台"><a href="#百度站长平台" class="headerlink" title="百度站长平台"></a><a href="http://zhanzhang.baidu.com/?castk=LTE%3D" target="_blank" rel="noopener">百度站长平台</a></h1><p>步骤类似，前提是安装好了baidusitemap的插件。步骤略。<br><img src="http://o8fj2jbwb.bkt.clouddn.com/%E7%99%BE%E5%BA%A6%E7%AB%99%E9%95%BFsitemap.png" alt=""></p>
<p>然后过一段时间，等待审核，忘记我的是多久了，然后你重新再百度或者google的搜索框里输入：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">site:</span>rebootcat.com</span><br></pre></td></tr></table></figure>
<p>将会是下面的结果：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/sietgooglesus.png" alt=""><br><img src="http://o8fj2jbwb.bkt.clouddn.com/baidusiterebootsus.png" alt=""><br>当然，这一步可以做很多优化，比如自动提交，让搜索引擎快速发现你博客的更新等，还有待折腾。</p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h1><p>到此，基本把个人博客做好了，接下来需要做的就是<strong>原创的坚持写博客</strong>，不知道自己能不能做到，所以费这么大劲折腾，也是希望自己珍惜这些折腾，不要浪费，好好坚持写博客，权当工作日志。</p>
<p>由于我对前端真的不懂，我是做linux c/c++开发的，折腾这些虽然不难，但是看到很多大神的博客，确实很好，做了很多优化，自己有空的时候，可以学学做点优化，接触点前端的知识。</p>
<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a> (<strong>默认</strong>)</p>
</li>
<li><p><a href="http://linxi4linux.github.io/" target="_blank" rel="noopener">http://linxi4linux.github.io/</a>(原地址，备用)</p>
</li>
<li><p><a href="http://reboot_cat.coding.me/" target="_blank" rel="noopener">http://reboot_cat.coding.me/</a> （原地址，备用）</p>
</li>
</ul>
<p>email: <a href="mailto:&#108;&#x69;&#x6e;&#x75;&#120;&#x63;&#x6f;&#100;&#x65;&#50;&#x6e;&#x69;&#107;&#x69;&#64;&#x67;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#108;&#x69;&#x6e;&#x75;&#120;&#x63;&#x6f;&#100;&#x65;&#50;&#x6e;&#x69;&#107;&#x69;&#64;&#x67;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></p>
<p>2016-6-14 于杭州</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>coding</tag>
        <tag>gitcafe</tag>
      </tags>
  </entry>
  <entry>
    <title>定义自己的命令</title>
    <url>/2016/06/08/%E5%AE%9A%E4%B9%89%E8%87%AA%E5%B7%B1%E7%9A%84rmcommand/</url>
    <content><![CDATA[<p>rm  是一个很危险的命令，别人一直说，我并没有在意，直到有一天一个不小心，忘记当前目录的位置，手贱的使用了rm命令，结果花了半天也没有把那些重要资料给恢复过来。所以还是有必要给自己定义一个不那么危险的rm命令。</p>
<h1 id="自定义rm命令"><a href="#自定义rm命令" class="headerlink" title="自定义rm命令"></a>自定义rm命令</h1><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">myrm() &#123; Recycle=/tmp/$(<span class="keyword">date</span> +%Y%m%d); mkdir -p $Recycle; mv $@ $Recycle &amp;&amp; echo <span class="string">"moved $@ to $Recycle ok"</span>; &#125;</span><br><span class="line"><span class="keyword">alias</span> rm=<span class="string">'myrm'</span></span><br></pre></td></tr></table></figure>
<p>以上写在.bashrc文件，然后执行source .bashrc文件即可。</p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h1><p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a> (<strong>默认</strong>)</p>
</li>
<li><p><a href="http://linxi4linux.github.io/" target="_blank" rel="noopener">http://linxi4linux.github.io/</a>(原地址，备用)</p>
</li>
<li><p><a href="http://reboot_cat.coding.me/" target="_blank" rel="noopener">http://reboot_cat.coding.me/</a> （原地址，备用）</p>
</li>
</ul>
<p>email: <a href="mailto:&#x6c;&#x69;&#110;&#x75;&#x78;&#99;&#111;&#100;&#x65;&#50;&#110;&#105;&#107;&#105;&#x40;&#x67;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;">&#x6c;&#x69;&#110;&#x75;&#x78;&#99;&#111;&#100;&#x65;&#50;&#110;&#105;&#107;&#105;&#x40;&#x67;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;</a></p>
<p>2016-6-08 于杭州</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>我的vim捣鼓之路</title>
    <url>/2016/06/07/%E6%88%91%E7%9A%84vim%E6%8D%A3%E9%BC%93%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从大二的时候就开始接触Linux了，从而也接触了vi,对的，当时对这些还不太了解，不知道还有个vim，真的觉得入门不简单，网上关于vim对比其他Editor的学习曲线，看了令人生畏。那时候用的也不多，所以一直处于裸奔状态，只会基本的操作，这里推荐我比较喜欢的一个博客网站<a href="http://coolshell.cn/" target="_blank" rel="noopener">酷壳</a>中的一篇博文<a href="http://coolshell.cn/articles/5426.html" target="_blank" rel="noopener">简明vim练级攻略</a>。这篇博文基本上把日常使用vim的90%的命令概括了，裸奔也就够了.</p>
<p>当然，这里推荐一个关于vim的游戏<a href="http://coolshell.cn/?s=vim++%E6%B8%B8%E6%88%8F" target="_blank" rel="noopener">vim大冒险</a>,同样来自<a href="http://coolshell.cn/" target="_blank" rel="noopener">酷壳</a>.这个网站里很多博文我都觉得写的不错。写这篇博文的时候又看到上面一个比较有趣的命令。<br>在vim中试着输入 :h! 会发现什么？  输入 :h 42呢？是不是很有趣？</p>
<p>还有，这里多说一句，关于vim,Emacs等，两个阵营可以无休无止的争论下去谁更优秀。我作为一个<a href="http://www.vimer.cn/" target="_blank" rel="noopener">vimer</a>，我只引用一句话：</p>
<blockquote>
<p>Emacs是神之编辑器，vim是编辑器之神。</p>
</blockquote>
<p>闲言少叙，开始正文，这是我在从最初接触vim到现在快3年了，终于决定不裸奔了。</p>
<h1 id="什么是插件"><a href="#什么是插件" class="headerlink" title="什么是插件"></a>什么是插件</h1><p>vim 是一个支持丰富的插件扩展的Editor,那么什么是插件？可以简单的理解，插件就是一个配置，只不过需要把插件放在相应的目录下，如$HOME/.vim/plugin下，然后在$HOME/.vimrc中做相应的配置即可。这点理解了，对于vim的配置就会相对明朗很多。所以，<strong>对于新增插件，就是不断把插件放在$HOME/.vim/plugin目录下的过程。</strong></p>
<p>当然，对于使用插件管理器的情况就有些不同。这里我自己使用的是<a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="noopener">Vundle</a>.这样就不用自己管理插件了，删除，更新，安装插件将变得很简单，很容易。</p>
<h1 id="插件管理器Vundle的安装"><a href="#插件管理器Vundle的安装" class="headerlink" title="插件管理器Vundle的安装"></a>插件管理器<a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="noopener">Vundle</a>的安装</h1><p>参照github上<a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="noopener">Vundle</a>的教程安装好Vundle.然后你会发现$HOME/.vim/目录有bundle目录，$HOME/.vim/bundle/目录将是即将安装的插件的存放目录。即通过vundle安装的插件将都存在这个目录下。<br>先贴一张我自己的Vundle:<br><img src="http://o8fj2jbwb.bkt.clouddn.com/summary.png" alt=""></p>
<a id="more"></a>

<p>对应上图，我使用到的vim插件如下：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>插件名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>delimitMate</td>
<td>自动补全引号(单引号/双引号/反引号), 括号(()[]{})</td>
</tr>
<tr>
<td>2</td>
<td>vim-surround</td>
<td>方便的在字符两边插入各种符号  （我不用）</td>
</tr>
<tr>
<td>3</td>
<td>indentLine</td>
<td>代码缩进标识</td>
</tr>
<tr>
<td>4</td>
<td>nerdtree</td>
<td>文件目录树</td>
</tr>
<tr>
<td>5</td>
<td>taglist</td>
<td>代码结构概览</td>
</tr>
<tr>
<td>6</td>
<td>syntastic</td>
<td>语法检查</td>
</tr>
<tr>
<td>7</td>
<td>YouCompleteMe</td>
<td>终极神器，代码补全</td>
</tr>
</tbody></table>
<p>目前暂时用到这些个插件，后续如果有新的实用的插件会更新。</p>
<h1 id="delimitMate-安装"><a href="#delimitMate-安装" class="headerlink" title="delimitMate 安装"></a><a href="https://github.com/Raimondi/delimitMate" target="_blank" rel="noopener">delimitMate</a> 安装</h1><p>自动补全引号(单引号/双引号/反引号), 括号(()[]{})        </p>
<p>只需要在.vimrc文件中增添一句：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Bundle</span> <span class="string">'Raimondi/delimitMate'</span></span><br></pre></td></tr></table></figure>

<p>演示效果：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/demelite.gif" alt=""></p>
<h1 id="vim-surround-安装"><a href="#vim-surround-安装" class="headerlink" title="vim-surround 安装"></a><a href="https://github.com/tpope/vim-surround" target="_blank" rel="noopener">vim-surround</a> 安装</h1><p>方便的在字符两边插入各种符号</p>
<p>在.vimrc文件中增添一句：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Bundle </span><span class="string">"tpope/vim-surround"</span></span><br></pre></td></tr></table></figure>

<p>演示效果：(借用了其他博主的图片，侵删)<br><img src="http://o8fj2jbwb.bkt.clouddn.com/surround.gif" alt=""></p>
<h1 id="indentLine-安装"><a href="#indentLine-安装" class="headerlink" title="indentLine 安装"></a><a href="https://github.com/Yggdroot/indentLine" target="_blank" rel="noopener">indentLine</a> 安装</h1><p>代码缩进标识</p>
<p>在.vimrc文件中增添下面几句：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Bundle <span class="string">'Yggdroot/indentLine'</span> </span><br><span class="line"><span class="comment">"indentLine 代码缩进线标志线</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:indentLine_char</span> = <span class="string">'¦'</span> </span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:indentLine_color_term</span> = <span class="number">239</span> </span><br><span class="line"><span class="comment">"映射到ctrl+i键 </span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;C-i&gt;</span> :IndentLinesToggle<span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>

<p>演示效果:<br><img src="http://o8fj2jbwb.bkt.clouddn.com/indentline.gif" alt=""></p>
<h1 id="nerdtree-安装"><a href="#nerdtree-安装" class="headerlink" title="nerdtree 安装"></a><a href="https://github.com/scrooloose/nerdtree.git" target="_blank" rel="noopener">nerdtree</a> 安装</h1><p>文件目录树</p>
<p>在.vimrc文件中增添：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Bundle <span class="string">'scrooloose/nerdtree.git'</span></span><br><span class="line"><span class="comment">"NERD-tree  explore ,映射到ctrl+e </span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;C-e&gt;</span> :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>

<p>演示效果：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/nerdtree.gif" alt=""></p>
<h1 id="taglist-安装"><a href="#taglist-安装" class="headerlink" title="taglist  安装"></a><a href="https://github.com/vim-scripts/taglist.vim.git" target="_blank" rel="noopener">taglist</a>  安装</h1><p>代码结构概览</p>
<p>在.vimrc文件中增添：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">Bundle <span class="string">'vim-scripts/taglist.vim.git'</span> </span><br><span class="line">map &lt;silent&gt; &lt;F1&gt; <span class="symbol">:TlistToggle&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>

<p>演示效果：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/taglist.gif" alt=""><br>*<em>结合cscope将能实现linux下的代码浏览，虽然比不上windows平台的sourceinsight(个人觉得，也可能是自己还没有把快捷键用熟悉)，后面将会专门写一篇博文关于cscope，此处留空 *</em></p>
<h1 id="终极神器YouCompleteMe"><a href="#终极神器YouCompleteMe" class="headerlink" title="终极神器YouCompleteMe"></a>终极神器<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="noopener">YouCompleteMe</a></h1><p>为什么说终极神器呢？我是从windows转到linux的，大学里一直在用VS，那时候还是死死的编程，一个代码一个代码的敲，直到有一天我发现了visual assist x ,这个虚拟助手简直让我爽得不能自拔,它能自动补全。而且效率很高。当然如果你要开始鄙视我了，那没办法，我还不是大神，大神当然不用这些自动补全神器，降低身份。转到linux后，一直用裸奔的vim，所以也没有遇见YouCompleteMe这类的神器。直到有一天，终于忍无可忍，我以后还要接着用vim的，网上关于vim大神用vim收发邮件，听mp3,煮咖啡的传说一直让我怀疑，又让我跃跃欲试，况且vim没用过几个插件的人怎么好意思说自己vimer,甚至linuxer？终于开始捣鼓起自己的vim配置。</p>
<p>工作中最先开始用centos5的，无奈自带的gcc版本，vim版本，Python版本过低，一路折腾，自己编译了vim 7.4版本， gcc 4.8版本，Python3版本，在编译libclang（YouCompleteMe就是依赖clang进行补全和词法分析的）时还是不通过，折腾了快两周后，终于决定放弃centos5，转战centos7。这个过程很痛苦，说实在的，google了很多很多前人的解决办法，但是依旧没能成功编译YouCompleteMe，这个过程实在浪费时间，也学不到什么，所以建议如果可能的话，尽量采用较高本版的系统吧。这里虽然轻描淡写，但是浪费最多时间的地方也就是这一步。下面记录几个当时收藏用以解决这个问题的网址，当然只是作为记录，我用不到,不过依旧感谢这些博主。</p>
<p>Getting Started with the LLVM System : <a href="http://llvm.org/docs/GettingStarted.html" target="_blank" rel="noopener">http://llvm.org/docs/GettingStarted.html</a></p>
<p>centos安装vim7.4: <a href="http://www.cnblogs.com/nhlinkin/p/3545509.html" target="_blank" rel="noopener">http://www.cnblogs.com/nhlinkin/p/3545509.html</a></p>
<p>CentOS 升级Python3.4.3版本: <a href="http://www.centoscn.com/image-text/config/2015/0320/4931.html" target="_blank" rel="noopener">http://www.centoscn.com/image-text/config/2015/0320/4931.html</a></p>
<p>centos 6.5 x64编译有python的vim7.4 - yantze: <a href="http://www.tuicool.com/articles/rUNfMbJ" target="_blank" rel="noopener">http://www.tuicool.com/articles/rUNfMbJ</a></p>
<p>vim安装YouCompleteMe插件<a href="http://www.cnblogs.com/junnyfeng/p/3633697.html" target="_blank" rel="noopener">http://www.cnblogs.com/junnyfeng/p/3633697.html</a></p>
<p>[笔记]ubuntu 13.04 配置YouCompleteMe: <a href="http://blog.csdn.net/zhuliting/article/details/20055715" target="_blank" rel="noopener">http://blog.csdn.net/zhuliting/article/details/20055715</a></p>
<p>vim自动补全神器： <a href="http://blog.marchtea.com/archives/161" target="_blank" rel="noopener">http://blog.marchtea.com/archives/161</a></p>
<p>Ubuntu 15.04下为Vim安装YouCompleteMe插件: <a href="http://www.linuxidc.com/Linux/2015-07/120352.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2015-07/120352.htm</a></p>
<p>linux下编译安装YouCompleteMe插件<a href="http://hahaya.github.io/build-YouCompleteMe/" target="_blank" rel="noopener">http://hahaya.github.io/build-YouCompleteMe/</a></p>
<p>Building LLVM with CMake: <a href="http://llvm.org/docs/CMake.html" target="_blank" rel="noopener">http://llvm.org/docs/CMake.html</a></p>
<p>centos下安装llvm+clang: </p>
<p><a href="http://ilovers.sinaapp.com/article/centos%E4%B8%8B%E5%AE%89%E8%A3%85llvmclang" target="_blank" rel="noopener">http://ilovers.sinaapp.com/article/centos%E4%B8%8B%E5%AE%89%E8%A3%85llvmclang</a></p>
<p>How To Install LLVM and Clang on CentOS 6:</p>
<p> <a href="https://www.vultr.com/docs/how-to-install-llvm-and-clang-on-centos-6" target="_blank" rel="noopener">https://www.vultr.com/docs/how-to-install-llvm-and-clang-on-centos-6</a></p>
<p>RPM resource libclang.so()(64bit):</p>
<p> <a href="http://rpmfind.net/linux/rpm2html/search.php?query=libclang.so%28%29%2864bit%29++centos&submit=Search+...&system=&arch=" target="_blank" rel="noopener">http://rpmfind.net/linux/rpm2html/search.php?query=libclang.so%28%29%2864bit%29++centos&amp;submit=Search+…&amp;system=&amp;arch=</a></p>
<p>Index of /gnu/gcc/ :<a href="http://mirrors.kernel.org/gnu/gcc/" target="_blank" rel="noopener">http://mirrors.kernel.org/gnu/gcc/</a></p>
<p><a href="http://howiefh.github.io/2015/05/22/vim-install-youcompleteme-plugin/" target="_blank" rel="noopener">http://howiefh.github.io/2015/05/22/vim-install-youcompleteme-plugin/</a></p>
<p><a href="http://howiefh.github.io/2015/05/22/vim-install-youcompleteme-plugin/" target="_blank" rel="noopener">http://howiefh.github.io/2015/05/22/vim-install-youcompleteme-plugin/</a></p>
<p>好了，那么我把linux换成centos7了，然后参照<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="noopener">YouCompleteMe</a>上的教程，很轻松的就安装好了YouCompleteMe,不需要自己去编译clang，不需要很费心费力的google。</p>
<p>演示效果：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/youcompleteme.gif" alt=""><br>那么说说.vimrc的配置：</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="string">"YouCompleteMe 配置</span></span><br><span class="line"><span class="string">let g:ycm_global_ycm_extra_conf = '/home/niki/.ycm_extra_conf.py'  </span></span><br><span class="line"><span class="string">"</span> <span class="keyword">let</span> g:ycm_global_ycm_extra_conf = <span class="string">'/home/niki/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'</span>  </span><br><span class="line"><span class="keyword">let</span> g:ycm_seed_identifiers_with_syntax=<span class="number">1</span>    <span class="string">" 语法关键字补全  </span></span><br><span class="line"><span class="string">let g:ycm_confirm_extra_conf=0   "</span> 打开vim时不再询问是否加载ycm_extra_conf.py配置  </span><br><span class="line"><span class="string">"youcompleteme  默认tab  s-tab 和自动补全冲突</span></span><br><span class="line"><span class="string">"</span><span class="keyword">let</span> g:ycm_key_list_select_completion = [<span class="string">'&lt;Down&gt;'</span>]</span><br><span class="line"><span class="string">"let g:ycm_key_list_previous_completion = ['&lt;Up&gt;']</span></span><br><span class="line"><span class="string">"</span>在注释输入中也能补全</span><br><span class="line"><span class="keyword">let</span> g:ycm_complete_in_comments = <span class="number">1</span> </span><br><span class="line"><span class="string">"在字符串输入中也能补全</span></span><br><span class="line"><span class="string">let g:ycm_complete_in_strings = 1 </span></span><br><span class="line"><span class="string">"</span>注释和字符串中的文字也会被收入补全</span><br><span class="line"><span class="keyword">let</span> g:ycm_collect_identifiers_from_comments_and_strings = <span class="number">0</span> </span><br><span class="line"><span class="keyword">let</span> g:ycm_error_symbol = <span class="string">'&gt;&gt;'</span></span><br><span class="line"><span class="keyword">let</span> g:ycm_warning_symbol = <span class="string">'&gt;*'</span></span><br><span class="line"><span class="string">"回车即选中当前项 </span></span><br><span class="line"><span class="string">inoremap &lt;expr&gt; &lt;CR&gt;  pumvisible() ? "</span>\<span class="xml"><span class="tag">&lt;<span class="name">C-y</span>&gt;</span>" : "\</span><span class="xml"><span class="tag">&lt;<span class="name">CR</span>&gt;</span>"  </span></span><br><span class="line"><span class="xml">set completeopt=longest,menu    "让Vim的补全菜单行为与一般IDE一致(参考VimTip1228) </span></span><br><span class="line"></span><br><span class="line"><span class="xml">"上下左右键的行为 会显示其他信息</span></span><br><span class="line"><span class="xml">inoremap </span><span class="xml"><span class="tag">&lt;<span class="name">expr</span>&gt;</span> </span><span class="xml"><span class="tag">&lt;<span class="name">Down</span>&gt;</span>     pumvisible() ? '</span><span class="xml"><span class="tag">&lt;<span class="name">C-n</span>&gt;</span>' : '</span><span class="xml"><span class="tag">&lt;<span class="name">Down</span>&gt;</span>'</span></span><br><span class="line"><span class="xml">inoremap </span><span class="xml"><span class="tag">&lt;<span class="name">expr</span>&gt;</span> </span><span class="xml"><span class="tag">&lt;<span class="name">Up</span>&gt;</span>       pumvisible() ? '</span><span class="xml"><span class="tag">&lt;<span class="name">C-p</span>&gt;</span>' : '</span><span class="xml"><span class="tag">&lt;<span class="name">Up</span>&gt;</span>'</span></span><br><span class="line"><span class="xml">inoremap </span><span class="xml"><span class="tag">&lt;<span class="name">expr</span>&gt;</span> </span><span class="xml"><span class="tag">&lt;<span class="name">PageDown</span>&gt;</span> pumvisible() ? '</span><span class="xml"><span class="tag">&lt;<span class="name">PageDown</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">C-p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">C-n</span>&gt;</span>' : '</span><span class="xml"><span class="tag">&lt;<span class="name">PageDown</span>&gt;</span>'</span></span><br><span class="line"><span class="xml">inoremap </span><span class="xml"><span class="tag">&lt;<span class="name">expr</span>&gt;</span> </span><span class="xml"><span class="tag">&lt;<span class="name">PageUp</span>&gt;</span>   pumvisible() ? '</span><span class="xml"><span class="tag">&lt;<span class="name">PageUp</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">C-p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">C-n</span>&gt;</span>' : '</span><span class="xml"><span class="tag">&lt;<span class="name">PageUp</span>&gt;</span></span></span><br><span class="line"><span class="xml">"Vim calls this "prefix" key the "leader". You can set your leader key to</span></span><br><span class="line"><span class="xml">"whatever you like.</span></span><br><span class="line"><span class="xml">let mapleader = ","</span></span><br><span class="line"><span class="xml">nnoremap </span><span class="xml"><span class="tag">&lt;<span class="name">leader</span>&gt;</span>gj :YcmCompleter GoToDeclaration</span><span class="xml"><span class="tag">&lt;<span class="name">CR</span>&gt;</span></span></span><br><span class="line"><span class="xml">nnoremap </span><span class="xml"><span class="tag">&lt;<span class="name">leader</span>&gt;</span>gf :YcmCompleter GoToDefinition</span><span class="xml"><span class="tag">&lt;<span class="name">CR</span>&gt;</span></span></span><br><span class="line"><span class="xml">nnoremap </span><span class="xml"><span class="tag">&lt;<span class="name">leader</span>&gt;</span>gg :YcmCompleter GoToDefinitionElseDeclaration</span><span class="xml"><span class="tag">&lt;<span class="name">CR</span>&gt;</span></span></span><br><span class="line"><span class="xml">nmap </span><span class="xml"><span class="tag">&lt;<span class="name">F4</span>&gt;</span> :YcmDiags</span><span class="xml"><span class="tag">&lt;<span class="name">CR</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>上述配置信息，如果你对map或者nnoremap不懂，对leader不懂，推荐你看这篇<a href="http://learnvimscriptthehardway.stevelosh.com/chapters/06.html" target="_blank" rel="noopener">Learn Vimscript the Hard Way</a>.</p>
<h1 id="syntastic-安装"><a href="#syntastic-安装" class="headerlink" title="syntastic 安装"></a><a href="https://github.com/scrooloose/syntastic" target="_blank" rel="noopener">syntastic</a> 安装</h1><p>据说YouCompleteMe集成了Syntastic，这一步或许不必须。我自己是安装上了。<br>这能很实时的检查你的代码的语法，词法，错误等。应该很有用。</p>
<p>在.vimrc中添加：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="comment">"syntastic  语法错误检查 </span></span><br><span class="line"><span class="keyword">execute</span> pathogen#infect()</span><br><span class="line"><span class="keyword">set</span> statusline+=%#warningmsg#</span><br><span class="line"><span class="keyword">set</span> statusline+=%&#123;SyntasticStatuslineFlag()&#125;</span><br><span class="line"><span class="keyword">set</span> statusline+=%*</span><br><span class="line"><span class="comment">"每次自动调用 :SyntasticSetLocList, 将错误覆盖 **quickfix**</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_always_populate_loc_list</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">" 自动拉起/关闭错误窗口, 不需要手动调用 :Errors</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_auto_loc_list</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_check_on_open</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_check_on_wq</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;F2&gt;</span> :SyntasticToggleMode<span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置应该也比较简单，映射到F2键激活/关闭Syntastic的语法检查窗口。<br>演示效果：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/syntastic.gif" alt=""></p>
<h1 id="Vundle安装，更新，卸载插件"><a href="#Vundle安装，更新，卸载插件" class="headerlink" title="Vundle安装，更新，卸载插件"></a>Vundle安装，更新，卸载插件</h1><p>利用插件管理器的好处就在于方便。<br>打开vim：</p>
<p>安装插件：</p>
<blockquote>
<p>:BundleInstall</p>
</blockquote>
<p>更新插件：</p>
<blockquote>
<p>：BundleUpdate</p>
</blockquote>
<p>卸载插件：(先在.vimrc文件中注释掉需要卸载的插件)</p>
<blockquote>
<p>:BundleClean<br>演示效果：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/vundle.gif" alt=""><br>涉及到每一个插件的使用，需要仔细研究配置文件每一行代码的作用，理解并熟悉快捷键的使用。如果不熟悉快捷键，效率将会慢得很多很多。</p>
</blockquote>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>到此为止，我目前所用到的插件基本就上面的几个，虽然也碰到了一些还不错的插件，但是对于我来说并不实用。我主要从事linux上的c/c++开发，暂时用到的这些能满足我的需求，如果以后还有更好玩的更实用的插件，我会接着更新。作为记录，也说不定能帮到其他人。</p>
<p>现在回头在写这篇博客的时候，大致浏览了下，又觉得好简单啊，当时怎么就觉得挺折腾呢？也许这就是成长的过程。回过头的时候总觉得当时怎么那么傻，当时应该还能做的更好点。。。</p>
<p>这严格来说算我的第一篇博文，自己搭建的基于github Pages的博客，暂时先用着github Pages，后续如果自己能坚持下来写博客，那么再考虑购买域名和服务器。</p>
<h1 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related  Posts"></a>Related  Posts</h1><p><a href="http://ju.outofmemory.cn/entry/79671" target="_blank" rel="noopener">跟我一起学习VIM - The Life Changing Editor</a></p>
<p><a href="http://blog.csdn.net/wklken/article/details/9076621" target="_blank" rel="noopener">我的vim配置及说明【k-vim】</a></p>
<p><a href="http://blog.csdn.net/lhf_tiger/article/details/7216500" target="_blank" rel="noopener">超详细的vim+cscope 的使用规则 转载</a></p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h1><p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a> (<strong>默认</strong>)</p>
</li>
<li><p><a href="http://linxi4linux.github.io/" target="_blank" rel="noopener">http://linxi4linux.github.io/</a>(原地址，备用)</p>
</li>
<li><p><a href="http://reboot_cat.coding.me/" target="_blank" rel="noopener">http://reboot_cat.coding.me/</a> （原地址，备用）</p>
</li>
</ul>
<p>email: <a href="mailto:&#108;&#105;&#110;&#117;&#120;&#99;&#111;&#x64;&#x65;&#x32;&#x6e;&#x69;&#x6b;&#105;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#108;&#105;&#110;&#117;&#120;&#99;&#111;&#x64;&#x65;&#x32;&#x6e;&#x69;&#x6b;&#105;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
<p>2016-6-7 于杭州</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vim</tag>
        <tag>YouCompleteMe</tag>
      </tags>
  </entry>
  <entry>
    <title>我的个人博客搭建记录</title>
    <url>/2016/06/10/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇博客旨在备忘，并记录了自己折腾了3,4天后顺利搭建自己的个人博客过程中碰到的一部分问题。</p>
<p>搭建个人独立博客有很多种方法，我暂时采用的是基于github Pages的免费博客，博客框架采用hexo静态博客框架。采用此方案的原因，是因为基于github+hexo的博客很多，碰到了什么问题也有很多解决办法。当对一个事情或事物不太熟悉的时候，尽量采用受众比较多的，无关乎随大流，无关乎跟风。这让我想起了自己当时刚刚接触linux的时候，完全陌生的情况下真是无法选择到底以那个系统进行学习，所以当时采取的办法是使用社区活跃度较高，用户群比较多的系统，比如centos和ubuntu，最终我选择了ubuntu，毕竟刚从windows转过来，当然我现在使用的是centos，当然这是题外话了。</p>
<p><strong>一点建议：</strong><br>我不知道大家跟我是否一样，当我新接触一个事情或事物的时候，我不太习惯去看他的使用手册或者官方文档，而是去google,baidu别人的教程，我觉得这是一个很不好的习惯，以后尽量优先考虑官方手册。对于搭建这个博客来说，就让我深深的体会到了这样的好处。<strong>关于hexo的官方手册，关于next(下文会介绍)主题的官方手册，仔细阅读，如果不笨的话，是不需要再看别人的教程从而也能顺利搭建自己的博客。</strong></p>
<h1 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h1><p>我的环境：win10 x64</p>
<p>要使用hexo，需要node.js和git. </p>
<h2 id="Node-js下载安装"><a href="#Node-js下载安装" class="headerlink" title="Node.js下载安装"></a><a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">Node.js</a>下载安装</h2><p><img src="http://o8fj2jbwb.bkt.clouddn.com/nodejs.png" alt=""><br>这里推荐大家采用安装包.msi的方式，不要下载绿色版的.exe，不然后续设置的环境变量可能不对，还有提示npm找不到的问题。可以看到标题Current Version:v4.4..5(includes npm 2.15.5),故为了正确性起见，推荐大家采用.msi的方式，按照上面地址的安装配置教程就可以顺利安装。</p>
<p>如果后面安装hexo的时候出现npm找不到的话，也可以手动自己安装npm。</p>
<h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a><a href="https://git-scm.com/download/" target="_blank" rel="noopener">Git</a>安装</h2><a id="more"></a>
<p><strong>注意：Git是一个版本控制系统，下载安装Git会顺带把Git需要用到的shell环境也安装了，当然你可以自己设置成windows Powershell，亦或是像我一样，设置成bash.不要与github的客户端搞混了，说来惭愧，我就搞混了。希望你不要搞混了</strong></p>
<p>上面的地址可能需要翻墙，如果不能翻墙，自行解决。但我相信，你既然都能想到用独立博客，那必然翻个墙不是什么难事。<br><img src="http://o8fj2jbwb.bkt.clouddn.com/git.png" alt=""></p>
<p>由于我工作中用的是svn，所以对git不太熟练，但是我觉得git是未来的趋势，有必要学习使用。</p>
<p><em><a href="http://git.oschina.net/progit/" target="_blank" rel="noopener">Git教程</a></em></p>
<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装<a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a></h1><p>hexo是什么？正如hexo.io上的标题所示：A fast, simple &amp; powerful blog framework ，powered by node.js就足以介绍了。<br><img src="http://o8fj2jbwb.bkt.clouddn.com/hexoinstallll.png" alt=""></p>
<p>安装hexo也很简单，打开git bash:<br><img src="http://o8fj2jbwb.bkt.clouddn.com/gitbash.png" alt=""><br>然后输入命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-cli -g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure>

<p>输完收工！！</p>
<p>需要注意的是blog可以是你自己的自定义blog目录，比如我的是/g/blog<br>安装完成后大概会是下图的结果：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/hexosuc.png" alt=""></p>
<p>好了，hexo安装好了，接下来就是使用了。这里强烈推荐大家看<a href="https://hexo.io/docs/" target="_blank" rel="noopener">hexo的官方doc</a></p>
<p>后面将会用到的几个常用命令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</span><br><span class="line">$ hexo<span class="built_in"> server </span>(hexo s) 启动本地web服务，用于博客的预览</span><br><span class="line">$ hexo deploy (hexo d) 部署博客到远端服务器</span><br><span class="line">$ hexo new <span class="string">"postName"</span> #新建文章</span><br><span class="line">$ hexo new<span class="built_in"> page </span><span class="string">"pageName"</span> #新建页面</span><br></pre></td></tr></table></figure>
<p>部署到github:</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo d -g</span><br></pre></td></tr></table></figure>
<p>部署到本地<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>:</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo s -g</span><br></pre></td></tr></table></figure>

<h1 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a><a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a></h1><p>作为一个使用github的人来说，应该不用多介绍githubpages。具体可以看上面的链接。</p>
<h2 id="创建新的仓库"><a href="#创建新的仓库" class="headerlink" title="创建新的仓库"></a>创建新的仓库</h2><p>这里需要注意的一点是：<strong>在你的github里新建一个仓库，仓库名需是你的github用户名，不然是不行的</strong>，所以后续你就可以通过<a href="http://username.github.io/" target="_blank" rel="noopener">http://username.github.io</a>来访问自己的博客。</p>
<h2 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h2><h3 id="查看原有的ssh-key"><a href="#查看原有的ssh-key" class="headerlink" title="查看原有的ssh key"></a>查看原有的ssh key</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br><span class="line">$ <span class="keyword">ls</span> -al <span class="string">./</span>*</span><br></pre></td></tr></table></figure>
<p>如果出现” No such file” 则不用管，如果存在.ssh这个目录那么可以先备份（不是必须，我就没有），再删除。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>rm -rf ./*</span><br></pre></td></tr></table></figure>

<h3 id="生成新的ssh-key"><a href="#生成新的ssh-key" class="headerlink" title="生成新的ssh key"></a>生成新的ssh key</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"yourname"</span></span><br><span class="line">$ git<span class="built_in"> config </span>--global user.email <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure>
<p>“yourname”可以随意输入，”youremail”一般就输成你的github上的邮箱。<br>然后接着输入：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keygen -t rsa -C <span class="string">"yourmail@gmail.com"</span></span><br></pre></td></tr></table></figure>
<p>这个地方的邮箱必须是你github上的邮箱。一路回车，中间会出现一个设置密码的询问，可以忽略，如果设置，那么就记住。我选择的是不要密码，那么直接一路next. 之后会在~/.ssh/下生成两个文件id_rsa 和 id_rsa.pub</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>cat ~<span class="regexp">/.ssh/id</span>_rsa.pub</span><br></pre></td></tr></table></figure>
<p>然后copy到github上添加秘钥。<br><img src="http://o8fj2jbwb.bkt.clouddn.com/githubssh.png" alt=""><br>title可以随意。完成之后，在git bash里验证一下：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure>
<p>验证成功大概是这么个结果：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/ssh.png" alt=""></p>
<h1 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h1><p>到这里，即将开始真正配置hexo，包括主题设置，部署上线等等。</p>
<p>修改$BLOG/_config.yml，$BLOG是我自定义的一个shell环境变量,你也可以自定义你自己的$BLOG.<br><img src="http://o8fj2jbwb.bkt.clouddn.com/_configyml.png" alt=""><br>参照我的设置，修改成你自己的github仓库地址即可。<strong>这里就要注意到，这个仓库的名字跟我的github用户名是一样的</strong></p>
<p><strong>一些语法上的东西需要注意：type:,repo:,branch:后面是必须有一个空格，不然后面会报错</strong></p>
<p>然后接着在git bash 里执行：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>npm install hexo-deployer-git --save</span><br><span class="line"><span class="variable">$ </span>hexo d</span><br></pre></td></tr></table></figure>
<p>此时，便已经成功部署到github上了，hexo默认自带了一篇hello world的markdown 博文。可以通过<a href="http://linxi4linux.github.io/" target="_blank" rel="noopener">http://linxi4linux.github.io</a>访问刚刚部署上线的博客。（换成你自己的地址）</p>
<p><em>至此，一个基本的博客系统就已经搭建完成了</em></p>
<h1 id="hexo-详细配置"><a href="#hexo-详细配置" class="headerlink" title="hexo 详细配置"></a>hexo 详细配置</h1><p>接下来的时间，便是折腾开始。看你自己的喜好了。可以配置主题，第三方服务，搜索，代码高亮等等。<br>我推荐使用<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next主题</a>，刚开始我会觉得挺简陋的，但是我越看越觉得大气，舒服，简洁。</p>
<p>参照<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next主题</a>的官方文档，你完全不用google其他的教程，就可以很容易很顺利，而且很好的搭建起一个效果还不错的博客站点。可以看看参考<a href="http://linxi4linux.github.io/" target="_blank" rel="noopener">我的博客.</a><br><img src="http://o8fj2jbwb.bkt.clouddn.com/next.png" alt=""><br>上图是next的官方网站，我建议你把“开始使用”，“主题配置”，”第三方服务”，“内建标签”，“进阶设定”,”常见问题”都仔细的阅读一遍，照着操作，你就没问题的。</p>
<p>下面挑几个我觉得还挺好玩的配置记录记录：</p>
<h2 id="多说评论系统"><a href="#多说评论系统" class="headerlink" title="多说评论系统"></a><a href="http://duoshuo.com/" target="_blank" rel="noopener">多说评论系统</a></h2><ol>
<li>登陆<a href="http://duoshuo.com/" target="_blank" rel="noopener">多说</a>,选择我要安装。</li>
<li>创建站点<br><img src="http://o8fj2jbwb.bkt.clouddn.com/%E5%A4%9A%E8%AF%B4.png" alt=""><br>记住你自己设置的多说域名，比如我的是 rebootcat</li>
<li>编辑主题配置文件_config.yml($BLOG/themes/next/_config.yml)<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">duoshuo_shortname:</span> rebootcat</span><br></pre></td></tr></table></figure>
上面这些next的官方doc里都有，需要注意的是**如果需要在某个文章或者页面禁用多说，需要配置<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
在博文的开头处。</li>
</ol>
<h2 id="提交google抓取"><a href="#提交google抓取" class="headerlink" title="提交google抓取"></a>提交google抓取</h2><p>首先安装sitemap插件：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-generator-sitemap</span><br></pre></td></tr></table></figure>

<p>然后插件存放目录是$BLOG/node_modules/</p>
<p>然后配置站点配置文件_config.yml($BLOG/_config.yml):</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Extensions	</span></span><br><span class="line"><span class="symbol">Plugins:</span></span><br><span class="line">- hexo-generator-feed</span><br><span class="line"></span><br><span class="line"><span class="meta">#sitemap</span></span><br><span class="line"><span class="symbol">sitemap:</span></span><br><span class="line"><span class="symbol">path:</span> sitemap.xml</span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo d -g</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://linxi4linux.github.io/sitemap.xml" target="_blank" rel="noopener">http://username.github.io/sitemap.xml</a>会看到如下的结果：</p>
<p><img src="http://o8fj2jbwb.bkt.clouddn.com/sitemap.png" alt=""><br>sitemap.xml文件是用来干嘛的呢？我自己简单的理解是：这个文件实时记录了网站内容的变更，提交google抓取的时候，google便可以根据这个文件的内容来进行相应的更新或者索引。</p>
<p>接下来，到<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN&authuser=0" target="_blank" rel="noopener">Google Search</a>,添加自己的网站网址，之后在这个页面会收到一封邮件，大致是这样子：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/googleConsole.png" alt=""><br>然后我们点击提交站点地图，接下来你就会操作了。之后完成之后便是等待google审核通过。比如我自己的，前天提交了，现在还没有通过（应该是碰到问题了）：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/sitemaperror.png" alt=""></p>
<h2 id="嵌入网易云音乐"><a href="#嵌入网易云音乐" class="headerlink" title="嵌入网易云音乐"></a>嵌入网易云音乐</h2><p>在网页嵌入云播放器，是不是觉得很酷？是挺酷的，但是其实很简单。<br>首先找到一首歌，然后点击“生成外链播放器”：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/untilyou.png" alt=""><br><img src="http://o8fj2jbwb.bkt.clouddn.com/untilyou2.png" alt=""><br>复制上面的html代码到博文的任意位置，即可。就这么简单。<br><strong>如果碰到受版权保护的情况，解决办法</strong> <a href="http://www.itechzero.com/netease-cloud-music-cannot-create-outchain-solution.html" target="_blank" rel="noopener">戳我。</a></p>
<h2 id="添加近期文章板块"><a href="#添加近期文章板块" class="headerlink" title="添加近期文章板块"></a>添加近期文章板块</h2><figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> theme.recent_posts %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll motion-element </span></span></span><span class="template-variable">&#123;&#123; "links-of-blogroll-" + theme.recent_posts_layout  &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll-title"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- modify icon to fire by szw --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-history fa-</span></span></span><span class="template-variable">&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; theme.recent_posts_title &#125;&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll-list"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> posts = site.posts.sort('-<span class="name">date</span>') %&#125;</span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> post in posts.slice('0', '5') %&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(post.path) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; post.title &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><span class="template-variable">&#123;&#123; post.title &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>将此代码贴在next/layout/_macro/sidebar.swig中的if theme.links对应的endif后面，就ok了，是不是很简单。。。。</p>
<p>为了配置方便，在主题的next/_config.yml中添加了几个变量，如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">recent_posts_title:</span> <span class="string">近期文章</span></span><br><span class="line"><span class="attr">recent_posts_layout:</span> <span class="string">block</span></span><br><span class="line"><span class="attr">recent_posts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>


<h2 id="纯粹是好玩（high一下）"><a href="#纯粹是好玩（high一下）" class="headerlink" title="纯粹是好玩（high一下）"></a>纯粹是好玩（high一下）</h2><p>这个效果会使整个页面震颤随着音乐，甚至标签也会跟着跳跃。<br>在$BLOG\themes\next\layout_partials\header.swig 中的 ul 标签加入如下 li 代码：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">  &lt;!-- 自定义High一下的功能 --&gt;</span><br><span class="line">  &lt;li <span class="keyword">class</span>=<span class="string">"menu-item"</span>&gt; &lt;a title=<span class="string">"而我一无所获"</span> href='javascript:(</span><br><span class="line"><span class="keyword">function</span> go() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> songs = [</span><br><span class="line">            <span class="string">"http://music.163.com/song/media/outer/url?id=26199445.mp3"</span>,</span><br><span class="line">            <span class="string">""</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> c() &#123;</span><br><span class="line">    <span class="keyword">var</span> e = document<span class="variable">.createElement</span>(<span class="string">"link"</span>);</span><br><span class="line">    e<span class="variable">.setAttribute</span>(<span class="string">"type"</span>, <span class="string">"text/css"</span>);</span><br><span class="line">    e<span class="variable">.setAttribute</span>(<span class="string">"rel"</span>, <span class="string">"stylesheet"</span>);</span><br><span class="line">    e<span class="variable">.setAttribute</span>(<span class="string">"href"</span>, f);</span><br><span class="line">    e<span class="variable">.setAttribute</span>(<span class="string">"class"</span>, l);</span><br><span class="line">    document<span class="variable">.body</span><span class="variable">.appendChild</span>(e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> h() &#123;</span><br><span class="line">    <span class="keyword">var</span> e = document<span class="variable">.getElementsByClassName</span>(l);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; e<span class="variable">.length</span>; t++) &#123;</span><br><span class="line">        document<span class="variable">.body</span><span class="variable">.removeChild</span>(e[t])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> p() &#123;</span><br><span class="line">    <span class="keyword">var</span> e = document<span class="variable">.createElement</span>(<span class="string">"div"</span>);</span><br><span class="line">    e<span class="variable">.setAttribute</span>(<span class="string">"class"</span>, a);</span><br><span class="line">    document<span class="variable">.body</span><span class="variable">.appendChild</span>(e);</span><br><span class="line">    setTimeout(<span class="keyword">function</span>() &#123;</span><br><span class="line">        document<span class="variable">.body</span><span class="variable">.removeChild</span>(e)</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> d(e) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        height : e<span class="variable">.offsetHeight</span>,</span><br><span class="line">        width : e<span class="variable">.offsetWidth</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> v(i) &#123;</span><br><span class="line">    <span class="keyword">var</span> s = d(i);</span><br><span class="line">    <span class="keyword">return</span> s<span class="variable">.height</span> &gt; e &amp;&amp; s<span class="variable">.height</span> &lt; n &amp;&amp; s<span class="variable">.width</span> &gt; t &amp;&amp; s<span class="variable">.width</span> &lt; r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> m(e) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = e;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!!t) &#123;</span><br><span class="line">        n += t<span class="variable">.offsetTop</span>;</span><br><span class="line">        t = t<span class="variable">.offsetParent</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> g() &#123;</span><br><span class="line">    <span class="keyword">var</span> e = document<span class="variable">.documentElement</span>;</span><br><span class="line">    <span class="keyword">if</span> (!!window<span class="variable">.innerWidth</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> window<span class="variable">.innerHeight</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e &amp;&amp; !isNaN(e<span class="variable">.clientHeight</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> e<span class="variable">.clientHeight</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> y() &#123;</span><br><span class="line">    <span class="keyword">if</span> (window<span class="variable">.pageYOffset</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> window<span class="variable">.pageYOffset</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math<span class="variable">.max</span>(document<span class="variable">.documentElement</span><span class="variable">.scrollTop</span>, document<span class="variable">.body</span><span class="variable">.scrollTop</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> E(e) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = m(e);</span><br><span class="line">    <span class="keyword">return</span> t &gt;= w &amp;&amp; t &lt;= b + w</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> S() &#123;</span><br><span class="line">    <span class="keyword">var</span> e = document<span class="variable">.getElementById</span>(<span class="string">"audio_element_id"</span>);</span><br><span class="line">    <span class="keyword">if</span>(e != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> index = parseInt(e<span class="variable">.getAttribute</span>(<span class="string">"curSongIndex"</span>));</span><br><span class="line">        <span class="keyword">if</span>(index &gt; songs<span class="variable">.length</span> - <span class="number">2</span>) &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        e<span class="variable">.setAttribute</span>(<span class="string">"curSongIndex"</span>, index);</span><br><span class="line">        N();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    e<span class="variable">.src</span> = i;</span><br><span class="line">    e<span class="variable">.play</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> x(e) &#123;</span><br><span class="line">    e<span class="variable">.className</span> += <span class="string">" "</span> + s + <span class="string">" "</span> + o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> T(e) &#123;</span><br><span class="line">    e<span class="variable">.className</span> += <span class="string">" "</span> + s + <span class="string">" "</span> + u[Math<span class="variable">.floor</span>(Math<span class="variable">.random</span>() * u<span class="variable">.length</span>)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> N() &#123;</span><br><span class="line">    <span class="keyword">var</span> e = document<span class="variable">.getElementsByClassName</span>(s);</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">new</span> RegExp(<span class="string">"\\b"</span> + s + <span class="string">"\\b"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; e<span class="variable">.length</span>; ) &#123;</span><br><span class="line">        e[n]<span class="variable">.className</span> = e[n]<span class="variable">.className</span><span class="variable">.replace</span>(t, <span class="string">""</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> initAudioEle() &#123;</span><br><span class="line">    <span class="keyword">var</span> e = document<span class="variable">.getElementById</span>(<span class="string">"audio_element_id"</span>);</span><br><span class="line">    <span class="keyword">if</span>(e === <span class="literal">null</span>)&#123;</span><br><span class="line">        e = document<span class="variable">.createElement</span>(<span class="string">"audio"</span>);</span><br><span class="line">        e<span class="variable">.setAttribute</span>(<span class="string">"class"</span>, l);</span><br><span class="line">        e<span class="variable">.setAttribute</span>(<span class="string">"curSongIndex"</span>, <span class="number">0</span>);</span><br><span class="line">        e<span class="variable">.id</span> = <span class="string">"audio_element_id"</span>;</span><br><span class="line">        e<span class="variable">.loop</span> = false;</span><br><span class="line">        e<span class="variable">.bgcolor</span> = <span class="number">0</span>;</span><br><span class="line">        e<span class="variable">.addEventListener</span>(<span class="string">"canplay"</span>, <span class="keyword">function</span>() &#123;</span><br><span class="line">        setTimeout(<span class="keyword">function</span>() &#123;</span><br><span class="line">            x(k)</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">        setTimeout(<span class="keyword">function</span>() &#123;</span><br><span class="line">            N();</span><br><span class="line">            p();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; O<span class="variable">.length</span>; e++) &#123;</span><br><span class="line">                T(O[e])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">15500</span>)</span><br><span class="line">    &#125;, true);</span><br><span class="line">    e<span class="variable">.addEventListener</span>(<span class="string">"ended"</span>, <span class="keyword">function</span>() &#123;</span><br><span class="line">        N();</span><br><span class="line">        h();</span><br><span class="line">        go();</span><br><span class="line">    &#125;, true);</span><br><span class="line">    e<span class="variable">.innerHTML</span> = <span class="string">" &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;"</span>;</span><br><span class="line">    document<span class="variable">.body</span><span class="variable">.appendChild</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initAudioEle();</span><br><span class="line"><span class="keyword">var</span> e = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> t = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">350</span>;</span><br><span class="line"><span class="keyword">var</span> r = <span class="number">350</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> curSongIndex = parseInt(document<span class="variable">.getElementById</span>(<span class="string">"audio_element_id"</span>)<span class="variable">.getAttribute</span>(<span class="string">"curSongIndex"</span>));</span><br><span class="line"><span class="keyword">var</span> i = songs[curSongIndex];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"mw-harlem_shake_me"</span>;</span><br><span class="line"><span class="keyword">var</span> o = <span class="string">"im_first"</span>;</span><br><span class="line"><span class="keyword">var</span> u = [<span class="string">"im_drunk"</span>, <span class="string">"im_baked"</span>, <span class="string">"im_trippin"</span>, <span class="string">"im_blown"</span>];</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"mw-strobe_light"</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="string">"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> l = <span class="string">"mw_added_css"</span>;</span><br><span class="line"><span class="keyword">var</span> b = g();</span><br><span class="line"><span class="keyword">var</span> w = y();</span><br><span class="line"><span class="keyword">var</span> C = document<span class="variable">.getElementsByTagName</span>(<span class="string">"*"</span>);</span><br><span class="line"><span class="keyword">var</span> k = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> L = <span class="number">0</span>; L &lt; C<span class="variable">.length</span>; L++) &#123;</span><br><span class="line">    <span class="keyword">var</span> A = C[L];</span><br><span class="line">    <span class="keyword">if</span> (v(A)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (E(A)) &#123;</span><br><span class="line">            k = A;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (A === <span class="literal">null</span>) &#123;</span><br><span class="line">    console<span class="variable">.warn</span>(<span class="string">"Could not find a node of the right size. Please try a different page."</span>);</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c();</span><br><span class="line">S();</span><br><span class="line"><span class="keyword">var</span> O = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> L = <span class="number">0</span>; L &lt; C<span class="variable">.length</span>; L++) &#123;</span><br><span class="line">    <span class="keyword">var</span> A = C[L];</span><br><span class="line">    <span class="keyword">if</span> (v(A)) &#123;</span><br><span class="line">        O<span class="variable">.push</span>(A)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)()'&gt;&lt;i <span class="keyword">class</span>=<span class="string">"menu-item-icon fa fa-music fa-fw"</span>&gt;&lt;/i&gt; 人生需要自嗨&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">  &lt;!-- <span class="keyword">end</span>  high 一下 --&gt;</span><br></pre></td></tr></table></figure>


<h1 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related  Posts"></a>Related  Posts</h1><p>感谢以下博主：</p>
<p><a href="http://blog.csdn.net/u011974987/article/details/51331822" target="_blank" rel="noopener"> 基于Hexo+GitHub Pages 免费搭建个人博客最强教程</a></p>
<p><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="noopener">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></p>
<p><a href="http://www.huabuyu.net/2016/04/02/hexo-next-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%89%93%E8%B5%8F%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">hexo next 主题添加打赏功能</a></p>
<p><a href="http://jijiaxin89.com/2015/08/21/%E7%8E%A9%E8%BD%AChexo%E5%8D%9A%E5%AE%A2%E4%B9%8Bnext/" target="_blank" rel="noopener">玩转Hexo博客之Next</a></p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h1><p>记录到此为止，其中比较琐碎的部分建议大家直接查看next的<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">官方doc。</a></p>
<p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a> (<strong>默认</strong>)</p>
</li>
<li><p><a href="http://linxi4linux.github.io/" target="_blank" rel="noopener">http://linxi4linux.github.io/</a>(原地址，备用)</p>
</li>
<li><p><a href="http://reboot_cat.coding.me/" target="_blank" rel="noopener">http://reboot_cat.coding.me/</a> （原地址，备用）</p>
</li>
</ul>
<p>email: <a href="mailto:&#x6c;&#105;&#110;&#x75;&#120;&#x63;&#111;&#100;&#101;&#x32;&#110;&#105;&#107;&#105;&#x40;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;">&#x6c;&#105;&#110;&#x75;&#120;&#x63;&#111;&#100;&#101;&#x32;&#110;&#105;&#107;&#105;&#x40;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a></p>
<p>2016-6-11 于杭州</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
        <tag>github</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器利器之vimium</title>
    <url>/2016/06/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%88%A9%E5%99%A8%E4%B9%8Bvimium/</url>
    <content><![CDATA[<h1 id="偶然发现"><a href="#偶然发现" class="headerlink" title="偶然发现"></a>偶然发现</h1><p>工作中使用外接键盘，在浏览器里操作的时候每次输完字都需要把手移动好长一段距离才到鼠标的位置，很浪费时间，很浪费体力。所以一直想着在浏览器里操作能不用到鼠标，提高工作的效率的同时，看上去也还可以装X.</p>
<p>一直也很羡慕黑客们在电脑前一阵噼里啪啦狂敲，分分钟解决一个难题。那他们怎么上网的呢？于是就这么偶然的发现了Vimium.</p>
<h1 id="安装Vimium"><a href="#安装Vimium" class="headerlink" title="安装Vimium"></a>安装Vimium</h1><p>使用linux的人都知道vim，Vimium跟vim名字这么像，必然是有联系的。vimium是chrome的一个插件，配置了一系列类似于vim使用的快捷键，可以极大效率的提高上网操作速度。<br>安装Vimium很简单，直接在chrome的扩展程序搜索该插件：<br><img src="http://o8fj2jbwb.bkt.clouddn.com/vimium.png" alt=""><br>上图显示，我的已经是安装了。</p>
<h1 id="使用Vimium"><a href="#使用Vimium" class="headerlink" title="使用Vimium"></a>使用Vimium</h1><p>安装好后在浏览器里试着像vim的操作那样随便来几个按键，是不是发现神奇的事了？对的，好神奇，h,j,k,l这基本的键ok了。<br>快捷键的使用是一个慢慢熟练的过程，所以刚开始如果不太熟没关系，试着多使用几次就没问题了。</p>
<p>记得我前面的博客有提到过碰到问题看官方手册或者官方文档的建议，那么对于Vimium，<strong>在normal模式输入?就可以看到vimium基本的操作提示</strong>。<br><img src="http://o8fj2jbwb.bkt.clouddn.com/vimiumhelp.png" alt=""></p>
<p>基本常用的90%以上的快捷键都在这里了，仔细阅读多次使用，就能快速熟练。记住我的那句话，<strong>记得看官方的文档或者帮助。</strong></p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="# The End"></a># The End</h1><p>Blog:</p>
<ul>
<li><p><a href="http://rebootcat.com" target="_blank" rel="noopener">rebootcat.com</a> (<strong>默认</strong>)</p>
</li>
<li><p><a href="http://linxi4linux.github.io/" target="_blank" rel="noopener">http://linxi4linux.github.io/</a>(原地址，备用)</p>
</li>
<li><p><a href="http://reboot_cat.coding.me/" target="_blank" rel="noopener">http://reboot_cat.coding.me/</a> （原地址，备用）</p>
</li>
</ul>
<p>email: <a href="mailto:&#108;&#x69;&#110;&#117;&#x78;&#x63;&#x6f;&#100;&#101;&#x32;&#x6e;&#105;&#x6b;&#105;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#109;">&#108;&#x69;&#110;&#117;&#x78;&#x63;&#x6f;&#100;&#101;&#x32;&#x6e;&#105;&#x6b;&#105;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#109;</a></p>
<p>2016-6-12 于杭州</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>vimium</tag>
      </tags>
  </entry>
</search>
